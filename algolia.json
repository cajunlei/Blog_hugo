[{"categories":["Work"],"content":"本人在使用Auto CAD的过程中的一些学习笔记分享。持续更新中 ······ ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:0:0","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"使用技巧 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:0","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"高版本设置“经典模式” 从2015开始，CAD默认就没有经典模式界面了，但是朋友都习惯了使用原来的经典模式空间，接下来教你不用插件CAD高版本如何快速调出“经典模式”空间 第一步 打开CAD，找到左上角的向下三角形，点击显示菜单栏； ▲ 我这里已经显示了菜单栏\r\r第二步 打开工具菜单 –\u003e 选项板 –\u003e 点击功能区，将功能区关闭； 第三步 打开工具菜单 –\u003e 工具栏 –\u003e AutoCAD，根据个人需要把标准，样式，图层，特性，绘图，修改，绘图次序勾选上； 第四步 然后点击右下角的齿轮，将当前工作空间另存为AutoCAD经典（或者自己喜欢的名字），保存即可； ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:1","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"高版本关闭开始页面 第一步 打开CAD后，默认打开的是开始页； ▲ 默认的开始页面\r\r第二步 新建一个空白文件； ▲ 新建CAD文件\r\r第三步 在命令行中输入startmode命令后回车； 第四步 将默认的1改为0，然后回车； 此时，开始页就已经关闭了。 提示\r\r若要恢复，将 第四步 的0改为1，然后回车。\r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:2","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"快速修改属性文字 在CAD中要编辑普通文字，直接双击就可以修改； 但属性块中的属性文字，我们双击以后会先弹出一个对话框，然后才能修改； ▲ 双击属性块的编辑界面\r\r那么属性文字如何实现像普通文字一样双击修改呢？ 操作方法：\r\r按住 Ctrl 键，双击属性文字。 ▲ 无弹窗，直接编辑\r\r\r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:3","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"属性块中文字高度无法更改 在修改文字高度的时候，发现文字高度是显示灰色的； ▲ 查看使用的文字样式\r\r双击属性块，在增强属性编辑器 –\u003e 文字选项 –\u003e 文字样式； 记住所使用的文字样式； 快捷键ST打开文字样式 –\u003e 找到所使用的样式，将大小一栏的高度改成0就行了； ▲ 修改文字高度\r\r再次双击属性块，打开增强属性编辑器 –\u003e 文字选项 –\u003e 高度； 这个时候就正常显示，可以修改了； ▲ 操作成功\r\r","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:4","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"批量修改属性快的特性 CAD中批量修改图块的特性，如属性的颜色等; BATTMAN 比如我现在要将材料名称的颜色都改为红色 ； 输入battman命令，回车； 在块属性管理器左上角 –\u003e 选择快 –\u003e 设置； ▲ 块属性管理器\r\r在块属性设置对话框先全部清除,然后勾选 提示和颜色 –\u003e 确定; ▲ 块属性设置对话框\r\r选择需要编辑的行 –\u003e 编辑 –\u003e 在编辑属性对话框选择特性 –\u003e 颜色 –\u003e 红色 –\u003e 确定 –\u003e 确定； ▲ 编辑属性对话框\r\r图块属性就都改过来了； ▲ 修改成功\r\rBATTMAN命令不仅可以修改图块属性的颜色，还可以编辑图块的其他属性定义、从块中删除属性以及更改插入块时系统提示用户输入属性值的顺序。 对话框中各个控件的作用：\r\r1、选择块： 单击“选择块”按钮后，对话框将临时关闭，可以使用鼠标从图中拾取要编辑的块。 如果修改了块的属性，并且未保存所做的更改就选择一个新块，系统将提示在选择其他块之前先保存更改。 2、块列表： 列出具有属性的当前图形中的所有块定义。选择要修改属性的块。 属性列表： 显示所选块中每个属性的特性。 3、同步： 更新具有当前定义的属性特性的选定块的全部实例。此操作不会影响每个块中赋给属性的值。 4、上移： 在提示序列的早期阶段移动选定的属性标签。选定固定属性时，“上移”按钮不可用。 5、下移： 在提示序列的后期阶段移动选定的属性标签。选定常量属性时，“下移”按钮不可使用。 6、编辑： 打开“编辑属性”对话框，从中可以修改属性特性。 7、删除： 从块定义中删除选定的属性。如果在选择“删除”之前已选择了“设置”对话框中的“将修改应用到现有参照”，将删除当前图形中全部块实例的属性。对于仅具有一个属性的块，“删除”按钮不可使用。 8、在图形中找到的块： X 报告当前图形中选定块的实例总数。 9、在当前空间中找到的块： X 报告当前模型空间或布局中选定块的实例数。 10、设置： 打开“块属性设置”对话框，从中可以自定义“块属性管理器”中属性信息的列出方式。 11、应用： 应用所做的更改，但不关闭对话框。 \r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:5","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"文字加背景 为了使文字更醒目，不被图形遮挡，可以使用背景遮罩； 第一步 选中文字，按Ctrl + 1打开特性面板； 第二步 点击文字 –\u003e 背景遮罩； 第三步 勾选「使用背景遮罩」、「使用图形背景颜色」，确定； 注意\r\r 只有多行文字可以添加「背景遮罩」； 单行文字转换为多行文字命令：TXT2MTXT； \r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:6","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"输入特殊符号 符号 输入 正负号± %%p 直径符号 %%c 温度符号 %%d 带下划线字体 %%u 带上划线字体 %%o 一级钢符号 %%130 二级钢符号 %%131 三级钢符号 %%132 四级钢符号 %%133 特殊钢筋 %%134 L型钢 %%135 H型钢 %%136 槽型钢 %%137 工字钢 %%138 上标文字开 %%140 上标文字关 %%141 下标文字开 %%142 下标文字关 %%143 小于等于≤ %%146 大于等于≥ %%147 小于号\u003c %%60 等于号= %%61 大于号\u003e %%62 约等于 %%173 小于等于≤ %%174 大于等于≥ %%175 乘号× %%178 除号÷ %%179 不等于 %%180 不小于 %%186 不大于 %%187 Ⅰ %%150 Ⅱ %%151 Ⅲ %%152 Ⅳ %%153 Ⅴ %%154 Ⅵ %%155 Ⅶ %%156 Ⅷ %%157 Ⅸ %%158 Ⅹ %%159 圆中有一个字符的特殊文字的开始，如① %%200 圆中有一个字符的特殊文字的结束 %%201 圆中有二个字符的特殊文字的开始 %%202 圆中有二个字符的特殊文字的结束 %%203 圆中有三个字符的特殊文字的开始 %%204 圆中有三个字符的特殊文字的结束 %%205 扁钢 %%191 工字钢 %%192 角钢 %%193 槽钢 %%194 方钢 %%195 卷边角钢 %%196 卷边槽钢 %%197 Z型钢 %%198 平方米 %%164或m%%1412%%142 一级钢 %%129 二级钢 %%130 三级钢 %%160 罗马1 %%131 罗马2 %%132 罗马4 %%134 罗马5 %%135 罗马6 %%136 罗马7 %%137 罗马8 %%138 罗马9 %%139 罗马10 %%140 上标上 %%141 上标归位 %%142 下标下 %%143 下标归位 %%144 上下标上 %%145 上下标下 %%146 上下标归位 %%144 千分号 %%151 ∑ %%156 人民币 %%165 打钩 %%168 打叉 %%169 一位轴 %%147 一位轴圈 %%148 二位轴 %%149 二位轴圈 %%150 方形空 %%201 方形填 %%202 三角号 %%203 希腊字母 %%209~238所有小写及几个大写 左箭号 %%241 右箭号 %%242 上箭号 %%243 下箭号 %%244 黑左箭号 %%245 黑右箭号 %%246 黑上箭号 %%247 黑下箭号 %%248 标高写法 %%251 %%252 注意\r\r如以上符号未正常显示，请搜索下载以下字体。 TssdEng.ttf SJQY.ttf hztxt.shx \r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:1:7","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"疑难杂症 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:0","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"另存的时候不弹出对话框 第一步 打开CAD，在下端的命令栏里输入Filedia，回车； 第二步 将原来的值修改为1（输入数字1），回车。 点击文件/存为显示出现对话框 注意事项\r\r FILEDIA设置为1，将弹出对话框。 FILEDIA设置为0，将显示命令行提示。 \r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:1","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"布局状态栏跳来跳去 切换到布局选项卡以后，底部状态栏就跳来跳去，十分影响作图，解决办法如下； 第一步 命令行输入STATUSBARAUTOWRAP，回车； STATUSBARAUTOWRAP 第二步 将原来的值修改为OFF，回车。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:2","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"不能连续选择 我们在选择图元的时候，有可能会遇到这种情况，选择了第一个图形的时候，再选择第二个图形的时候，第一个会被取消选中； 第一步 输入命令OP，回车； 第二步 切换到「选择集」选项卡； 第三步 将「用shift键添加到选择集」取消勾选； 第四步 点击「应用」 –\u003e 点击「确定」，再次选择图形就恢复正常了。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:3","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"按F8卡顿 第一步 命令行输入Tempoverrides，回车； Tempoverrides 第二步 将原来的值修改为0（输入数字0），回车。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:4","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"布局视口显示数量 遇到布局视口某些视口不显示，但是刷新不显示的视口又会显示出来，一般就是设置了最大视口数量，按以下步骤解决： 第一步 命令行输入MAXACTVP，回车； MAXACTVP 第二步 将原来的值修改为64（最大值为64），回车。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:5","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"填充捕捉 开启填充捕捉\r\r第一步 命令行输入Osoptions，回车； Osoptions 第二步 将原来的值修改为0（输入数字0），回车。 \r\r 关闭填充捕捉\r\r第一步 命令行输入Osoptions，回车； Osoptions 第二步 将原来的值修改为1（输入1），回车。 \r\r ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:6","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"填充比例统一 第一步 命令行输入Measurement，回车； Measurement 第二步 将原来的值修改为0（输入数字0），回车。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:7","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"解除标注关联 第一步 命令行输DIMDISASSOCIATE，回车； DIMDISASSOCIATE 第二步 框选需要解除关联的标注。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:8","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"最大化视口 命令行输VPMAX，回车； VPMAX ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:9","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"重新植入PGP 修改完PGP文件后，执行命令立即生效； 不需要重启CAD软件； 命令行输Reinit，回车； Reinit ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:10","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"选中对象，特性无属性 问题描述 通过命令PROPERTIES或者快捷键Ctrl + 1打开特性面板； 却发现选中对象后，特性面板却无法显示所选对象的属性值； 问题分析 这个问题在CAD 2014会经常碰到； 一般情况是觉得AutoCAD 360没什么用，还占内存，就卸载掉了? 解决方法 在安装包里面找到AcAuthEntities19chs.tlb和axdb19chs.tlb； 把这两个文件放到Auto CAD 2014的安装根目录里面； 默认安装目录C:\\Program Files\\Autodesk\\AutoCAD 2014； 也可以通过右键CAD图标，查看起始位置； ▲ 右键快捷方式，查看属性\r\r关闭所有CAD窗口，重新启动CAD软件，打开文件，这个时候选择对象打开特性面板就可以查看其属性值了。 文件下载 1、AcAuthEntities19chs.tlb 2、axdb19chs.tlb ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:11","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["Work"],"content":"绘图坐标倾斜 情况一、设置了等轴测草图为打开 命令行输入Isodraft，回车； ISODRAFT ▲ 输入命令\r\r将原来的值修改为O（输入字母O），回车。 ▲ 输入参数\r\r 命令参数解释\r\r正交（O）： 关闭等轴测草图。 选择下列选项之一来打开等轴测草图： 左等轴测平面（L）： 指定创建左平面，由一对 90 度和 150 度的轴定义。 上等轴测平面（T）： 指定创建上平面，由一对 30 度和 150 度的轴定义。 右等轴测平面（R）： 指定创建右平面，由一对 90 度和 30 度的轴定义。 \r\r 情况二、设置了当前视口的捕捉和旋转角度 命令行输入Snapang，回车； SNAPANG ▲ 输入命令\r\r将原来的值修改为0（输入数字0），回车。 ","date":"2021-10-21","objectID":"/posts/cad-skills-problem/:2:12","tags":["Auto CAD"],"title":"Auto CAD - 使用技巧和疑难杂症解决办法","uri":"/posts/cad-skills-problem/"},{"categories":["record"],"content":"用运气换收益的理财之道…… ","date":"2022-01-04","objectID":"/posts/34352642331522/:0:0","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"收益汇总 年份 申购数 中签数 中签率 收益 2022年 1次 0次 0% ￥0.00 2021年 35次 4次 11.43% ￥1244.60 ","date":"2022-01-04","objectID":"/posts/34352642331522/:1:0","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"2022年 ","date":"2022-01-04","objectID":"/posts/34352642331522/:2:0","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"一月 申购日期 债券简称 债券代码 申购 中签 收益 2022年01月05日 隆22转债 113053 √ 2022年01月04日 博瑞转债 118004 √ ","date":"2022-01-04","objectID":"/posts/34352642331522/:2:1","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"2021年 ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:0","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"十二月 申购日期 债券简称 债券代码 申购 中签 收益 2021年12月29日 台21转债 113638 √ 2021年12月28日 泰林转债 123135 2021年12月27日 贵燃转债 110084 √ 2021年12月27日 卡倍转债 123134 √ 2021年12月27日 兴业转债 113052 √ 2021年12月24日 杭锅转债 127052 √ 2021年12月22日 佩蒂转债 123133 √ 2021年12月22日 华翔转债 113637 √ 2021年12月17日 回盛转债 123132 √ 2021年12月13日 甬金转债 113636 √ √ ￥379.10 2021年12月10日 升21转债 113635 √ 2021年12月08日 特纸转债 111002 √ 2021年12月08日 N珀莱转 113634 √ 2021年12月03日 奥飞转债 123131 ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:1","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"十一月 申购日期 债券简称 债券代码 申购 中签 收益 2021年11月30日 科沃转债 113633 √ 2021年11月29日 华兴转债 118003 √ 2021年11月17日 博杰转债 127051 √ 2021年11月17日 鹤21转债 113632 √ 2021年11月11日 苏租转债 110083 √ 2021年11月11日 设研转债 123130 √ 2021年11月11日 麒麟转债 127050 √ 2021年11月08日 山玻转债 111001 √ 2021年11月08日 皖天转债 113631 √ 2021年11月04日 锦鸡转债 123129 √ √ ￥174.70 2021年11月02日 希望转2 127049 √ 2021年11月01日 首华转债 123128 √ ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:2","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"十月 申购日期 债券简称 债券代码 申购 中签 收益 2021年10月29日 耐普转债 123127 √ 2021年10月28日 宏发转债 110082 √ 2021年10月27日 赛伍转债 113630 √ √ ￥449.10 2021年10月26日 中大转债 127048 √ 2021年10月25日 帝欧转债 127047 ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:3","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"九月 申购日期 债券简称 债券代码 申购 中签 收益 2021年09月29日 百润转债 127046 √ 2021年09月14日 泉峰转债 113629 2021年09月10日 瑞丰转债 123126 2021年09月06日 元力转债 123125 ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:4","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"八月 申购日期 债券简称 债券代码 申购 中签 收益 2021年08月23日 晨丰转债 113628 2021年08月16日 牧原转债 127045 √ √ ￥241.70 2021年08月16日 晶瑞转2 123124 √ 2021年08月16日 蒙娜转债 127044 √ 2021年08月13日 天合转债 118002 √ 2021年08月12日 川恒转债 127043 √ 2021年08月12日 江丰转债 123123 √ 2021年08月10日　天风证券开户成功； ","date":"2022-01-04","objectID":"/posts/34352642331522/:3:5","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"参考链接 东方财富网 可转债数据一览表 ","date":"2022-01-04","objectID":"/posts/34352642331522/:4:0","tags":["打新债"],"title":"打新债（捡钱）之路","uri":"/posts/34352642331522/"},{"categories":["record"],"content":"5G的到来，数据流量发飞逝，让我这本不富裕的套餐雪上加霜。 互联网套型时代，各种套餐满天飞，但是老用户不如狗； 配合一张电信良心卡，大流量甚至还能白嫖； 双卡双待狂喜，老号一直保留，开一个低套餐，接收验证码绑定银行卡长期使用； 我这里为了多一点流量，选了一个半白嫖的卡，记录一下过程； ","date":"2022-01-03","objectID":"/posts/20220103184133/:0:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"搜索 第一步 打开 张大妈 ，搜索「卡」； 第二步 筛选：「电脑数码」 –\u003e 「手机通讯」 –\u003e 「运营商」； 第三步 接下来就开始选，选择自己最中意的即可； 注意\r\r在下单之前请逐字阅读店铺的介绍，特别是小字，白嫖这种事情还是谨慎！谨慎！再谨慎！！ 在读懂规则过后再下单购买，避免被反撸！ \r\r 最终，我选定这个套餐； ▲ 店家宣传图\r\r注意\r\r电信·风行卡 这个名字都是店家自己取的，不用在意，在电信根本没有这个； 这个卡的本质还是电信星卡； \r\r ","date":"2022-01-03","objectID":"/posts/20220103184133/:1:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"下单 选好中意的套餐就是正常的下单等待收货，一般店铺会要求备注姓名和身份证号码，用于开卡操作； 发货后会收到短信通知，内有链接可以在电信网站查询到进度； ▲ 发货后收到短信通知\r\r我下单发货就是成都的营业厅发过来的，京东快递也很快，第二天就到了； ▲ 通过短信内链接查询\r\r注意\r\r通常这种卡的归属地都是随机的，但是现在流量和通话都不限制，全国各地都可以使用；\r\r ","date":"2022-01-03","objectID":"/posts/20220103184133/:2:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"实名认证 现在的电话卡都必须要实名认真的，有的是拿到卡后再小程序之类的在线认证； 我买的卡是快递员送卡的时候就要求认证激活； 快递员带有读身份证的设备，2~3分钟即可认证激活完成； ","date":"2022-01-03","objectID":"/posts/20220103184133/:3:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"充值 我选的这个卡需要参加指定渠道的首充送费才能达到几乎白嫖； 在快递员激活卡后，会有一个二维码，扫码打开链接会有一个充费送费的页面，我的是充50.00元，得170.00元； ▲ 扫码进入的充费页面\r\r冲完费回家拿卡针把卡装到手机上，接下来就嘀嘀嘀好几条短信； 然后我登录了「电信营业厅」，发现余额40.00元，刚刚充值的还没到； 这和卖家宣传页面的不一样呀，我瞬间慌了，赶紧打开订单，然后想再去看一下店家的介绍，发现已经下架了，已经换成其他套餐了； 我一下子就慌了，想不会被反撸了吧，这也太快了，我还没开始嫖呢； 我以为是充值渠道有问题，必须找店家客服要充值渠道进行充值才能送费； 然后咨询了卖家，得到的回复是，都可以，不需要找客服要特殊的充值链接； 心里这才踏实了下来； ","date":"2022-01-03","objectID":"/posts/20220103184133/:4:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"注销 有过注销电信卡的经验，在「电信营业厅」APP上，找到人工客服就可以远程注销了； 异地注销简直是太香了； 不过有可能会因为有合约的关系，需要续费一个月到次月合约期满才能注销，具体情况不完全一样，仅供参考； ","date":"2022-01-03","objectID":"/posts/20220103184133/:5:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["record"],"content":"总结 花费： 买卡花费：3.70元； 话费充值：50.00元； 合计花费：53.70元； 也就是说，在不翻车的情况下，花53.70元可以用一年； 套餐包含： 20GB/月的通用流量； 30GB/月的定向流量； 300分钟/月的语音通话； 免流应用： 网易云音乐 爱奇艺 腾讯视频 优酷视频 西瓜视频 抖音 快手 对于我来说，主要是馋 通用流量 ，免流的几款软件基本都不会用； ","date":"2022-01-03","objectID":"/posts/20220103184133/:6:0","tags":["电话卡","薅羊毛"],"title":"薅电信卡羊毛（50元用一年）","uri":"/posts/20220103184133/"},{"categories":["Work"],"content":"仅作为项目内部使用，勿作他用，否则后果自负…… ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:0:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"设置打印线型 按自己的画图标准将平常用的出图线型修改以下内容： 选中1~255号色，将颜色设置为RGB：72,120,170，然后另存为「xx电子版蓝图.ctb」 ▲ 打印线型设置\r\r使用刚刚另存的打印样式进行打印预览，效果如下： ▲ 打印预览\r\r","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:1:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"打印图纸为PDF文件 不管是采用批量打印的方式，还是CTRL+P单张打印，或者是通过图纸集发布到PDF； 具体采用什么软件来进行批量打印，本文不做展开，根据自己的使用习惯操作； 总之，只有一个目的，就是将我们的CAD图纸转为PDF文件； ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:2:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"举个栗子 我使用的是源泉设计的批量打印； 第一步 打开需要打印的图纸文件； 第二步 在加载好「源泉插件」的情况下，按快捷键BPT启动批量打印； 重点一 打印机要选择打印成PDF的虚拟打印机； ▲ 打印成PDF的虚拟打印机\r\r重点二 打印线型需要选择刚刚设置好的，名为「xx电子版蓝图.ctb」线型； ▲ 批量打印设置界面\r\r第五步 框选需要打印的图纸，开始批量打印； ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:2:1","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"添加蓝图底色 打印出来的PDF线条已经是蓝色的了，接下来我们需要将PDF图纸的背景色也变成蓝色，模拟蓝图的样式； 这里我以Adobe Acrobat Pro DC软件这款软件为例： 第一步 用Adobe Acrobat Pro DC软件打开上一步准备好的PDF文件； 第二步 依次点击「编辑PDF」 –\u003e 「更多」 –\u003e 「背景」 –\u003e 「添加」； 第三步 选择「从颜色」 –\u003e 「其他颜色」； 第四步 自定义颜色，颜色值为：R=184 G=203 B=218，点击确定； 小提示\r\r设置好颜色值后，可以点击「添加颜色到自定义颜色」，以后就可以直接在「自定义颜色」总选择我们预定义好的颜色；\r\r 第五步 最后点击「保存」，我们的PDF文件就变成蓝图的样子了； ▲ 完成效果\r\r","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:3:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"添加图章及签名 第一步 用Adobe Acrobat Pro DC软件打开PDF图纸文件； 第二步 依次点击「编辑PDF」 –\u003e 「添加图像」； 第三步 在弹出的窗口选择需要添加的图章文件（PNG格式）； 第四步 鼠标选择添加的图章，通过「旋转」、「移动」到适合的位置即可； 第五步 最后点击「保存」，我们的PDF文件图纸就是蓝图且签好章的了； ▲ 完成效果\r\r小贴士\r\r在添加图章的时候，可以提前用Photoshop把相应需要签字人的手写体抠图，然后复制到图章内正确的位置，调整适合的大小； 一般签名应为黑色，章为红色； 修改完毕后，另存为PNG格式； 在第三步的时候选择带有签名的PNG文件； \r\r ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:4:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"图章文件下载 百度云\r\r 链　接： https://pan.baidu.com/s/1h0l3C2P7FEPWBKXokCyIfQ 提取码： cf25 \r\r 蓝奏云\r\r 链　接： https://cajun.lanzouq.com/inp35y2s7bc 密　码： dikf \r\r ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:5:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Work"],"content":"参考链接 Auto CAD - 图纸集的正确使用方法 ","date":"2021-12-26","objectID":"/posts/cad-electronic-blueprint/:6:0","tags":["Auto CAD"],"title":"CAD出电子版蓝图使用方法","uri":"/posts/cad-electronic-blueprint/"},{"categories":["Windows"],"content":"在我们都已经离不开互联网的今天，而浏览器作为互联网的入口，为了有一个良好的网上冲浪体验，强烈推荐先手小白阅读这篇文章。 PC端尽量不使用国产浏览器，想必大家都了解一些国产互联网公司的调性，为了流量，毫不在乎用户体验，滥用用户隐私已不是什么秘密。 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:0:0","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"浏览器推荐 平台 浏览器 内核 Windows10及以上 Microsoft Edge Chromium Windows10以下 Google Chrome Chromium Android X浏览器 Via Webview Mac os Safari webkit IOS Safari webkit Win10自带就有Edge浏览器，这已经非常好用，不用再费时费力去安装其他的替代品，就如自带的输入法一样，都是值得推荐的自带软件。 而Win7并没有自带，且安装比较麻烦，会缺少库文件，建议使用Chrome浏览器，同样的内核，只不过因为墙的关系，不能使用同步功能，当然有魔法即可破解。 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:1:0","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Chromium 扩展 因为都是基于Chromium内核，Microsoft Edge也兼容Google Chrome商店的插件的，同时微软也有提供了Microsoft Store扩展商店。 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:0","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"AdGuard 广告拦截器 这是一个开源的广告拦截软件，支持Windows、Mac、Android、iOS，安装扩展即可满足日常使用需求，中文界面，上手简单。 ▲ 控制界面\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:1","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Infinity 新标签页 (Pro) 自定义你的新标签页，浏览器默认的新标签页要么非常的臃肿，广告推广一大堆，要么简陋； Infinity可以根据自己的使用习惯进行自定义，如：经常访问的网址、快捷切换搜索引擎、背景图片等，且自带的组件也很丰富； 重要的是免费注册就能使用的同步功能，不管是重装系统还是白天公司晚上家里的电脑都能同步自己的使用习惯，随拿随用。 ▲ 扩展新标签页\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:2","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"iTab 新标签页 新发现的一个浏览器新标签页扩展，颜值更高，功能更强…… 抛弃 Infinity 新标签页 (Pro) 了😂 官方网站：https://www.itab.link/ ▲ 预览效果\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:3","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Baidu Capsule 百度药丸 百度虽然一直被人诟病，但依然有大量的用户使用，一是比较习惯了，二是相当一部分提到搜索引擎第一反应就是百度，但是现在的百度已经不是一个纯粹的搜索引擎了，而是金钱驱动引擎。 这个扩展就是一个神奇药丸，让我们可以用上更加纯粹的百度搜索引擎。 屏蔽百度线上产品页面广告(搜索、新闻、贴吧、知道、音乐、图片、视频、文库等)。 百度右边广告栏，推广链接，百度热搜，百度用户信息收集等功能。 ▲ 扩展使用对比图\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:4","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Tampermonkey 油猴脚本 一款超级强大且免费的用户脚本管理器，支持Chrome、Edge、Safari、Firefox等主流浏览器。 ▲ 我日常使用涉及的脚本\r\rGreasy Fork是一个提供用户脚本的网站,拥有非常多的用户共享脚本库，几乎可以找到你想要的一切脚本，当然你也可以自己写代码实现想要的功能。 安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:5","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"哔哩哔哩助手 作为bilibili的重度使用者，每天都在B站学习，配合此扩展，瞬间提升学习效率(/doge)； 这个扩展的功能就非常的豪华了，大家可以安装来自行研究。 ▲ 扩展界面\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:6","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Global Speed 视频速度控制 这是一个音视频倍速播放的插件，安装此扩展，可以轻松的使用快捷键实现倍速播放，当然几乎所有的流媒体网站都是支持的，如：哔哩哔哩、腾讯视频、爱奇艺等。 ▲ 控制界面\r\r如果以上倍速并不能满足你的使用需求，也可以进行自定义设置。 安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:7","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"ImageAssistant 图片助手 使用此扩展可以提取网页中的图片，分析出的图片可以用多种方式筛选，然后选择需要的下载即可，绝招是支持批量下载。 ▲ 控制界面\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:8","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Dark Reader 暗黑模式 这是一个开源的护眼扩展程序，通过实时生成黑暗主题，为每一个网站启用夜间模式。 ▲ 控制界面\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:9","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Clear Cache 一键清除 只需单击一下，即可轻松清除浏览器缓存、历史记录、下载信息、cookie、localStorage数据等。 ▲ 设置选项\r\r这个软件在我调试博客的时候会经常用到。 安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:10","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Extension Manager 扩展管理器 当我们装了很多的扩展过后，而有些扩展并不是一直使用的，若一直运行则占用了不必要的内存空间，在地址栏后面显示一排排的图标，显得杂乱； 且有些网站监测到有扩展运行，就会弹出警告，不能正常浏览，通过此扩展可以将扩展分组分类，根据使用的情况不同，启用不同的扩展程序，而这些在分组好过后，只需一键操作。 ▲ 控制界面\r\r安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:11","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Windows"],"content":"Simple Allow Copy 简单复制 这是一个开源的扩展程序，有些网站限制了用户复制网页文字等，使用此扩展即可解除限制，随心所欲的复制。 ▲ 使用方法\r\r这个扩展已经很久没有更新了，我也只是作为备用，并不经常用到，有需要的朋友可以尝试一下。 安装地址： Edge扩展商店 ","date":"2021-12-18","objectID":"/posts/browser-plug-in/:2:12","tags":["浏览器","扩展"],"title":"浏览器扩展分享","uri":"/posts/browser-plug-in/"},{"categories":["Work"],"content":"在通过二级建造师考试并取得相应证书后，需要对自己的证书进行注册，证书方可使用; ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:0:0","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"四川二级建造师证书注册流程 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:0","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"申请 取得建造师资格证书的人员应当在取得资格证书后三年内，到省级注册机构申请初始注册。 建造师按照其从事工程项目施工管理的专业类别，实行分专业注册。 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:1","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"初始注册 需提交的材料 注册建造师注册申请表； 建造师执业资格证书； 申请人身份证和学历证复印件； 注册所在地市（州）建设行政主管部门出具的工程业绩证明； 申请人与聘用单位签订的聘用合同或有效证明文件复印件； 超过规定时间申请初始注册的，应当提交建造师继续教育证明。 办理程序 申请人向聘用单位提出申请； 聘用单位审核同意后，连同本规定第七条规定的材料一并报省级注册机构； 省级注册机构对申请注册有关材料进行审核，对无本规定第八条规定情形的，准予注册，并颁发《中华人民共和国二级建造师注册证书》、执业信息卡和建造师执业专用章。 初始注册申请步骤 申请人：登录“四川政务服务网” –\u003e 省住房城乡建设厅 –\u003e 二级注册建造师注册资格认定 –\u003e 在线申请，填报注册申请 聘用单位：登录“四川政务服务网” –\u003e 省住房城乡建设厅 –\u003e 二级注册建造师注册资格认定，审核同意后上报 省建岗培注册中心：网上受理 省建岗培注册中心：审查 住房城乡建设厅：审批、通告 住房城乡建设厅：核发准予注册人员的电子证书并核定注册编号 省建岗培注册中心：生成电子证书 申请人：登录系统自行打印电子证书、自行制作执业印章 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:2","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"续期注册 需提交的材料 注册建造师续期注册申请表； 原注册证书； 申请人与聘用单位签订的聘用劳动合同复印件或有效证明文件； 从事工程施工管理活动的业绩证明； 建设行政主管部门认可的继续教育证明。 办理程序 申请人向聘用单位提出申请； 聘用单位审核同意后，连同本规定第十三条规定的材料一并上报省级注册机构； 省级注册机构对有关材料进行审核，对无本规定第十三条规定情形的，准予续期注册。 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:3","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"变更注册 需提交的材料 注册建造师变更注册申请表； 注册证书、执业信息卡和执业专用章； 申请人与原聘用单位解除聘用合同证明文件或退休人员退休证明； 申请人与新聘用单位签订的聘用合同复印件或有效证明文件。 办理程序 申请人向新聘用单位提出申请； 聘用单位审核同意后，连同本规定第十七条规定的材料，一并报省级注册机构； 省级注册机构对有关情况进行审核，情况属实的，准予变更注册。 注意\r\r 在注册有效期内变更执业单位的，变更后其有效期按原注册有效期计算。 建造师办理变更注册后一年内再次申请变更的，不予办理。 建造师注册后，除工作单位变更外，其他注册内容发生变更的，须在变更后30日内向省级注册机构办理变更手续。 \r\r ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:4","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"增项注册 需提交的材料 注册建造师专业增项注册申请表； 注册证书和执业信息卡； 资格证书合格证明； 逾期专业增项注册，应当提供该增项专业建造师继续教育证明材料。 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:1:5","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"各地二建证书注册网站 安徽： 安徽省住房和城乡建设厅 –\u003e 安徽省住房和城乡建设执业资格人员注册管理系统 重庆： “渝快办”（个人办事 –\u003e 服务部门 –\u003e 市住房城乡建委 –\u003e 二级注册建造师相关注册）登录新系统 北京： 北京市住房城乡建设委门户网 福建： 福建省建设执业资格注册管理中心 甘肃： 甘肃省建设厅执业资格注册中心 河南： 河南政务服务网 湖南： 湖南省住房和城乡建设厅 湖北： 湖北政务服务网 河北： 河北省住房和城乡建设厅 黑龙江： 黑龙江建设网 –\u003e 政务服务管理信息系统 –\u003e 业务申办（网上办事平台） –\u003e 人员证书事项 –\u003e 建设执业注册资格证事项 江苏： 江苏建设人才网 江西： 江西住建云平台，在“个人服务平台 –\u003e 执业注册”栏中发起申请 广西： 广西建设网 广东： 广东省建设执业资格注册中心 吉林： 吉林省建筑市场监管公共服务平台，点击“二级建造师管理”即进入“吉林省注册建造师管理系统” 辽宁： 辽宁省二级建造师注册管理系统 上海： 登录上海市住房和城乡建设管理委员会官网网上政务大厅“人员类”专栏中“二级注册建造师注册申请” 陕西： 陕西省住房和城乡建设厅 山东： 山东省住房和城乡建设厅 山西： 山西省二级建造师注册管理系统 四川： 四川政务服务网「直通部门」 –\u003e 「住房城乡建设厅」 –\u003e 「个人服务」 –\u003e 「二级注册建造师注册资格认定」 –\u003e 「申请」 天津： 天津市二级建造师注册管理系统 云南： 云南省建筑市场与诚信信息网（平台登录 –\u003e 企业用户 –\u003e 人员管理） ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:2:0","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Work"],"content":"参考链接 四川政务服务网 四川省建设岗位培训与执业资格注册中心 二级建造师注册资格认定办事指南 ","date":"2021-12-08","objectID":"/posts/associate-constructor-register/:3:0","tags":["职业资格证书","二级建造师"],"title":"二级建造师 - 注册相关","uri":"/posts/associate-constructor-register/"},{"categories":["Study"],"content":"Mermaid的功能介绍及使用方法； ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:0:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"概述 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:1:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"什么是Mermaid？ Mermaid是一种基于Javascript的绘图工具，使用类似于Markdown的语法，使用户可以方便快捷地通过代码创建图表。 Mermaid作为一个使用JS渲染的库，广泛集成于许多Markdown编辑器中（如Typora），生成的不是一个“图片”，而是一段HTML代码，因此安全许多。 项目地址：https://github.com/mermaid-js/mermaid ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:1:1","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"Mermaid能绘制哪些图？ 饼状图： 使用pie关键字; 流程图： 使用graph关键字; 序列图： 使用sequenceDiagram关键字; 甘特图： 使用gantt关键字; 类图： 使用classDiagram关键字; 状态图： 使用stateDiagram关键字; 用户旅程图： 使用journey关键字; ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:1:2","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"流程图 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"图表方向 Mermaid 支持多种图表的方向，语法如下： graph 方向 图表中的其他语句... 定义方向 含义 graph或graph TB或graph TD 从上到下 graph BT 从下到上 graph RL 从右到左 graph LR 从左到右 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:1","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"节点定义 即流程图中每个文本块，包括开始、结束、处理、判断等，Mermaid 中每个节点都有一个 id，以及节点的文字。 graph TB; id1[方形] id2(圆边矩形) id3([体育场形]) id4[[子程序形]] id5[(圆柱形)] id6((圆形)) graph TB; id1{菱形} id2{{六角形}} id3[/平行四边形/] id4[\\反向平行四边形\\] id5[/梯形\\] id6[\\反向梯形/] 注意\r\r如果节点的文字中包含标点符号，需要时用双引号包裹起来。另外如果希望在文字中使用换行，请使用\u003cbr\u003e表述换行；\r\r ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:2","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"节点间的连线 连线说明 表述 说明 \u003e 添加尾部箭头 - 不添加尾部箭头 -- 单线 --text-- 单线上加文字 == 粗线 ==text== 粗线加文字 -.- 虚线 -.text.- 虚线加文字 连线样式 实线箭头： 分为无文本箭头和有文本箭头，有文本箭头有2种书写格式 graph LR; a--\u003eb--文本1--\u003ec--\u003e|文本2|d 粗实线箭头： 分为无文本箭头和有文本箭头 graph LR; a==\u003eb==文本==\u003ec 虚线箭头： 分为无文本箭头和有文本箭头 graph LR; a-.-\u003eb-.文本.-\u003ec 无箭头线： 即以上三种连线去掉箭头后的形式 graph LR; a---b b--文本1!---c c---|文本2|d d===e e==文本3===f f-.-g g-.文本.-h 其他连线： 需要将graph关键字改为flowchart，除了新增加的连线形式外，上面三种线的渲染效果也会不同 flowchart LR; A o--o B B \u003c--\u003e C C x--x D 旧连线 --文本--\u003e 也会不同 延长连线： 增加相应字符即可，如下图中的B到E，连线中增加了一个-。字符可多次添加。 graph LR; A[Start] --\u003e B{\"Is it?\"} B --Yes--\u003e C[OK] C --\u003e D[Rethink] D --\u003e B B --No--\u003e E[End] 连线形式 直链 graph LR; A -- text --\u003e B -- text2 --\u003e C 多重链： 可以使用\u0026字符，或单个描述 graph TB; a --\u003e b \u0026 c--\u003e d A \u0026 B--\u003e C \u0026 D X --\u003e M X --\u003e N Y --\u003e M Y --\u003e N ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:3","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"子图表 需要将graph关键字改为flowchart，在代码段的开始加入subgraph，尾部加入end flowchart TB; c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 end ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:4","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"注释 在行首加入%%即可。 graph LR; %%这是一条注释，在渲染图中不可见 A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:2:5","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"例子 graph TB; id1(圆角矩形)--普通线--\u003eid2[矩形] subgraph 子图表 id2==粗线==\u003eid3{菱形} id3-.虚线.-\u003eid4\u003e右向旗帜] id3--无箭头---id5((圆形)) end ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:3:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"饼状图 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:4:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"语法 表述 说明 pie 开始图表 title 关键字 为饼图赋予标题 \"分区名\" 定义分区名 分区名后使用: 作为分隔符 数值 最多支持2位小数(数据会以百分比的形式展示) ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:4:1","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"例子 pie title 为什么总是宅在家里？ \"喜欢宅\" : 15 \"天气太热或太冷\" : 20 \"穷\" : 500 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:4:2","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"甘特图 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:5:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"语法 使用关键词gantt声明甘特图 使用关键词title声明标题 使用关键词section声明板块 板块后是任务的名称，任务类型，开始时间，持续时间等 时间参数 参数 示例 含义 YYYY 2014 4 digit year YY 14 2 digit year Q 1..4 Quarter of year. Sets month to first month in quarter. M MM 1..12 Month number MMM MMMM January..Dec Month name in locale set by moment.locale() D DD 1..31 Day of month Do 1st..31st Day of month with ordinal DDD DDDD 1..365 Day of year X 1410715640.579 Unix timestamp x 1410715640579 Unix ms timestamp H HH 0..23 24 hour time h hh 1..12 12 hour time used with a A. a A am pm Post or ante meridiem m mm 0..59 Minutes s ss 0..59 Seconds S 0..9 Tenths of a second SS 0..99 Hundreds of a second SSS 0..999 Thousandths of a second Z ZZ +12:00 Offset from UTC as +-HH:mm, +-HHmm, or Z ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:5:1","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"例子 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:5:2","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"序列图 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"语法 使用以下语法开始序列图 sequenceDiagram [参与者1][消息线][参与者2]:消息体 ... 例如 sequenceDiagram 张三-\u003e\u003e李四: 吃了吗？ 李四-\u003e\u003e张三: 吃了 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:1","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"参与者 上例中的张三、李四都是参与者，上例中的语法是最简单的，也可以明显表明参与者有哪些 sequenceDiagram participant 参与者 1 participant 参与者 2 ... participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:2","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"消息线 类型 描述 -\u003e 无箭头的实线 --\u003e 无箭头的虚线 -\u003e\u003e 有箭头的实线 --\u003e\u003e 有箭头的虚线 -x 末端为叉的实线（表示异步） --x 末端为叉的虚线（表示异步） ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:3","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"处理中 在消息线末尾增加 + ，则消息接收者进入当前消息的“处理中”状态； 在消息线末尾增加 - ，则消息接收者离开当前消息的“处理中”状态。 或者使用以下语法直接说明某个参与者进入“处理中”状态 activate 参与者 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:4","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"标注 语法如下 Note 位置表述 参与者: 标注文字 其中位置表述可以为 表述 含义 right of 右侧 left of 左侧 over 在当中，可以横跨多个参与者 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:5","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"循环 语法如下 loop 循环的条件 循环体描述语句 end ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:6","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"判断 alt 条件 1 描述 分支 1 描述语句 else 条件 2 描述 # else 分支可选 分支 2 描述语句 else ... ... end 如果遇到可选的情况，即没有 else 分支的情况，使用如下语法： opt 条件描述 分支描述语句 end ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:7","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"例子 sequenceDiagram participant z as 张三 participant l as 李四 loop 日复一日 z-\u003e\u003el: 吃了吗您呐？ l--\u003e\u003ez: 吃了，您呢？ activate z Note left of z: 想了一下 alt 还没吃 z-xl: 还没呢，正准备回去吃 else 已经吃了 z-xl: 我也吃过了，哈哈 end opt 大过年的 l--\u003ez: 祝您新年好啊 end end ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:6:8","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"参考链接 Mermaid 实用教程 Mermaid从入门到入土——Markdown进阶语法 Mermaid，就像用 Markdown 码字一样，高效制作简易流图 mermaid 语法 ","date":"2021-12-07","objectID":"/posts/markdown-high-level/:7:0","tags":["Markdown"],"title":"Markdown - 进阶知识","uri":"/posts/markdown-high-level/"},{"categories":["Study"],"content":"Markdown是一种纯文本格式的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:0:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"标题 使用#号可表示1-6级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推(“#”与文字中间有个空格); ","date":"2021-12-06","objectID":"/posts/markdown-basics/:1:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:1:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:1:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"字体 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:2:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ ~~加删除线的文字~~ ","date":"2021-12-06","objectID":"/posts/markdown-basics/:2:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 斜体文本 斜体文本 粗体文本 粗体文本 粗斜体文本 粗斜体文本 加删除线的文字 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:2:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"分割线 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:3:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 三个或者三个以上的-或者*都可以。 --- ---- *** ***** ","date":"2021-12-06","objectID":"/posts/markdown-basics/:3:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:3:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"脚注 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:4:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 创建脚注格式类似这样 [^1]。 [^1]: 这是一段脚注。 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:4:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:4:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"列表 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:5:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"有序列表 使用数字并加上 . 号，后面添加一个空格，然后再填写内容： 示例代码 1. 第一项 2. 第二项 3. 第三项 显示效果 第一项 第二项 第三项 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:5:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"无序列表 使用星号*、加号+或是减号-作为列表标记，后面添加一个空格，然后再填写内容： 示例代码 * 第一项 * 第二项 * 第三项 + 第一项 + 第二项 + 第三项 - 第一项 - 第二项 - 第三项 显示效果 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:5:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"列表嵌套 只需在子列表中的选项前面添加四个空格即可： 示例代码 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示效果 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:5:3","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"区块 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:6:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"常规区块 在引用的文字前加\u003e即可。嵌套只增加\u003e即可，如两个\u003e\u003e三个\u003e\u003e\u003e； 示例代码 \u003e 第一层引用的内容 \u003e\u003e 第二层引用的内容 \u003e\u003e\u003e 第三层引用的内容 显示效果 第一层引用的内容 第二层引用的内容 第三层引用的内容 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:6:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"区块中使用列表 示例代码 \u003e 区块中使用列表 \u003e 1. 第一项 \u003e 2. 第二项 \u003e + 第一项 \u003e + 第二项 \u003e + 第三项 显示效果 区块中使用列表 第一项 第二项 第一项 第二项 第三项 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:6:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"列表中使用区块 在列表项目内放进区块，需要在\u003e前添加四个空格的缩进。 示例代码 * 第一项 \u003e 第一项 \u003e 第二项 * 第二项 显示效果 第一项 第一项 第二项 第二项 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:6:3","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"代码 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:7:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"行内代码 段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如： 示例代码 这是一个`printf()` 函数 显示效果 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:7:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"块代码 用 ``` 包裹一段代码，并指定一种语言（也可以不指定）： 示例代码 显示效果 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:7:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"链接 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:8:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 [显示的链接名称](链接地址) 或者 \u003c链接地址\u003e ","date":"2021-12-06","objectID":"/posts/markdown-basics/:8:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 百度 或者 https://www.baidu.com/ ","date":"2021-12-06","objectID":"/posts/markdown-basics/:8:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"图片 ![图片加载失败时显示的文字](图片地址) ","date":"2021-12-06","objectID":"/posts/markdown-basics/:9:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"表格 表格使用|来分隔不同的单元格，使用-来分隔表头和其他行。 对齐方式 -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:10:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"示例代码 | 左对齐 | 居中对齐 | 右对齐 | | :-----| :----: | ----: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | ","date":"2021-12-06","objectID":"/posts/markdown-basics/:10:1","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"显示效果 左对齐 居中对齐 右对齐 单元格 单元格 单元格 单元格 单元格 单元格 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:10:2","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"参考链接 Markdown 教程 ","date":"2021-12-06","objectID":"/posts/markdown-basics/:11:0","tags":["Markdown"],"title":"Markdown - 基础知识","uri":"/posts/markdown-basics/"},{"categories":["Study"],"content":"设置表格单元格宽度 网页中插入表格时，设置了表格的宽度，则会根据表格宽度拉伸；但是有时候内容过长时，就会拉伸的很难看，所以就需要固定表格宽度。 \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth class=\"number\"\u003e序号\u003c/th\u003e \u003cth class=\"color\"\u003e颜色\u003c/th\u003e \u003cth class=\"text\"\u003eHEX格式\u003c/th\u003e \u003cth class=\"text\"\u003eRGB格式\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd class=\"number\"\u003e1\u003c/td\u003e \u003ctd class=\"color\" bgcolor=\"lightpink\"\u003e \u003c/td\u003e \u003ctd class=\"text\"\u003e#FFB6C1\u003c/td\u003e \u003ctd class=\"text\"\u003e255,182,193\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e table { table-layout:fixed; word-wrap: break-word; } .number { width: 10%; } .color { width: 10%; } .text { width: 40%; } // 表格固定布局 table { table-layout: fixed; word-break: break-all; word-wrap: break-word; } table-layout:fixed 表示： 列宽由表格宽度和列宽度设定。在固定表格布局中，水平布局仅取决于表格宽度、列宽度、表格边框宽度、单元格间距，而与单元格的内容无关。 word-break:break-all 表示： word-break 属性规定自动换行的处理方法。break-all允许在单词内换行。 word-wrap: break-word 表示： word-wrap 属性允许长单词或 URL 地址换行到下一行。break-word就表示在长单词或 URL 地址内部进行换行。 提示\r\rtable-layout, word-break, word-wrap这三个属性都是关于固定宽度显示控制的; 对一般的浏览器来说，只需要其中一个就可以完成控制了. \r\r ","date":"2021-12-05","objectID":"/posts/css-study-notes/:1:0","tags":["HTML","CSS"],"title":"CSS - 学习笔记","uri":"/posts/css-study-notes/"},{"categories":["Study"],"content":"使图片重叠放置 ","date":"2021-12-05","objectID":"/posts/css-study-notes/:2:0","tags":["HTML","CSS"],"title":"CSS - 学习笔记","uri":"/posts/css-study-notes/"},{"categories":["Study"],"content":"方法 父级元素 样式设置： position: relative; 子元素 样式设置： position: absolute; 这样就可以达到子元素相对父级元素定位了。 ","date":"2021-12-05","objectID":"/posts/css-study-notes/:2:1","tags":["HTML","CSS"],"title":"CSS - 学习笔记","uri":"/posts/css-study-notes/"},{"categories":["Study"],"content":"示例 \u003cdiv class=\"images\"\u003e \u003cimg class=\"img1\" src=\"/images1.jpg\"\u003e \u003cimg class=\"img2\" src=\"/images2.jpg\"\u003e \u003cimg class=\"img3\" src=\"/images3.jpg\"\u003e \u003c/div\u003e .images { position: relative; } .images .img2 { display: block; position: absolute; border-radius: 10px; width: 50%; top: 10%; left: 50%; } .images .img3 { display: block; position: absolute; border-radius: 50%; width: 10%; top: 50%; left: 50%; } ","date":"2021-12-05","objectID":"/posts/css-study-notes/:2:2","tags":["HTML","CSS"],"title":"CSS - 学习笔记","uri":"/posts/css-study-notes/"},{"categories":["Study"],"content":"参考链接 css 设置表格单元格宽度 html css样式子元素相对父级元素定位 ","date":"2021-12-05","objectID":"/posts/css-study-notes/:3:0","tags":["HTML","CSS"],"title":"CSS - 学习笔记","uri":"/posts/css-study-notes/"},{"categories":["Study"],"content":"提示\r\r快速查找颜色请按 Ctrl+F\r\r 序号 颜色 英文代码 形像颜色 HEX格式 RGB格式 LightPink 浅粉红 #FFB6C1 255,182,193 Pink 粉红 #FFC0CB 255,192,203 Crimson 猩红 #DC143C 220,20,60 LavenderBlush 脸红的淡紫色 #FFF0F5 255,240,245 PaleVioletRed 苍白的紫罗兰红色 #DB7093 219,112,147 HotPink 热情的粉红 #FF69B4 255,105,180 DeepPink 深粉色 #FF1493 255,20,147 MediumVioletRed 适中的紫罗兰红色 #C71585 199,21,133 Orchid 兰花的紫色 #DA70D6 218,112,214 Thistle 蓟 #D8BFD8 216,191,216 plum 李子 #DDA0DD 221,160,221 Violet 紫罗兰 #EE82EE 238,130,238 Magenta 洋红 #FF00FF 255,0,255 Fuchsia 灯笼海棠(紫红色) #FF00FF 255,0,255 DarkMagenta 深洋红色 #8B008B 139,0,139 Purple 紫色 #800080 128,0,128 MediumOrchid 适中的兰花紫 #BA55D3 186,85,211 DarkVoilet 深紫罗兰色 #9400D3 148,0,211 DarkOrchid 深兰花紫 #9932CC 153,50,204 Indigo 靛青 #4B0082 75,0,130 BlueViolet 深紫罗兰的蓝色 #8A2BE2 138,43,226 MediumPurple 适中的紫色 #9370DB 147,112,219 MediumSlateBlue 适中的板岩暗蓝灰色 #7B68EE 123,104,238 SlateBlue 板岩暗蓝灰色 #6A5ACD 106,90,205 DarkSlateBlue 深岩暗蓝灰色 #483D8B 72,61,139 Lavender 熏衣草花的淡紫色 #E6E6FA 230,230,250 GhostWhite 幽灵的白色 #F8F8FF 248,248,255 Blue 纯蓝 #0000FF 0,0,255 MediumBlue 适中的蓝色 #0000CD 0,0,205 MidnightBlue 午夜的蓝色 #191970 25,25,112 DarkBlue 深蓝色 #00008B 0,0,139 Navy 海军蓝 #000080 0,0,128 RoyalBlue 皇军蓝 #4169E1 65,105,225 CornflowerBlue 矢车菊的蓝色 #6495ED 100,149,237 LightSteelBlue 淡钢蓝 #B0C4D E 176,196,222 LightSlateGray 浅石板灰 #778899 119,136,153 SlateGray 石板灰 #708090 112,128,144 DoderBlue 道奇蓝 #1E90FF 30,144,255 AliceBlue 爱丽丝蓝 #F0F8FF 240,248,255 SteelBlue 钢蓝 #4682B4 70,130,180 LightSkyBlue 淡蓝色 #87CEFA 135,206,250 SkyBlue 天蓝色 #87CEEB 135,206,235 DeepSkyBlue 深天蓝 #00BFFF 0,191,255 LightBLue 淡蓝 #ADD8E6 173,216,230 PowDerBlue 火药蓝 #B0E0E6 176,224,230 CadetBlue 军校蓝 #5F9EA0 95,158,160 Azure 蔚蓝色 #F0FFFF 240,255,255 LightCyan 淡青色 #E1FFFF 225,255,255 PaleTurquoise 苍白的绿宝石 #AFEEEE 175,238,238 Cyan 青色 #00FFFF 0,255,255 Aqua 水绿色 #00FFFF 0,255,255 DarkTurquoise 深绿宝石 #00CED1 0,206,209 DarkSlateGray 深石板灰 #2F4F4F 47,79,79 DarkCyan 深青色 #008B8B 0,139,139 Teal 水鸭色 #008080 0,128,128 MediumTurquoise 适中的绿宝石 #48D1CC 72,209,204 LightSeaGreen 浅海洋绿 #20B2AA 32,178,170 Turquoise 绿宝石 #40E0D0 64,224,208 Auqamarin 绿玉\\碧绿色 #7FFFAA 127,255,170 MediumAquamarine 适中的碧绿色 #00FA9A 0,250,154 MediumSpringGreen 适中的春天的绿色 #F5FFFA 245,255,250 MintCream 薄荷奶油 #00FF7F 0,255,127 SpringGreen 春天的绿色 #3CB371 60,179,113 SeaGreen 海洋绿 #2E8B57 46,139,87 Honeydew 蜂蜜 #F0FFF0 240,255,240 LightGreen 淡绿色 #90EE90 144,238,144 PaleGreen 苍白的绿色 #98FB98 152,251,152 DarkSeaGreen 深海洋绿 #8FBC8F 143,188,143 LimeGreen 酸橙绿 #32CD32 50,205,50 Lime 酸橙色 #00FF00 0,255,0 ForestGreen 森林绿 #228B22 34,139,34 Green 纯绿 #008000 0,128,0 DarkGreen 深绿色 #006400 0,100,0 Chartreuse 查特酒绿 #7FFF00 127,255,0 LawnGreen 草坪绿 #7CFC00 124,252,0 GreenYellow 绿黄色 #ADFF2F 173,255,47 OliveDrab 橄榄土褐色 #556B2F 85,107,47 Beige 米色(浅褐色) #6B8E23 107,142,35 LightGoldenrodYellow 浅秋麒麟黄 #FAFAD2 250,250,210 Ivory 象牙 #FFFFF0 255,255,240 LightYellow 浅黄色 #FFFFE0 255,255,224 Yellow 纯黄 #FFFF00 255,255,0 Olive 橄榄 #808000 128,128,0 DarkKhaki 深卡其布 #BDB76B 189,183,107 LemonChiffon 柠檬薄纱 #FFFACD 255,250,205 PaleGodenrod 灰秋麒麟 #EEE8AA 238,232,170 Khaki 卡其布 #F0E68C 240,230,140 Gold 金 #FFD700 255,215,0 Cornislk 玉米色 #FFF8DC 255,248,220 GoldEnrod 秋麒麟 #DAA520 218,165,32 FloralWhite 花的白色 #FFFAF0 255,250,240 OldLace 老饰带 #FDF5E6 253,245,230 Wheat 小麦色 #F5DEB3 245,222,179 Moccasin 鹿皮鞋 #FFE4B5 255,228,181 Orange 橙色 #FFA500 255,165,0 PapayaWhip 番木瓜 #FFEFD5 255,239,213 BlanchedAlmond 漂白的杏仁 #FFEBCD 255,235,205 NavajoWhite Navajo白 #FFDEAD 255,222,173 AntiqueWhite 古代的白色 #FAEBD7 250,235,215 Tan 晒黑 #D2B48C 210,180,140 BrulyWood 结实的树 #DEB887 222,184,135 Bisque (浓汤)乳脂,番茄等 #FFE4C4 255,228,196 DarkOrange 深橙色 #FF8C00 255,140,0 Linen 亚麻布 #FAF0E6 250,240,230 Peru 秘鲁 #CD853F 205,133,63 PeachPuff 桃色 #FFDAB9 255,218,185 SandyBrown 沙棕色 #F4A460 244,164,96 Chocolate 巧克力 #D2691E 210,105,30 SaddleBrown 马鞍棕色 #8B4513 139,69,19 SeaShell 海贝壳 #FFF5EE 255,245,238 Sienna 黄土赭色 #A0522D 160,82,45 LightSalmon 浅鲜肉(鲑鱼)色 #FFA07A 255,160,122 Coral 珊瑚 #FF7F50 255,127,80 OrangeRed 橙红色 #FF4500 255,69,0 DarkSalmon 深鲜肉(鲑鱼)色 #E9967A 233,150,122 Tomato 番茄 #FF6347 255,99,71 MistyRose 薄","date":"2021-12-04","objectID":"/posts/color-chinese-and-english/:0:0","tags":["颜色"],"title":"颜色中英文对照表","uri":"/posts/color-chinese-and-english/"},{"categories":["Study"],"content":"参考链接 颜色中英文对照表 ","date":"2021-12-04","objectID":"/posts/color-chinese-and-english/:1:0","tags":["颜色"],"title":"颜色中英文对照表","uri":"/posts/color-chinese-and-english/"},{"categories":["Work"],"content":"本文为Auto CAD的入门知识，包括快捷命令的使用，以及需要注意的一些准则； 将本文的知识点得以应用，熟练掌握，提升一定是来源于不断的练习，熟能生巧，然后再进阶学习Auto CAD - 使用技巧和疑难杂症解决办法。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:0:0","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"命令大全 ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:0","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"绘图命令 名称 快捷命令 完整命令 直线 L LINE 构造线 XL XLINE 多段线 PL PLINE 矩形 REC RECTANG 正多边形 POL POLYGON 圆 C CIRCLE 修订云线 REVC REVCLOUD 样条曲线 SPL SPLINE 椭圆 EL ELLIPSE 创建块 B BLOCK 编辑块 BE BEDIT 图案填充 H HATCH 编辑填充 HE HATCHEDIT 单行文字 DT TEXT 多行文字 T MTEXT 多行线 ML MLINE 定数等分 DIV DIVIDE 定距等分 ME MEASURE 创建边界 BO BOUNDARY ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:1","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"修改命令 名称 快捷命令 完整命令 删除 E ERASE 移动 M MOVE 复制 CO COPY 镜像 MI MIRROR 偏移 O OFFSET 旋转 RO ROTATE 缩放 SC SCALE 拉伸 S STRETCH 修剪 TR TRIM 延伸 EX EXTEND 打断 BR BREAK 圆角 F FILLET 分解 X EXPLODE 格式刷 MA MATCHPROP 对齐 AL ALIGN 图层管理 LA LAYER ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:2","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"标注命令 名称 快捷命令 完整命令 线性标注 DLI DIMLINEAR 对齐标注 DAL DIMALIGNED 弧长标注 DAR DIMARC 角度标注 DAN DIMANGULAR 半径标注 DRA DIMRADIUS 直径标注 DDI DIMDIAMETER 引线标注 LE QLEADER 快速标注 QDIM 重新关联 DRE DIMREASSOCIATE 解除关联 DRE-\u003eD DIMDISASSOCIATE ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:3","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"样式命令 名称 快捷命令 完整命令 文字样式 ST STYLE 标注样式 D DIMSTYLE ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:4","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"视图命令 名称 快捷命令 完整命令 抓手（平移） P PAN 局部放大 Z ZOOM 显示全图 Z+E ZOOM ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:5","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"查询命令 名称 快捷命令 完整命令 面积测量 AA AREA 距离测量 DI DIST 显示特性数据 LI LIST 快速选择 QSE QSELECT ","date":"2021-12-01","objectID":"/posts/cad-basics/:1:6","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"常用命令操作 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:0","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"直线 命令： LINE 快捷命令： L 操作方法： 输入L –\u003e 空格 –\u003e 指定第一个点 –\u003e 指定下一个点 –\u003e 空格完成，当然你也可以无休止的画下去。 提示： 每条线是独立的； ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:1","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"多段线 命令： PLINE 快捷命令： PL 操作方法： 输入PL –\u003e 空格 –\u003e 指定起点 –\u003e 指定下一个点 –\u003e …… –\u003e 空格完成，当然你也可以无休止的画下去。 提示： 所画的线条是连成一个整体。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:2","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"矩形 命令： RECTANG 快捷命令： REC 操作方法一： 输入REC –\u003e 空格 –\u003e 指定第一个角点 –\u003e 指定另一个角点 –\u003e 空格完成。 操作方法二： 输入REC –\u003e 空格 –\u003e 指定第一个角点 –\u003e 输入D –\u003e 空格 –\u003e 输入横向长度 –\u003e 空格 –\u003e 输入纵向长度 –\u003e 空格完成。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:3","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"圆 命令： CIRCLE 快捷命令： C 操作方法： 输入C –\u003e 空格 –\u003e 点一点 –\u003e 输入直径 –\u003e 空格或者拉鼠标，点左键确定。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:4","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"复制 命令： COPY 快捷命令： CO / CP 操作方法： 输入CO 或 CP –\u003e 空格 –\u003e 选择物体 –\u003e 空格 –\u003e 选择基准点 –\u003e 选择要复制到什么地方 –\u003e 空格结束。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:5","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"移动 命令： MOVE 快捷命令： M 操作方法： 输入M –\u003e 空格 –\u003e 选择物体 –\u003e 空格 –\u003e 选择基准点 –\u003e 选择要移动到什么地方 –\u003e 空格结束。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:6","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"偏移 命令： OFFSET 快捷命令： O 操作方法： 输入O –\u003e 空格 –\u003e 输入偏移的距离 –\u003e 空格 –\u003e 选择要偏移的物体 –\u003e 在要偏移的方向上点鼠标。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:7","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"格式刷 命令： MATCHPROP 快捷命令： MA 操作方法： 输入MA –\u003e 空格 –\u003e 选择基准图形 –\u003e 选择被刷的图形。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:8","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"查看属性 命令： PROPERTIES 快捷命令： MO / PR / CRTL + 1 操作方法： 输入mo –\u003e 选择物体。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:9","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"阵列 命令： ARRAY 快捷命令： AR 操作方法： 输入AR –\u003e 空格 –\u003e 出现对话框。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:10","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"延长 命令： EXTEND 快捷命令： EX 操作方法一： 输入EX –\u003e 空格 –\u003e 选择需要延长的线； 操作方法二： 输入EX –\u003e 空格 –\u003e 选择延长的截止线 –\u003e 空格 –\u003e 选择需要延长的线； 小技巧： 输入EX –\u003e 空格 –\u003e 按住shift变成剪切功能，可以灵活运用； ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:11","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"剪切 命令： TRIM 快捷命令： TR 操作方法一： 输入TR –\u003e 空格 –\u003e 选择需要剪切的线； 操作方法二： 输入TR –\u003e 空格 –\u003e 选择剪切的截止线 –\u003e 空格 –\u003e 选择需要剪切的线； 小技巧： 输入TR –\u003e 空格 –\u003e 按住shift变成延长功能，可以灵活运用； ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:12","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"删除 命令： ERASE 快捷命令： E 快捷命令： Delete 操作方法： 输入E –\u003e 空格 –\u003e 选择图形 –\u003e 空格。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:13","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"后退 命令： U 快捷命令： CTRL + Z 操作方法： 输入U –\u003e 空格。只要CAD没关过，可以一直反悔到打开图纸时的状态 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:14","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"炸开 命令： EXPLODE 快捷命令： X 操作方法： 输入X –\u003e 空格 –\u003e 选择物体。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:15","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"拉伸 命令： STRETCH 快捷命令： S 操作方法： 输入S –\u003e 用右下往左上的方式拉出一个框让左边的竖线或者上边的横线与被拉部分相交，空格 –\u003e 选择一个基本点，输入距离或者指定下一点。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:16","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"镜像 命令： MIRROR 快捷命令： MI 操作方法： 输入MI 选择要镜像的物体，选择「镜子」的第一点，选择「镜子」的第二点，空格，得到了一个以你选择的两点为对称轴的图像。 通常是垂直或水平方向镜像，左右镜像则「第一点」与「第二点」为上下关系，上下镜像则「第一点」与「第二点」为左右关系； ","date":"2021-12-01","objectID":"/posts/cad-basics/:2:17","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"制图习惯以及技巧 ","date":"2021-12-01","objectID":"/posts/cad-basics/:3:0","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"经常存盘 记了那么多快捷命令后，在正式开始画图前，还得牢记并运用最重要的一个快捷键CTRL + S； 突然断电、死机或者是CAD的“温馨提示”：发生致命错误；在崩溃的同时还会让你的作品及灵感消失得无影无踪； 在AutoCAD中，我们也可以让CAD自动存盘：点击「工具」–\u003e 「选项」，出现「选项」对话框，进入「文件」选项卡，设置「自动保存路径」，然后在「打开和保存」选项卡里设置「自动保存」及保存时间间隔。 注意\r\r不要把时间间隔设得太短，保存的时候会卡顿，频繁保存容易影响操作，一般设10分钟就可以了，重点是养成随手按CTRL + S的好习惯，当操作完一步停下来思考的时候下意识就按一下CTRL + S。\r\r ","date":"2021-12-01","objectID":"/posts/cad-basics/:3:1","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"多看提示 AutoCAD软件是一套比较人性化的软件，每一步操作都会有提示指导; 就算某个命令你原来从未使用过，只要根据提示一步一步做下去，也能完成操作; AutoCAD软件的提示行区域高度，一般要两到三行，这样就能完全看到每一步的提示; 多看提示的好处：可以学习从未用过的命令，学习同一命令的多种用法。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:3:2","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"巧用快捷命令 AutoCAD有很多方便我们使用的快捷方法，且同一个命令往往又有好几种使用方式，如点击菜单、点击工具图标、输入键盘命令、回车、空格键重复命令等方式； 对于快捷命令切记不用死记硬背，应当是在使用的过程中，一步一步加强，形成惯性思维，达到想要操作某个命令的时候，手下意识就按出快捷命令，且只需要记住一些常用的快捷命令就行，不经常用到的即便是通过点击图标或者通过菜单来操作也不会有太大影响； 提示\r\r掌握快捷命令有一个简便方法，就是在点击菜单或图标时，命令行都会出现该命令的完整命令，如果命令行显示不完整，可以通过按F2打开命令窗口查看，然后就可以试着输入完整命令的前一至两个字母，一般那就是该命令的缩写。\r\r ","date":"2021-12-01","objectID":"/posts/cad-basics/:3:3","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"良好习惯 尽量多使用多段线(PLINE)作图而少用直线(LINE)，因为多段线是一个整体，在以后选择或二次修改时会更加方便； 尽量使用单行文字而不是多行文字，单行文字易于修改内容和格式刷操作等； 用好图层(LAYER)功能，把不同类型的图形分配到不同的图层中，以便以后分类整理，特别是用到布局出图，图层是重点； 在创建新图块的时候，请将图形对象置于0图层，颜色bylock，这样后面想要修改图块的图层颜色等参数直接选中设置即可，不用BE命令，进入到块编辑器操作； 灵活运用块定义(BLOCK)功能，在二次选择或者修改的时候会更加轻松，选择的时候一次就可以选中整个图形，避免了漏选，在编辑的时候，用BE命令，进入到块编辑器，修改保存后所有位置同一个块都被修改了，提高效率； 常用的作图界限、尺寸、标注样式、文字样式等要做好模板，以便快速调用，规范作图； 不要炸开！不要炸开！不要炸开！(EXPLODE)填充样式、标注等； 除必须情况外，请不要分解（炸开）图块； 尽量不要使用奇奇怪怪的字体，过于花哨很影响出图的美观，且传输至其他电脑里时容易产生乱码； 模型空间只用来作图，布局空间放置图框，设置标注等排版出图用； 熟悉各种快捷命令，左手不离键盘，右手不离鼠标。 ","date":"2021-12-01","objectID":"/posts/cad-basics/:3:4","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Work"],"content":"精确作图 在模型空间严格按1:1作图，在布局空间根据出图规格调整合适比例； 灵活运用点捕捉功能，不要以为自己眼力过人，随便一点就能点中直线的端点，那是不可能的。 该横平竖直的线就得保证平顺，该闭合的线一定要用命令闭合(CLOSE)，该相交的点必须用捕捉功能相交，而不是凭感觉； 对于已知的长度，我们可以用键盘直接输入，保证画的线等图形尺寸为整数，禁止凭感觉拖，全是小数点。 灵活运用正交模式（F3）与捕捉模式（F8）。 提示\r\r在作图过程中按下shift键可以临时切换正交模式的开启与关闭； 注意： 按住shift的时候不要滑动鼠标的滚轮； \r\r","date":"2021-12-01","objectID":"/posts/cad-basics/:3:5","tags":["Auto CAD"],"title":"Auto CAD - 基础知识介绍","uri":"/posts/cad-basics/"},{"categories":["Z-Turn"],"content":"为博客更换了字体，为了提升加载速度，将字体作精简处理…… ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:0:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"安装字蛛 第一步 将字蛛用npm方式安装到全局，需在命令后面加 -g； npm install font-spider -g 第二步 查看是否安装成功： font-spider -V 安装成功将会显示版本号； ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:1:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"处理本博客的所有汉字 ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:2:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"提取html所用到汉字 在桌面新建一个空文件夹； 复制public文件夹到新建的文件夹内； 右键用everything搜索.html； 打开批量重命名软件，将搜索出来的结果选中，全部拖入重命名软件中； 任意重命名代编号的，保证每个文件的名字都不重复； 再将重命名后的.html文件复制到新文件夹内（public文件可以删除了）； 打开html2txt软件，将新文件夹内的.html文件拖入软件窗口； 设置保存文件夹位置，执行「开始转换」； 将所有的txt文件合并到一个txt文件内，在转换后的txt文件夹内打开「终端」执行命令： type *.txt \u003e\u003e D:\\Desktop\\aa.txt 用vscode打开刚刚合并完的txt文件，用正则表达式[a-zA-Z]、[0-9]、[\\n]将多余的删除，简单清理一下文本内容； 将整理好的txt文本粘贴到引入有字体的html文件内； 将「字体」文件和.html文件放在同一目录； 当前文件夹下，右键打开终端：执行此行命令： font-spider aa.html 用High-Logic FontCreator软件打开精简后的.ttf后缀字体文件， 文件 –\u003e 输出字体为 –\u003e 输出网页字体（woff/woff2）–\u003e 选择版本2 –\u003e Export； 求助\r\r这只是一个笨办法，耗时费力，不过目前还没有摸索出更简便的方法，只好如此了，如果各位看客有更好的操作办法，请留言区交流…… 望各位大佬多多赐教🙏 \r\r ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:2:1","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"html文件引入字体文件： \u003cstyle\u003e @font-face { font-family:RegularFont; src: url(LXGWWenKaiMono-Regular.ttf) format('truetype') } body { font-family:\"RegularFont\" !important; } \u003c/style\u003e 当前文件夹下，右键打开终端： 命令行： font-spider 常用字.html 提示\r\r .font spider 文件夹下会备份原字体； 「常用字.html」文件中含有常用6500字及字母、数字、标点； 若没有的字可按需增加即可； \r\r ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:2:2","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"FontCreator软件使用 ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:3:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"仅保留需要的字形 打开原字体文件； 新建一个空白字体文件； 在原字体用字符编码查询到的值搜索定位到需要的字（也可以直接输入文字查询）； 在新建空白字体中插入字形； 将需要的字符复制到新建字体中插入的字形位置； 右键字形属性，填入字码点（$+刚查询到的字符编码）； 以此类推，完成自己所需的所有字体； 导出网页使用字体，后缀woff2； ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:3:1","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"转换字体格式 现在各主流设备基本都已经支持woff2字体格式（貌似只有除了opera和IE），因此网站中没有必要再引入多种不同格式的字体了，一般只引入woff2就好了; 使用FontCreator软件可以很轻松的完成字体格式间的转换，； 第一步 用FontCreator软件打开字体文件； 第二步 文件 –\u003e 输出字体为 –\u003e 可以选择 输出电脑字体（ttf、otf、fon） 和 输出网页字体（woff/woff2） ； ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:3:2","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"字体渲染时机 ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:4:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"渲染机制 在远程字体还没有加载完成，浏览器会使用什么字体渲染呢？事实上，不同的浏览器表现会不一样的，以下是一些常见的桌面浏览器的表现： IE： 它会直接使用备用字体渲染，最后等webfont字体加载完毕后重新渲染。 Safari： 它会一直等待webfont字体加载完毕，并且期间不会渲染字体。 Chrome / Firefox： 它们会等待webfont字体加载，如果在3秒之内没有加载完毕，则使用备用字体渲染。最后webfont加载完毕，使用并重新渲染。 想要统一这些行为，比较理想的行为是：先使用系统默认字体，等到远程字体加载完成了再替换成特殊字体。借助于WebFontLoader可以很容易的实现这一效果: ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:4:1","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"使用方法 在css中通过@font-face定义一个字体： @font-face { font-family: 'myfont'; src: url('./myfont.woff2') format('woff2'); } 注意\r\rCSS 中只需要定义字体就行，而不要使用使用这个字休。\r\r 然后在页面引入webfontloader，将你在css中定义的字体名称添加到custom.families列表中，并在active回调中将该字体添加到对应的元素上，代码如下： \u003cscript src=\"https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js\"\u003e\u003c/script\u003e \u003cscript\u003e WebFont.load({ custom: { families: ['myfont'], }, classes: false, active() { document.body.style.fontFamily = 'myfont'; }, }); \u003c/script\u003e 这样浏览器一开始就会使用默认字体渲染内容，等字体加载完成后再使用特殊字体重新渲染。 ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:4:2","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Z-Turn"],"content":"参考链接 字蛛官网 WebFontLoader项目 FontCreator官网 html2text官网 查看字符编码（简体中文）–GBK内码查询 如何让网页字体文件大瘦身?前端字体优化知识 如何给引入的文字文件瘦身 博客字体美化—font-spider瘦身中文字体ttf文件 字体裁剪，精简字体，字体瘦身 中文字体压缩的那些事 ","date":"2021-11-29","objectID":"/posts/blog-font-cut/:5:0","tags":["font"],"title":"博客字体精简笔记","uri":"/posts/blog-font-cut/"},{"categories":["Windows"],"content":"大多数Win11用户都会遇到这样的问题，新版资源管理器打开文件夹巨慢，甚至有时候点两下还打不开，而且框选文件时很卡，CPU占用飙升； ","date":"2021-11-27","objectID":"/posts/win11-explorer-lag/:0:0","tags":["资源管理器"],"title":"Win11 - 资源管理器卡顿的解决办法","uri":"/posts/win11-explorer-lag/"},{"categories":["Windows"],"content":"背景 微软对新版的资源管理器优化做的不好，即使是正式版，在文件夹切换和鼠标框选时cpu占用率会比较高有明显卡顿，解决办法就是换回Win10的资源管理器就不会出现卡顿； ","date":"2021-11-27","objectID":"/posts/win11-explorer-lag/:1:0","tags":["资源管理器"],"title":"Win11 - 资源管理器卡顿的解决办法","uri":"/posts/win11-explorer-lag/"},{"categories":["Windows"],"content":"操作步骤 ","date":"2021-11-27","objectID":"/posts/win11-explorer-lag/:2:0","tags":["资源管理器"],"title":"Win11 - 资源管理器卡顿的解决办法","uri":"/posts/win11-explorer-lag/"},{"categories":["Windows"],"content":"手动操作 第一步 按快捷键Win + R，打开运行，输入regedit命令，确定，快速打开注册表编辑器； 第二步 在注册表编辑器窗口，依次展开：\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions 第三步 在Shell Extensions上右键新建项，命名为Blocked； ▲ 新建项后命名为Blocked\r\r第四步 右键Blocked，新建字符串值，命名为{e2bf9676-5f8f-435c-97eb-11607a5bedf7}； ▲ 新建字符串值\r\r▲ 命名串值\r\r第五步 最后重启资源管理器，就可以发现资源管理器的样式变成Win10的样式了，使用起来非常流畅； ▲ 重启资源管理器\r\r回到了熟悉的样子，丝滑般流畅，推荐使用~~ ▲ win10版本资源管理器\r\r提示\r\r若想回到Win11原始状态，删除Blocked并重启资源管理器即可；\r\r ","date":"2021-11-27","objectID":"/posts/win11-explorer-lag/:2:1","tags":["资源管理器"],"title":"Win11 - 资源管理器卡顿的解决办法","uri":"/posts/win11-explorer-lag/"},{"categories":["Windows"],"content":"一键操作 在任意位置新建一个空白文本文档，将以下代码粘贴到文档中，再将文件后缀修改为.reg，双击执行即可； 切换Win10资源管理器 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked] \"{e2bf9676-5f8f-435c-97eb-11607a5bedf7}\"=\"\" 恢复Win11资源管理器 Windows Registry Editor Version 5.00 [-HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Shell Extensions\\Blocked] ","date":"2021-11-27","objectID":"/posts/win11-explorer-lag/:2:2","tags":["资源管理器"],"title":"Win11 - 资源管理器卡顿的解决办法","uri":"/posts/win11-explorer-lag/"},{"categories":["Windows"],"content":"背景 在Win10系统下，打开文件的方式有很多，一般来说首选是双击直接打开，次之是选择文件，鼠标右键用xxx打开，而右键菜单打开也分两种，一种是右键菜单直接用xxx打开，第二种是右键菜单的打开方式中，选择用xxx软件打开； 有的文件右键菜单本就有用xxx软件打开这一项，但是有时候会遇到自己想要打开的但是原生右键菜单没有的选项，这个时候我们就可以通过自定义右键菜单的方式来满足自己的个性需求。 甚至你还可以添加一些常用的软件到右键菜单，实现快捷打开，当然并不建议这样，毕竟我们的右键菜单已经被各种软件占领了，显得很凌乱，我们还会通过火绒等工具来精简右键菜单。 ","date":"2021-11-19","objectID":"/posts/win10-customize-right-click-menu/:1:0","tags":["右键菜单"],"title":"Win10 - 自定义添加右键菜单","uri":"/posts/win10-customize-right-click-menu/"},{"categories":["Windows"],"content":"我的方案 作为一名设计狗，必然离不开CAD图纸，主要使用Auto CAD画图，所以默认打开方式是采用Auto CAD打开，但是有时候只是看一些图纸，用「CAD快速看图」效率就会更高，所以会用到通过右键菜单来打开图纸； 一般来说安装好「CAD快速看图」软件的时候会自动添加到右键菜单，但是我的不知道经过了我的什么魔鬼操作，突然有一天就消失了，所以才想到用这个办法来修复； 虽然可以通过右键菜单打开方式中选择软件来打开，但是还是不够快捷，并且有时候还会不小心点错开到其他软件打开； ","date":"2021-11-19","objectID":"/posts/win10-customize-right-click-menu/:2:0","tags":["右键菜单"],"title":"Win10 - 自定义添加右键菜单","uri":"/posts/win10-customize-right-click-menu/"},{"categories":["Windows"],"content":"操作方法 第一步 按快捷键 Win + R ，打开运行，输入regedit 命令，确定，快速打开注册表编辑器； 第二步 在注册表编辑器窗口，依次展开：HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\*； 第三步 在展开的 * 键项下找到shell –\u003e 右键点击shell –\u003e 在右键菜单中点击「新建」 –\u003e 「项」； 第四步 此时建好了一个「新建#1」的键项 –\u003e 右键点击「新建#1」 –\u003e 在右键菜单中点击「重命名」 –\u003e 命名为：CADReader； 第五步 在CADReader对应的右侧窗口双击「默认」； 第六步 在弹出的编辑字符串对话框中数值数据（V）栏内输入：用「CAD快速看图打开」 –\u003e 点击「确定」； 第七步 再右键点击CADReader，在右键菜单中点击「新建」 –\u003e 「项」； 第八步 并把「新建#1」命名为command； 第九步 在command对应的右侧窗口，左键双击「默认」，在弹出的编辑字符串对话框中数值数据（V）栏内输入\"C:\\Program Files (x86)\\CADReader\\CADReader.exe\" \"%1\" 点击「确定」，退出注册表编辑器； 完成以上设置后，选择文件点击右键，就能看到刚才添加的「CAD快速看图」，但是前面没有小图标，还不够完美，我们继续操作； 第十步 在刚才注册表的路径，右键点击 CADReader ，在打开的菜单项中，选择 –\u003e 新建 –\u003e 字符串值； 第十一步 命名为Icon（I是大写的i），并双击设置值； 第十二步 编辑字符串窗口，这个数值名称为 Icon 的值，数值数据直接填入刚才软件的路径即可； 至此，就大功告成了，现在选择文件点击右键，打开的菜单项中，就可以看到刚才新添加的「用CAD快速看图」打开菜单项； 如果需要设置其它的菜单项设置，照着以上步骤操作一遍添加即可； ","date":"2021-11-19","objectID":"/posts/win10-customize-right-click-menu/:3:0","tags":["右键菜单"],"title":"Win10 - 自定义添加右键菜单","uri":"/posts/win10-customize-right-click-menu/"},{"categories":["Windows"],"content":"扩展 此文介绍的是文件点击右键，设置其它的，参照以下注册表目录： # 桌面弹出的菜单项； HKEY_CLASSES_ ROOT\\Directory\\background\\shell　# 文件夹和驱动器弹出的菜单项； HKEY_CLASSES_ROOT\\folder\\shell　# 文件夹弹出的部分内容； HKEY_CLASSES_ROOT\\directory\\shell　# 驱动文件夹弹出的菜单项； HKEY_CLASSES_ROOT\\drive\\shell　 ","date":"2021-11-19","objectID":"/posts/win10-customize-right-click-menu/:4:0","tags":["右键菜单"],"title":"Win10 - 自定义添加右键菜单","uri":"/posts/win10-customize-right-click-menu/"},{"categories":["Work"],"content":"画CAD有两种方式：通过鼠标点击命令按钮来作图，或者是使用命令行。命令行作图便捷、快速、易于思路连贯，是首选。但有些命令行命令很长，输入它反倒还使作图速度减慢。 ","date":"2021-11-18","objectID":"/posts/cad-short-command/:0:0","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"背景 CAD本身提供的命令行快捷键有限，有很多的CAD命令都很长，难以记忆且不能快速输入，大大降低了我们日常工作的效率； 这个时候，就可以自行设置，接下来介绍两种可以快速自定义短命令的方法。 ","date":"2021-11-18","objectID":"/posts/cad-short-command/:1:0","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"操作方法 ","date":"2021-11-18","objectID":"/posts/cad-short-command/:2:0","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"自定义命令的原则 不要直接修改CAD本身的快捷命令、可以在原有的基础上添加； 设置的快捷命令不要与CAD本身命令或加载的插件命令冲突； 设置的快捷命令以简单便捷为主、推荐设置“左手键”，可以大大提高绘图效率； ","date":"2021-11-18","objectID":"/posts/cad-short-command/:2:1","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"自定义快捷命令 打开 CAD –\u003e 菜单栏「工具」 –\u003e 自定义 –\u003e 编辑程序参数（acad.pgp）； 第一步 打开 acad.pgp 文件如下图： ▲ acad.pgp 文件\r\r提示\r\r逗号左侧为自定义的快捷命令； 星号右侧为对应的命令全称； \r\r 第二步 将第一行复制并粘贴在上面空白处，并按自己需要进行修改； 提示\r\r快捷命令与命令全称不区分大小写、也无需与下方CAD默认命令对齐；\r\r ","date":"2021-11-18","objectID":"/posts/cad-short-command/:2:2","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"使自定义快捷命令生效 快捷命令添加完成后，按 Ctrl + S 保存acad.pgp文件。 两种方式使编辑好的自定义命令生效： 第一种 关闭并重新启动CAD即可生效； 第二种 不关闭CAD状态下，输入 reinit 命令后勾选「PGP文件」，点击「确定」按钮即可； 重新植入pgp文件 ","date":"2021-11-18","objectID":"/posts/cad-short-command/:2:3","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Work"],"content":"编辑lsp文件 在 CAD 的安装盘下找到\\Program Files\\Autodesk\\AutoCAD 2018\\Support\\acad2022.lsp这个文件； 你可以用VB汇编语言设置自己的快捷键。无法在acad.pgp文件中更改的快捷键在这里都可以实现； (princ) (DEFUN C:V1 () (command \"VPMAX\")) (DEFUN C:V2 () (command \"PSPACE\")) 提示\r\rC:xx 后面为自定义的快捷命令； command \"xxx\" 为对应的命令全称； \r\r","date":"2021-11-18","objectID":"/posts/cad-short-command/:2:4","tags":["Auto CAD"],"title":"Auto CAD - 自定义快捷命令","uri":"/posts/cad-short-command/"},{"categories":["Software"],"content":"钢材理论重量计算截面特性查询计算器是一款专业的钢材理论重量计算器，可以用于计算查询各种钢材钢截面特性，支持H型钢、C型钢、Z型钢、工字钢和角钢槽钢、矩形管圆钢及圆管。 ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:0:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"简介 型钢截面特性软件能够计算各种型钢截面特性，也可以计算自定义的型钢截面特性，软件自带计算图解，操作简单，只需输入指定参数即可计算，计算结果也可以快速打印，帮助广大工程人员能够快速准确的进行计算。 ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:1:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"软件功能 包括H型钢，C型钢，Z型钢，工字钢，槽钢，角钢，圆钢及圆管，矩形管截面特性查询及计算 支持快速打印横截面数据图纸 支持快速打印横截面数据图纸 ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:2:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"使用方法 一、打开型钢截面特性软件，选择自己需要计算的型钢横截面。 二、输入数据进行计算。 三、点击打印即可打印当前界面 ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:3:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"计算公式 普通钢板： 长×宽×厚×密度/10^6 普通方钢： 长×边长^2×密度/10^6 普通圆钢： 长×pi×(直径/2)^2×密度/10^6 普通六角钢： 长×√3/2×边长^2×密度/10^6 ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:4:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"下载 百度云\r\r 链　接： https://pan.baidu.com/s/138CPVOUq5ENM8SysY4K6MA 提取码： a2nf \r\r 蓝奏云\r\r 链　接： https://cajun.lanzoui.com/iaeVnwnh89e 密　码： 4hss \r\r ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:5:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Software"],"content":"Windows 10打开报错 解决方法： 第一步 下载 mscomctl.ocx 位文件； 下载 的压缩包内含有「截面特性」主程序和mscomctl.ocx文件； 第二步 以管理员权限将mscomctl.ocx文件复制到 C:\\windows\\syswow64\\ 文件夹中； 第三步 在CMD下切换进入 C:\\windows\\syswow64\\ 文件夹中，执行命令：regsvr32 mscomctl.ocx 按快捷键 Ctrl+R 打开运行，输入 CMD 后回车， 复制以下命令粘贴到「命令提示符」窗口： cd C:/windows/syswow64 regsvr32 mscomctl.ocx ","date":"2021-11-18","objectID":"/posts/jiemiantexing/:6:0","tags":["钢材计算"],"title":"软件 - 截面特性","uri":"/posts/jiemiantexing/"},{"categories":["Work"],"content":"在绘图的过程中经常会用到 参照，如果没有正确使用参照文件，图纸发给别人就会出现参照文件丢失，比如图框显示不出来，那么该如何保证发出的图纸不丢失参照文件呢？ ","date":"2021-11-02","objectID":"/posts/cad-xref-manager/:0:0","tags":["Auto CAD"],"title":"Auto CAD - 关于参照的使用技巧","uri":"/posts/cad-xref-manager/"},{"categories":["Work"],"content":"批量修改参照文件路径 当参照文件被移动了位置过后，重新打开图纸，就会发现参照图形没了，变成了一串文字路径； 那么该如何解决这个问题呢？ 如果打开每个文件手动修改参照路径，文件数量不多的时候还行； 但遇到大型项目，文件很多的时候这种方式就不可取了； 接下来就介绍一种非常方便快捷可批量操作的方法； 第一步 关闭所有的CAD文件； 第二步 按下Win键，输入「参照管理器」，点击打开； ▲ 搜索参照管理器\r\r▲ 开始菜单找到参照管理器\r\r第三步 点击左上角的「添加文件」； ▲ 添加文件\r\r第四步 将所有需要修改的文件添加到参照管理器； ▲ 添加需要修改的文件\r\r选择「自动添加所有外部参照，而不管嵌套级别」； ▲ 添加所有外部参照\r\r第五步 选择视图 –\u003e 按参照类型列表，在左侧找到外部参照 –\u003e 参照对象； ▲ \r\r第六步 全选所有文件，点击鼠标右键，选择编辑选定的路径； ▲ 编辑路径\r\r第七步 在弹出的对话框点击右侧按钮，重新找到移动过后参照文件的位置，点击确定； ▲ 选择新的参照路径\r\r第八步 最后点击工具栏的「应用修改」，操作完成； ▲ 应用修改\r\r打开我们的文件，这个时候所有丢失的参照文件就已经正常显示了。 ","date":"2021-11-02","objectID":"/posts/cad-xref-manager/:1:0","tags":["Auto CAD"],"title":"Auto CAD - 关于参照的使用技巧","uri":"/posts/cad-xref-manager/"},{"categories":["Work"],"content":"批量绑定参照文件 第一步 打开一个 CAD 文件； 第二步 点击「文件」 –\u003e 电子传递； ▲ 文件菜单\r\r第三步 添加文件 –\u003e 将我们需要绑定参照的文件添加进来，点击「传递设置」； ▲ 创建新的传递\r\r第四步 点击「新建」； 第五步 输入一个名称，确定； 第六步 设置如下图所示： ▲ 传递设置项\r\r第七步 回到传递页面，选择刚刚创建的设置，点击确定开始创建； 第八步 选择保存位置，等待打包完成； ▲ 打包中\r\r第九步 打包完成的文件结构如下，同设置的时候选择； ▲ 打包完成的文件\r","date":"2021-11-02","objectID":"/posts/cad-xref-manager/:2:0","tags":["Auto CAD"],"title":"Auto CAD - 关于参照的使用技巧","uri":"/posts/cad-xref-manager/"},{"categories":["Work"],"content":"源泉非官方侧边栏基于速腾CAD菜单工具 在源泉 V6.7.3c 2021/10/30 版本基础上制作 ","date":"2021-11-01","objectID":"/posts/cad-plugin-yqarch-sidebar/:0:0","tags":["Auto CAD","YQArch"],"title":"Auto CAD - 源泉插件侧边栏","uri":"/posts/cad-plugin-yqarch-sidebar/"},{"categories":["Work"],"content":"安装方法 第一步 安装 源泉插件 ； 第二步 下载 速腾CAD菜单工具 ; 第三步 解压得到如下文件； ▲ 下载好的文件\r\r第四步 将解压后的Release文件夹和release.lsp文件一起复制到YQArch\\sys\\library文件夹内； 第五步 重启 CAD 按「快捷键」打开侧边栏即可。 ▲ 安装成功\r\r 技巧\r\r通过修改 YQArch\\sys\\library\\Release\\MenuRes\\mMenu.MNU 文件可以将自己常用的一些命令放到一起，提高使用效率。\r\r  开启/关闭「侧边栏」快捷键 Alt + Z  开启/关闭「顶边栏」快捷键 Alt + X ","date":"2021-11-01","objectID":"/posts/cad-plugin-yqarch-sidebar/:1:0","tags":["Auto CAD","YQArch"],"title":"Auto CAD - 源泉插件侧边栏","uri":"/posts/cad-plugin-yqarch-sidebar/"},{"categories":["Work"],"content":"下载 百度云\r\r 链　接： https://pan.baidu.com/s/1GyDqILAv_dIWYzBUaJWMow 提取码： 69a6 \r\r 蓝奏云\r\r 链　接： https://cajun.lanzoui.com/i3keWwnhrva 密　码： hb5k \r\r ","date":"2021-11-01","objectID":"/posts/cad-plugin-yqarch-sidebar/:2:0","tags":["Auto CAD","YQArch"],"title":"Auto CAD - 源泉插件侧边栏","uri":"/posts/cad-plugin-yqarch-sidebar/"},{"categories":["Work"],"content":"作者信息 博客： http://blog.sina.com.cn/ckcad Q　Q： 597435959 邮箱： 597435959@qq.com ","date":"2021-11-01","objectID":"/posts/cad-plugin-yqarch-sidebar/:3:0","tags":["Auto CAD","YQArch"],"title":"Auto CAD - 源泉插件侧边栏","uri":"/posts/cad-plugin-yqarch-sidebar/"},{"categories":["Work"],"content":"主要改进 1、类似天正侧边的点击方式，更加方便选择命令。 2、将源泉原Q5、Q6命令整合进面板里，方便便选取。 3、将源泉部分未画图标的命令补充完整。 速腾CAD工具箱包含库已支持到 CAD 2022 。 如有错误或者改进意见请与作者联系。 ","date":"2021-11-01","objectID":"/posts/cad-plugin-yqarch-sidebar/:4:0","tags":["Auto CAD","YQArch"],"title":"Auto CAD - 源泉插件侧边栏","uri":"/posts/cad-plugin-yqarch-sidebar/"},{"categories":["Z-Turn"],"content":"在使用 VSCode 过程中学习的一些笔记分享…… ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:0:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"插件安装 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:1:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"Markdown All in One 特点 提供了常用操作便利的快捷键； 支持目录； 一边书写一边预览(Ctrl + Shift + V or Ctrl + K V)； 可轻松转换为HTML文件和PDF文件； 优化了List editing的编辑； 可格式化table (Alt+Shift+F) 以及Task list (use Alt+C to check/uncheck a list item)； 支持特殊数学符号渲染； 常用快捷键 Ctrl + B　粗体 Ctrl + I　斜体 Alt + S　删除线 Ctrl + Shift + ]　标题(uplevel) Ctrl + Shift + [ 标题(downlevel) Ctrl + M　切换数学环境 Alt + C　选中/取消选中任务列表项 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:1:1","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"使用技巧 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:2:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"自定义用户代码片段 只是写好片段后要打开 Markdown 的 QuickSuggestions 选项 Ctrl+P 打开 VSCode 的 Settings.json ,添加 \"[markdown]\":{ \"editor.quickSuggestions\": true }, ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:2:1","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"自动保存 设置 –\u003e 常用设置 –\u003e files.autoSave –\u003e onWindowChange(窗口失去焦点自动保存)； ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:2:2","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"自动换行 将 VSCode 中 Editor:WordWrap 选项更改为 on 即可。 方法 ：打开 VSCode，在 Search settings 中搜索 Editor:WordWrap 即可找到该选项，更改成 on 即可。 快捷键 : alt + Z ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:2:3","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"解决报错 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:3:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"unins000.exe 尝试在目标目录创建文件时出错 VS Code 运行时会弹出 unins000.exe 尝试在目标目录创建文件时出错； 解决办法是，为 VS Code 的安装目录权限添加 Everyone 用户完全控制就可以了。 第一步 右键安装目录文件夹 –\u003e 属性，如图示依次点击「安全」 – \u003e 编辑 –\u003e 在弹出的新窗口点击「添加」； 第二步 点击「高级」； 第三步 点击「立即查找」 –\u003e 选择 Everyone –\u003e 点击「确定」； 第四步 回到安全窗口，选择 Everyone 用户，勾选「完全控制」权限； ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:3:1","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"Markdown 部分 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:4:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"MD033 html标签警告 一、问题： 在 Vscode 中使用 Markdownlint 插件进行代码分析，当使用了 Html 标签时，插件会给出 Md033/No-Inline-Html 警告（没错，就是那种强迫症最讨厌的黄色波浪线）。 ▲ 比如这样\r\r二、原因： 插件作者的意图是为了使 Markdown 文件是纯 Markdown 的，避免在使用 Html 以外的方式渲染时出错； ▲ 官方解释\r\r三、解决方法： 第一步 打开设置文件：左侧栏「扩展」（快捷键：Ctrl+Shift+X） –\u003e 点击 Markdown All in One 右边的齿轮 –\u003e 扩展设置 –\u003e 在settings.json中编辑； ▲ 打开设置文件\r\r第二步 在设置的 .json 文件中添加如下代码： \"markdownlint.config\": { \"default\": true, \"MD033\": { \"allowed_elements\": [ \"font\", \"li\", \"table\", \"tr\", \"td\", \"center\", \"br\" ] } }, 其中 \"allowed_elements\" 的列表中填入不想提出警告的 Html 标签，按自己需要进行修改； 保存修改后，Markdownlint 将不再对 \"allowed_elements\" 中的 Html 标签提出警告。 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:4:1","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"MD040 代码块警告 ▲ 就像这样的\r\r但是有些代码并不需要高亮，可以在 ``` 后面加上 Text ； 写为：```Text ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:4:2","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"MD024 标题重复警告 第一步 打开设置文件：左侧栏「扩展」（快捷键：Ctrl+Shift+X） –\u003e 点击 Markdown All in One 右边的齿轮 –\u003e 扩展设置 –\u003e 在settings.json中编辑； ▲ 打开设置文件\r\r第二步 在设置的 .json 文件中添加如下代码： \"MD024\": { \"siblings_only\": true, }, ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:4:3","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"换行 行尾最多可以增加两个空格，超过会给出警告，两个空格正好可以用于换行。 ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:4:4","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Z-Turn"],"content":"参考链接 Markdownlint全部警告解释 Markdownlint Rules On Github ","date":"2021-10-31","objectID":"/posts/vscode-use-notes/:5:0","tags":["VSCode"],"title":"VSCode - 使用笔记","uri":"/posts/vscode-use-notes/"},{"categories":["Windows"],"content":"图标显示不正常？试试强制刷新 Windows 图标缓存…… ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:0:0","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"问题描述 在 Windows 中，经常会出现与图标有关的问题：无法正常显示软件图标、快捷方式小图标丢失、开始界面图标变白…… 遇到这种情况时，反复刷新起不到任何作用。 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:1:0","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"问题分析 而出现这些问题的一大原因，是 Windows 为了提升图标显示速度，将图标文件缓存在了 IconCache.db 文件中。 一旦更新了图标或修改了源文件的位置，缓存得不到及时刷新，就会出现「白图标」的情况。 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:2:0","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"解决方法 接下来介绍「三种」方法解决这个问题。 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:3:0","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"删除文件 第一步 Win + R 打开运行 –\u003e 输入 %localappdata% 回车，进入 C:\\Users\\用户名\\appdata\\local 目录； 需要注意的是，这一步中 appdata 文件夹和 IconCache.db 文件都是隐藏的系统文件，需要手动输入地址和显示隐藏文件。 ▲ IconCache.db 文件\r\r第二步 直接删除 IconCache.db 文件； 第三步 重启资源管理器； 按Ctrl + Shift + Esc打开「任务管理器」 –\u003e 找到「Windows 资源管理器」 –\u003e 右键弹出菜单 –\u003e 选择「重新启动」； ▲ Windows 资源管理器\r\rIconCache.db 文件本质上是一个图标属性文件，在删除后系统会自动重建一个，由它导致的问题会被系统自动修复。 注意\r\r有可能需要注销重新登录才能生效。\r\r 这个方法简单快捷，适用于大部分情况。 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:3:1","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"自带磁盘清理工具 有时候 IconCache.db 文件会被其他软件占用，那就试试 Windows 官方提供的清理工具。 第一步 按下 Win 键，打开开始菜单，输入「磁盘清理」； 第二步 选择C盘 –\u003e 勾选「缩略图」–\u003e 点击确定。 ▲ 系统自带磁盘清理\r\r即可将图标缓存文件顺利删除。 最后 重启资源管理器即可看到图标刷新的效果。 按 Ctrl + Shift + Esc 打开「任务管理器」 –\u003e 找到「Windows 资源管理器」 –\u003e 右键弹出菜单 –\u003e 选择「重新启动」； ▲ Windows 资源管理器\r\r 注意\r\r有可能需要注销重新登录才能生效。\r\r ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:3:2","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"批处理清除 如果上面两个方法都无法解决问题，那就试试更暴力的批处理吧。 这段批处理文件会删除 IconCache.db 文件，同时还清理 thumbcache.db 文件和注册表中的 IconStreams、PastIconsStream 两个值。 打开记事本，将以下代码复制到记事本中，保存为 图标缓存清理 .bat 文件，双击运行即可。 rem 关闭Windows外壳程序explorer taskkill /f /im explorer.exe rem 清理系统图标缓存数据库 attrib -h -s -r \"%userprofile%\\AppData\\Local\\IconCache.db\" del /f \"%userprofile%\\AppData\\Local\\IconCache.db\" attrib /s /d -h -s -r \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\*\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_32.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_96.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_102.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_256.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_1024.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_idx.db\" del /f \"%userprofile%\\AppData\\Local\\Microsoft\\Windows\\Explorer\\thumbcache_sr.db\" rem 清理 系统托盘记忆的图标 echo y|reg delete \"HKEY_CLASSES_ROOT\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\" /v IconStreams echo y|reg delete \"HKEY_CLASSES_ROOT\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotify\" /v PastIconsStream rem 重启Windows外壳程序explorer start explorer 注意\r\r有可能需要注销重新登录才能生效。\r\r 如果上面这三种方法还是没能解决图标问题，说明问题已经超出了「图标缓存」的范畴，需要考虑其他方面的影响（比如软件安装错误、软件图标丢失等）。 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:3:3","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"参考链接 图标显示不正常？试试强制刷新Windows图标缓存 ","date":"2021-10-30","objectID":"/posts/windows-refresh-ico/:4:0","tags":["Ico","图标"],"title":"Win10 - 强制刷新图标缓存","uri":"/posts/windows-refresh-ico/"},{"categories":["Windows"],"content":"原生的 PowerShell 界面太朴素了，配置一下焕然一新…… ","date":"2021-10-29","objectID":"/posts/config-powershell/:0:0","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"使用 Winget 安装 PowerShell Windows 包管理器 Winget 是一种命令行工具，开发人员可以使用它在 Windows 10 计算机上查找、安装、升级、删除和配置应用程序。 此工具是 Windows 程序包管理器服务的客户端接口。 备注\r\r若要查看系统要求列表和安装说明，请参阅 winget文档 。\r\r 通过以下命令，可使用已发布的 winget 包安装 PowerShell： 搜索最新版本的 PowerShell winget search Microsoft.PowerShell 提示是否同意条款，输入 Y 回车确认； Name Id Version Source ---------------------------------------------------------------- PowerShell Microsoft.PowerShell 7.1.5.0 winget Powershell Preview Microsoft.PowerShell.Preview 7.2.0.10 winget 使用 --exact 参数选择安装 PowerShell 版本； winget install --name PowerShell --exact --source winget winget install --name PowerShell-Preview --exact --source winget ▲ 安装成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:1:0","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"开始配置 PowerShell ","date":"2021-10-29","objectID":"/posts/config-powershell/:2:0","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"安装 Oh-My-Posh Install-Module 为 PowerShell 自带的程序安装工具； Install-Module oh-my-posh -Scope CurrentUser -SkipPublisherCheck 遇到提示不信任的存储库，我们输入 Y ，确认； 警告\r\rUntrusted repository You are installing the modules from an untrusted repository. If you trust this repository,change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure youwant to install the modules from ‘PSGallery’ ? \r\r ▲ Oh-My-Posh安装成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:1","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"安装 Posh-Git Install-Module posh-git -Scope CurrentUser 同样的提示，重复上一步的操作，输入 Y ，确认即可； ▲ Posh-Git安装成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:2","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"安装 PSReadLine Install-Module -Name PSReadLine -AllowPrerelease -Scope CurrentUser -Force -SkipPublisherCheck ▲ PSReadLine安装成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:3","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"开启默认激活配置 第一步 使用记事本打开 $PROFILE，进行配置； 命令行继续输入： notepad.exe $PROFILE 第一次执行提示没有这个文件，点击「是」进行创建； ▲ 创建文件\r\r复制一下内容到文档，保存； Import-Module posh-git Import-Module oh-my-posh Set-PoshPrompt -Theme robbyrussel ▲ 编辑文档内容\r\r 代码解释\r\rImport-Module posh-git　//导入 Posh-Git 模块 Import-Module oh-my-posh　//导入 Oh-My-Posh 模块 Set-PoshPrompt -Theme robbyrussel　//设置主题\r\r 重新启动 Windows Terminal ，即可看到效果； ","date":"2021-10-29","objectID":"/posts/config-powershell/:2:4","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"安装特殊符号字体 当使用某些带有特殊符号的主题时，会显示乱码，如下： Set-PoshPrompt -Theme powerlevel10k_rainbow ▲ 符号未正常显示\r\r下载字体文件后，双击打开，在左上找到「安装」或Install并点击； 字体下载 百度云\r\r 链　接： https://pan.baidu.com/s/1ZXvAgqdKs1uXqfazHmA3Dg 提取码： j3sv \r\r 蓝奏云\r\r 链　接： https://cajun.lanzoui.com/im4FAwo4ioh 密　码： a9rj \r\r 然后打开设置 –\u003e PowerShell –\u003e 外观 –\u003e 字体选择带 Nerd Font 的 –\u003e 保存即可。 ▲ 设置字体\r\r▲ 图标符号已正常显示\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:5","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"安装文件图标库 Install-Module -Name Terminal-Icons -Repository PSGallery 同样的提示，输入 Y ，确认即可； ▲ 图标库安装成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:6","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"使用图标 Import-Module -Name Terminal-Icons ▲ 图标显示成功\r\r","date":"2021-10-29","objectID":"/posts/config-powershell/:2:7","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"命令行自动补全和提示 Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete 输入命令其实字符，按 tab 键，跳出候选命令； 最后可以将这些代码都放到配置文件中； Import-Module posh-git Import-Module oh-my-posh Import-Module -Name Terminal-Icons Set-PoshPrompt -Theme powerlevel10k_rainbow Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete ","date":"2021-10-29","objectID":"/posts/config-powershell/:2:8","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"参考链接 在 Windows 上安装 PowerShell 从 Windows PowerShell 5.1 迁移到 PowerShell 7 Oh-My-Posh 文档 更多 Oh-My-Posh 主题 winget文档 ","date":"2021-10-29","objectID":"/posts/config-powershell/:3:0","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Windows"],"content":"视频教程 ","date":"2021-10-29","objectID":"/posts/config-powershell/:3:1","tags":["PowerShell"],"title":"Powershell - 美化配置","uri":"/posts/config-powershell/"},{"categories":["Work"],"content":"进行 Excel VBA 开发，需要使用「开发工具」选项卡包含的各项命令。 默认情况下，「开发工具」选项卡是隐藏状态，需要手动启用。第一次启用后，在以后每次打开工作簿时，都会自动显示该选项卡。 ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:0:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"启用开发工具 第一步： 在功能区任意一区域点击右键，弹出的菜单中选择「自定义功能区」。 ▲ 选择自定义功能区\r\r第二步： 在右侧选项卡列表中，找到「开发工具」并勾选。 ▲ 勾选开发工具\r\r第三步： 点击确定，这时在功能区可以看到「开发工具」了。 ▲ 开发工具已启用\r\r","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:1:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"认识开发工具 开发工具选项卡共包含三组命令，其中「代码组」的命令是使用最频繁的一组命令，「加载项组合控件组」的命令则使用的较少。 代码组命令的功能\r\r Visual Basic： 打开 VBA 编辑器，快捷键是 Alt + F11。 宏： 打开宏列表，并且可以对列表中的宏进行编辑，例如运行、修改、删除等。这里的宏，就是我们在前一篇中说到的过程。 录制宏： 将键盘和鼠标操作，自动转换成 VBA 代码。这个功能在实际的开发过程中非常有用。具体用法以后的文章中介绍。 使用相对引用： 录制宏时的设置选项。 宏安全性： 设置 Excel 如何对待包含 VBA 代码的工作簿。因为存在一些恶意的代码，所以一般将宏安全性设置为禁用。 \r\r ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:2:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"使用 VBA 编辑器 ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:3:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"打开 VBA 编辑器 方法一 使用开发工具选项卡。点击开发工具选项卡 Visual Basic 命令。 ▲ 工具选项卡\r\r方法二 工作表右键菜单。在任意工作表标签上方，右键，在弹出的选项列表中，选择「查看代码」。 方法三 使用快捷键 Alt + F11。 ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:3:1","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"认识 VBA 编辑器 ▲ VBA 编辑器的界面\r\r 编辑器中各模块的基本用法\r\r 工具栏： 编辑器命令栏，与 Excel 功能区域类似，包含 Excel VBA 开发相关的命令。 VBA 工程： 显示当前 VBA 工程包含的所有对象。通常，一个工作簿就是一个 VBA 工程，其中包括 Excel 对象、工作表对象、模块等。 属性窗口： 查看和设置选中对象的属性的窗口。 代码编辑窗口： 实际编写代码的位置。编写、修改、保存代码，都在这里进行。 立即窗口： 代码运行过程中，打印出的内容，在立即窗口中显示。一般用于调试代码。 \r\r ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:3:2","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"管理 VBA 工程 通常，一个工作簿就是一个 VBA 工程，其中包括 Excel 对象、工作表对象、模块等。当多个工作簿同时打开时，他们公用同一个 VBA 编辑器，VBA 工程界面显示所有的 VBA 工程。 插入模块 在一个 VBA 工程中想要插入新的模块时，可在 VBA 工程右键，选择插入类型即可。 ▲ 插入模块\r\r删除模块 选中模块，右键，选择「移除 模块」 ▲ 删除模块\r\r修改对象/模块属性 当点击 VBA 工程界面中任意一个 Excel 对象或模块时，在下方的属性窗口显示选中对象的各项属性信息。其中左侧是属性名，右侧是属性值，在这里可以直接手动修改属性值。 以下为一个 Excel 工作表对象的属性窗口。 ▲ 模块的相关属性\r\r","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:3:3","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"运行 VBA 代码 编辑器中运行 VBA 代码，可能是执行最频繁的操作了。在开发过程中，每更新一次代码，可能需要运行，看一下其结果是否正确。 现在「模块1」中有以下一段代码： Sub MyCode() Sheet1.Range(\"A1\") = \"Hello World\" End Sub 代码的作用是，在 Sheet1 工作表 A1 单元格，写入 Hello World 内容。 在编辑器中运行 VBA 代码，有以下 3 种方法： 1. 使用工具栏命令 首选，将光标放置在要运行的代码的任意一处，再在工具栏选择「运行」→「运行子过程/用户窗体」命令。 2. 使用快捷工具栏命令 首选，将光标放置在要运行的代码的任意一处，再点击快捷工具栏「▶ 」按钮。 3. 使用快捷键 F5 首选，将光标放置在要运行的代码的任意一处，再使用快捷键 F5，即可运行代码。 按 方法二 运行代码效果如下： ▲ 运行完成\r\r▲ 效果演示\r\r","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:3:4","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"保存文件 注意\r\r含 VBA 代码的工作簿，须保存为 启用宏的工作簿，后缀为 .xlsm ； 在「文件」 –\u003e 「另存为」 –\u003e 「excel 启用宏的工作簿(.xlsm)」 \r\r ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:4:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Work"],"content":"参考链接 文章转载自「懒人Excel - lanrenexcel.com」 原文链接：https://www.lanrenexcel.com/open-developer-tab/ ","date":"2021-10-28","objectID":"/posts/excel-enable-development-tools/:5:0","tags":["Excel"],"title":"Excel - 开发工具基础知识","uri":"/posts/excel-enable-development-tools/"},{"categories":["Study"],"content":"在学习 bat 批处理过程中学习的一些笔记分享…… ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:0:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"echo 和 @ ::关闭单行回显 @ ::从下一行开始关闭回显 echo off ::从本行开始关闭回显。(一般批处理第一行都是这个) @echo off ::从下一行开始打开回显 echo on ::显示当前是 echo off 状态还是 echo on 状态 echo ::输出一个**回车换行**，空白行，(同echo, echo; echo+ echo[ echo] echo/ echo\") echo. ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:1:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"窗口设置相关命令 ::设置cmd窗口的标题： title=窗口标题 ::设定窗口大小： mode con cols=30 lines=20 ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:2:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"进入目录 ::进入根目录 cd\" ::显示当前目录 cd ::可以同时更改盘符和目录 cd /d d:\"sdk ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:3:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"打开相关命令 ::打开文件夹 start D:\\文件夹1 ::打开文件 start D:\\文件夹1\\test.txt ::用默认浏览器打开链接: start www.baidu.com ::运行某个应用程序，例如：微信 start /d \"C:\\Program Files (x86)\\Tencent\\WeChat\" WeChat.exe ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:4:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"电源相关命令 ::自动关机（单位：秒） shutdown -s -t 300 ::取消自动关机 shutdown -a ::立刻重启 shutdown -r -t 0 ::自动休眠（单位：秒） shutdown -h -t 60 ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:5:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"注释和暂停 ::注释行不执行操作 REM 这是注释 ::这是注释内容 ::暂停命令 pause ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:6:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"日期和时间 ::显示当前日期，并提示输入新日期，按\"\"回车\"\"略过输入 date ::只显示当前日期，不提示输入新日期 date /t ::显示当前时间，并提示输入新时间，按\"\"回车\"\"略过输入 time ::只显示当前时间，不提示输入新时间 time /t ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:7:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"复制当前时间到剪贴板 ::定义变量 aaa 截取当前日期-时间 set aaa=\"%date:~0,10%-%time:~0,5%\" ::将变量复制到剪贴板 set /p=Push：%aaa%\u003cnul | clip ::显示空行 echo. ::显示提示内容 echo Push：%aaa%已复制到剪贴板 ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:8:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"跳转命令 ::行首为:表示该行是标签行，标签行不执行操作 :label ::跳转到指定标签,执行标签内容 goto label ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:9:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"制作菜单 :menu cls echo. echo 菜单 echo ========================================================== echo. echo ――――――――――――――【1】系统文件清理 ――――――――――― echo. echo ――――――――――――――【2】启动Oracle服务 ――――――――――― echo. echo ――――――――――――――【3】关闭Oracle服务 ――――――――――― echo. echo ========================================================== set /p user_input=请输入： if %user_input%==1 goto a if %user_input%==2 goto b if %user_input%==3 goto c if not %user_input%==\"\" goto z rem 系统文件清理 :a echo 正在清除系统临时文件 *.tmp *._tmp *.log *.chk *.old ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:10:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"生成文件夹目录树状结构 按下 Win+R 打开运行，输入 cmd ，点击确定； 使用cd + 路径的方式，进入对应的目录，若不在C盘需要在cd后面加上/d如： cd /d D:/music 使用dir命令，查看当前目录的列表，此时如果想查看某一个目录下的文件或文件名，是无法看到的； 使用tree /f命令，当前文件夹的所有文件将以树状结构显示； 使用tree /f \u003e tree.txt命令，将生成的文件目录树形结构写入到tree.txt文件中，tree.txt这个文件名称是可以修改的； 打开对应的文件目录，就可以看到多了一个tree.txt的文件，其中tree.txt文件里面的内容，和屏幕输出的内容是一致的。 ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:11:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Study"],"content":"博客字体精简半自动化 在桌面新建一个空白文件，后缀名改为.bat； 用记事本打开新建的.bat文件； 将以下代码复制到记事本，保存双击即可使用； @echo off :: 定位到blog文件夹 cd D:\\Cajun.Lei\\Blog :: 生成文件 hugo --theme=LoveIt --baseUrl=\"https://ll.sc.cn\" :: 复制public文件夹到桌面临时文件夹1 xcopy D:\\Cajun.Lei\\Blog\\public\\ D:\\Desktop\\博客temp11\\ /s :: 定位到复制后的文件夹1 cd D:\\Desktop\\博客temp11\\ :: 重命名html文件并复制到临时文件夹2 setlocal enabledelayedexpansion set FileNum=1000 ::打开系统延时 dir /b/od :: 开始复制 For /f \"tokens=*\" %%i in ('dir /ad /b /s \"%~dp0\"') do ( For /f \"tokens=*\" %%j in ('dir /a-d /b /s \"%%i\\*.html\"') do ( if not \"%%j\"==\"%~nx0\" ( set /a FileNum+=1 ren \"%%j\" \"!FileNum:~1!.html\" xcopy \"%%i\\!FileNum:~1!.html\" \"D:\\Desktop\\博客temp22\\\" /s ) ) ) :: 删除复制后的文件夹1 rd /s /q \"D:\\Desktop\\博客temp11\" :: 打开临时文件夹2 start explorer \"D:\\Desktop\\博客temp22\" :: 打开html2text start /d \"D:\\Cajun.Lei\\Fonts\\html2text\" Html2Text.exe echo. echo 请手动将所有html文件拖入html2text软件 --\u003e 开始转换； echo. pause :: 定位到临时文件夹2 cd D:\\Desktop\\博客temp22 :: 合并为一个txt文件 type *.txt \u003e D:\\Desktop\\aa.txt :: 删除复制后的文件夹2 rd /s /q \"D:\\Desktop\\博客temp22\" pause :: 打开字体精简文件夹 start explorer D:\\Cajun.Lei\\Fonts\\字体精简 ","date":"2021-10-27","objectID":"/posts/bat-study-notes/:12:0","tags":["Bat"],"title":"Bat - 学习笔记","uri":"/posts/bat-study-notes/"},{"categories":["Work"],"content":"Excel 的单元格中如果包含中文字符，则计算的时候会出错，接下来我们将解决此问题…… ","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:0:0","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Work"],"content":"解决方法 在录入 Excel 数据的时候，我们有时候为了便于查阅，会在单元格中为公式记录备注，如下： 序号 名称 计算式 数量 1 xxx 1+2+3 2 xxx 1米+2米+3米 3 xxx 。。。 这种公式含有中文字符，在 Excel 中是不能直接计算得出结果的； ","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:1:0","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Work"],"content":"初级版 通过公式中的「名称管理器」实现： 第一步 点击工具栏「公式」 –\u003e 「名称管理器」 –\u003e 「新建」； ▲ 新建名称\r\r第二步 在名称定义方便记忆且易于输入的名字，在引用位置粘贴以下公式； =EVALUATE(SUBSTITUTE(SUBSTITUTE(Sheet1!$A$1,\"【\",\"*code(\"\"\"),\"】\",\"\"\")^0\")) ▲ 输入公式\r\r第四步 在单元格输入=aaa（aaa为刚刚定义的名称），回车即可看到结果； ▲ 输入定义的名称\r\r▲ 计算结果\r\r 提示\r\r若使用WPS软件可以将上述公式直接粘贴到单元格进行计算。\r\r ","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:1:1","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Work"],"content":"高阶版 接下来我们将通用 VBA 函数来实现计算； 解题思路： 去除掉公式中非数字、加减乘除运算符号； 通过 VBA 中的 Evaluate 对最终的公式进行计算； 操作方法 将以下代码粘贴到代码编辑窗口即可； 点击跳转到VBA编辑器的使用 'Excel中对带有文本的单元格进行计算 Function CalculateWithText(ParamArray args() As Variant) Dim objFormula As String Dim result As String Dim current As String Dim eachRange As Range For Each Rng In args For Each eachRange In Rng If result \u003c\u003e \"\" Then result = result + \"+\" End If result = result + CStr(CalculateText(eachRange.Value)) Next result = CStr(Evaluate(result)) Next Debug.Print result CalculateWithText = Evaluate(result) End Function Function CalculateText(objFormula As String) Dim current As String Dim validSymbol As String validSymbol = \"+,-,*,/,.,(,)\" '替换换行符、空格等 objFormula = Replace(objFormula, vbNewLine, \"+\") objFormula = Replace(objFormula, vbCr, \"+\") objFormula = Replace(objFormula, vbLf, \"+\") objFormula = Replace(objFormula, vbCrLf, \"+\") objFormula = Replace(objFormula, \" \", \"+\") '替换中文（、） objFormula = Replace(objFormula, \"（\", \"(\") objFormula = Replace(objFormula, \"）\", \")\") For n = 1 To Len(objFormula) current = Mid(objFormula, n, 1) If IsNumeric(current) Or IsInArray(current, Split(validSymbol, \",\")) Then result = result + current End If Next n 'Fix当单元格为空时Error 2015，为空设置结果为0 If result \u003c\u003e \"\" Then CalculateText = Evaluate(result) Else CalculateText = 0 End If End Function Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean IsInArray = (UBound(Filter(arr, stringToBeFound)) \u003e -1) End Function 提示\r\r第二行代码的CalculateWithText可以替换成自己方便记忆的名称，将作为函数名使用；\r\r 支持功能： 计算带文本公式 支持多区间和单元格计算 支持单元格中内容包含换行 支持单元格中内容包含空格 解决因单元格过多超过公式的最大长度导致结果出现 #VALUE! 的错误 解决单元格为空时，出现 #VALUE! 的错误 解决 () 未优先计算的问题 测试结果： ▲ 计算成功\r\r","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:1:2","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Work"],"content":"总结 两种方法各有利弊，各位可以根据实际情况按需使用； 初级版\r\r优点： 上手简单，使用简便，复制粘贴即可食用； 缺点： 因为在名称管理器的引用位置设置了具体的工作簿和单元格，所以并不适用任何单元格计算得出结果； \r\r 进阶版\r\r优点： 因采用VBA函数定义，所以可以一次定义，可以在当前工作簿任意单元格输入定义的函数进行计算； 缺点： 涉及了VBA函数，使用门槛较高，有一定的学习成本； \r\r ","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:2:0","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Work"],"content":"参考链接 Excel对包含文字的单元格计算求值 ","date":"2021-10-26","objectID":"/posts/excel-calculatewithtext/:3:0","tags":["Excel"],"title":"Excel - 包含文字的单元格计算","uri":"/posts/excel-calculatewithtext/"},{"categories":["Study"],"content":"在学习 SVG 过程中的一些笔记分享…… \u003csvg xmlns=\"http://www.w3.org/2000/svg\"\u003e \u003c!-- 画布宽度 --\u003e width=\"500px\" \u003c!-- 画布高度 --\u003e height=\"500px\" \u003c!-- 盒子 --\u003e viewBox=\"0 0 100 100\" \u003c!-- 矩形：x,y起点坐标，宽度，高度 --\u003e \u003crect x='10' y='10' width='20' height='10'/\u003e \u003c!-- 多边形：起点坐标开始连线 --\u003e \u003cpolygon points=\"0,0 10,0 20,5 5,5 0,0\"/\u003e \u003c!-- 圆:cx,cy中心坐标；r半径 --\u003e \u003ccircle cx='20' cy='20' r='5'/\u003e \u003c!-- 椭圆：cx,cy中心点坐标；rx横向半径；ry纵向半径 --\u003e \u003cellipse cx='40' cy='30' rx=\"10\" ry=\"50\" /\u003e \u003c!-- 直线：x1,y1起点坐标；x2,y2终点坐标；填充；边框 --\u003e \u003cline x1=\"40\" x2=\"0\" y1=\"40\" y2=\"0\" stroke=\"black\" stroke-width=\"5\"/\u003e \u003c!-- 折现：起点坐标开始连线，自动闭合；填充颜色=透明；边框颜色；边框宽度 --\u003e \u003cpolyline points=\"45,0 50,0 50,15 40,15\" fill=\"transparent\" stroke=\"black\" stroke-width=\"2\"/\u003e \u003c!-- 文字：位置；字体大小；内容 --\u003e \u003ctext x=\"10\" y=\"50\" font-size=\"20\"\u003e hello \u003c/text\u003e \u003c/svg\u003e ","date":"2021-10-25","objectID":"/posts/svg-study-notes/:0:0","tags":["SVG"],"title":"SVG - 学习笔记","uri":"/posts/svg-study-notes/"},{"categories":["Z-Turn"],"content":"Github 管理 ","date":"2021-10-24","objectID":"/posts/github-use-notes/:1:0","tags":["Github"],"title":"Github - 使用笔记","uri":"/posts/github-use-notes/"},{"categories":["Z-Turn"],"content":"删除历史版本 问题：旧项目提交到 Git 上，历史记录中会包含项目密码等敏感信息，或者强迫症感觉不舒服，或者是 Pull 的时候文件太大，访问速度又比较感人，这时候我们可以删除这些历史记录，保留最新一次版本。 操作步骤 第一步 切换分支： git checkout --orphan latest_branch 第二步 添加所有文件到暂存区： git add -A 第三步 提交更改： git commit -am \"commit message\" 第四步 删除分支： git branch -D master 第五步 重命名分支： git branch -m master 第六步 强制提交到远程仓库： git push -f origin master ","date":"2021-10-24","objectID":"/posts/github-use-notes/:1:1","tags":["Github"],"title":"Github - 使用笔记","uri":"/posts/github-use-notes/"},{"categories":["Z-Turn"],"content":"解决 Github pages 访问速度慢的问题","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"解决 Github pages 访问速度慢的问题…… ","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:0:0","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"前言 一开始我的个人博客是用 Gitee Pages 访问的，但是长且丑，就购买了个人域名 ll.sc.cn ； 后来发现，Gitee Pages 自定义域名需要企业版，也就是要花钱的； 但我的个人博客主要是用来记录一些自己学习的过程，并无收益，花钱买了个域名都已经破费了😂 ； 所以转到 Github Pages 上，用了几天发现访问速度实在是太太太太太慢了，有些网络环境还直接不能访问； 经过一番搜索，有大佬推荐 Vercel 来搭建。 提示\r\r因为我已经注册好 Vercel 了，一开始只是想试一试，所以在注册过程中没有截图，故引用 MTR-Static 大佬的图片了。 此文当一次温习和留存以便查阅。 \r\r ","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:1:0","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"正文 注册 Github 账号就不多赘述，不会的找 度娘 ； ","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:2:0","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"注册 Vercel 账号 打开 https://vercel.com/signup ，点击 Continue with Github。 ▲ Vercel注册\r\r出现授权页面，点击 Authorize Vercel。 ▲ 授权 Github\r\r","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:2:1","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"创建博客 到了 Select Vercel account 的页面，在下面的 Personal Account 内点击你自己的账户，接着点击 Continue。 ▲ 选择用户\r\r点击 Import Project。 ▲ 导入项目\r\r接着点击 Select Template。 ▲ 选择模板\r\r在模板选择页面向下滚动，可以找到 Hugo，点击它，现在我们将使用 Hugo 来生成静态网页。 ▲ 选择模板\r\r保持默认，点击 Continue。 ▲ 点击继续\r\r点击 Install Vercel for Github。 ▲ 为 Github 安装 Vercel\r\r点击绿色的 Install。 ▲ 点击安装\r\r保持默认，点击 Continue。 ▲ 点击继续\r\r到了 Create Git Repository 页面，因为之前关联的是 Github，所以选择 Github。在 Repository Name 内填写你想要的仓库名称，Vercel 将在 Github 创建一个仓库用于托管文件。Private Git Repository 无论勾选与否都差不多，区别就在于创建的仓库是是私人仓库还是公开仓库，点击 Continue。 ▲ 创建 Git 存储库\r\rImport Project 页面保持默认即可，点击 Deploy。 ▲ 点击部署\r\r现在就创建成功了，点击 Visit 就可以直接访问。但是界面十分粗糙，接下来需要做一些个性化设置。 ▲ 创建成功\r\r▲ 博客首页\r\r 个人心得\r\r我第一次在创建的时候选择了 Hugo 模板，但是部署后打开网页 404 ，然后我删除了刚刚在 Vercel 建的新库，重新导入 Github 项目，保持默认，没有选择 Hugo 模板，按刚刚的步骤完成，打开链接，成功了，网页显示正常。\r\r ","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:2:2","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"开始使用 你可以到 GitHub Desktop 下载 GitHub Desktop，相比 CLI 的 git，配置起来更便捷。 登录号账号之后点击 File，接着点击 Clone repositories。 ▲ GitHub Desktop\r\r找到自己为创建 Hugo 创建的仓库，选中后点击 Clone。 ▲ 拉取自己博客的库\r\r打开文件资源管理器，打开 C:\\Users\\你的用户名\\Documents\\GitHub，应该可以看到刚刚 clone 的仓库，此处为 test。 ▲ 打开本地库文件夹\r\r按照主题提供的方法做配置，例如： even。 修改完之后打开 Github Desktop，应该能看到更改，在左下角的 Summary 里填入做的修改（upload theme 或者别的什么，有内容即可），点击 Commit to master。 ▲ Github Desktop\r\r点击右上角的 Push origin，把修改推送到 Github。 ▲ 推送到 Github\r\r完成之后再等待半分钟，打开网站，改动应该已经生效了。 ▲ 博客首页\r\r这是因为 Vercel 会检测到 Github 仓库改动之后会自动重新生成网页，之后更新文章可以直接在 Github 网页版上传到./content/posts 里，比在电脑上自己生成网页再 Push 方便不少。 ▲ 部署记录\r\r","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:2:3","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"绑定域名 这需要你自己有一个域名，如果不想花钱的话可以在 freenom 免费申请一个，这里不多赘述。 在 Vercel 的控制面板里打开你的项目（如此处的 test） \u003e Settings \u003e Domains，在输入框里输入你想绑定的域名，此处我用 test.yxyy.top。接着它会提示错误，这是因为我还没有设置域名解析。 ▲ 自定义域名\r\r你需要按照提示在域名提供商那里做 CNAME 解析，我是在阿里云注册的域名，其他的域名注册商应该也大同小异。 ▲ 解析域名\r\r现在回到 Vercel 控制面板，应该就不会报错了，它还会自动帮你申请 Let's Encrypt 的 SSL 证书。 ▲ 自定义域名\r\r现在可以带着域名访问了。 ▲ 自己的域名打开博客\r\r","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:2:4","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"参考链接 使用Vercel+Github搭建个人博客 手把手教你搭建完全免费的个人博客 ","date":"2021-10-23","objectID":"/posts/vercel-github-building-blog/:3:0","tags":["Vercel","Github"],"title":"Vercel \u0026 Github 搭建个人博客","uri":"/posts/vercel-github-building-blog/"},{"categories":["Z-Turn"],"content":"在使用 v2rayN 过程中学习的一些笔记分享…… 提示\r\r3.29 是最后一版支持 PAC 的，推荐使用；\r\r ","date":"2021-10-22","objectID":"/posts/v2rayn-use-notes/:0:0","tags":["v2rayN"],"title":"v2rayN - 使用笔记","uri":"/posts/v2rayn-use-notes/"},{"categories":["Z-Turn"],"content":"新版本实现 PAC 功能 ▲ 参数解释\r\r 路由设置，复制以下代码，导入剪贴板； [ { \"inboundTag\": [], \"outboundTag\": \"block\", \"domain\": [ \"geosite:category-porn\" ] }, { \"inboundTag\": [ \"http\" ], \"outboundTag\": \"direct\", \"ip\": [ \"geoip:cn\", \"geoip:private\" ] }, { \"inboundTag\": [ \"http\" ], \"outboundTag\": \"direct\", \"domain\": [ \"geosite:category-games@cn\", \"domain:edu.cn\", \"domain:steamcontent.com\" ] }, { \"inboundTag\": [ \"http\" ], \"outboundTag\": \"proxy\", \"domain\": [ \"geosite:greatfire\", \"geosite:gfw\", \"geosite:steam\", \"geosite:google\", \"domain:lcc.edu\", \"domain:vmware.com\" ] }, { \"port\": \"0-65535\", \"inboundTag\": [ \"http\" ], \"outboundTag\": \"direct\" }, { \"port\": \"0-65535\", \"inboundTag\": [ \"socks\" ], \"outboundTag\": \"proxy\" } ] ","date":"2021-10-22","objectID":"/posts/v2rayn-use-notes/:0:1","tags":["v2rayN"],"title":"v2rayN - 使用笔记","uri":"/posts/v2rayn-use-notes/"},{"categories":["Z-Turn"],"content":"V2Ray域名解析策略的含义、区别，以及最佳选择 AsIs 、 IPIfNonMatch 、 IPOnDemand 三个域名解析策略是什么意思，有什么区别？ 摘要\r\r AsIs 只使用域名进行路由选择。快速解析，不精确分流。默认值。 IPIfNonMatch 当域名没有匹配任何规则时，将域名解析成 IP（A 记录或 AAAA 记录）再次进行匹配； 当一个域名有多个 A 记录时，会尝试匹配所有的 A 记录，直到其中一个与某个规则匹配为止； 解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名； 理论上解析比 AsIs 稍慢，但使用中通常不会觉察到。 IPOnDemand 当匹配时碰到任何基于 IP 的规则，将域名立即解析为 IP 进行匹配。解析最精确，也最慢。 \r\r V2Ray 域名策略解析选择哪个更好？ 虽然 V2Ray 官方解释 AsIs 是默认值，但是实际上，在几款主流客户端中，有的默认值是 AsIs ，有的是 IPIfNonMatch 。 因此，选择 AsIs 或 IPIfNonMatch 都可以。 注意\r\r如果在自定义路由设置规则时，添加了匹配 IP 的路由代理规则，比如 geoip:cn、geoip:private，或者直接添加的 IP 地址规则，则必须选择位于中间的 IPIfNonMatch ，不然，匹配 IP 地址的路由规则不会生效。\r\r #以下三行是GitHub网站，为了提高下载速度走代理, github.com, githubassets.com, githubusercontent.com, #下一行谷歌产品图标, googleusercontent.com 订阅节点\r\r freefq/free https://raw.fastgit.org/freefq/free/master/v2 \r\r ","date":"2021-10-22","objectID":"/posts/v2rayn-use-notes/:0:2","tags":["v2rayN"],"title":"v2rayN - 使用笔记","uri":"/posts/v2rayn-use-notes/"},{"categories":["Z-Turn"],"content":"参考链接 项目地址 节点一 节点二 使用说明 v2ray域名解析策略的含义、区别，以及最佳选择 可以替代PAC模式的v2ray路由器策略代理规则配置 ","date":"2021-10-22","objectID":"/posts/v2rayn-use-notes/:1:0","tags":["v2rayN"],"title":"v2rayN - 使用笔记","uri":"/posts/v2rayn-use-notes/"},{"categories":["Z-Turn"],"content":"在使用 Git 过程中学习的一些笔记分享…… ","date":"2021-10-20","objectID":"/posts/git-manual/:0:0","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Git 使用技巧 ","date":"2021-10-20","objectID":"/posts/git-manual/:1:0","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"配置多个SSH-Key 背景 当有多个 git 账号时，比如： a. 一个 gitee ，用于公司内部的工作开发； b. 一个 github ，用于自己进行一些开发活动； 解决方法 第一步 生成一个公司用的 SSH-Key ssh-keygen -t rsa -C 'xxxxx@company.com' -f ~/.ssh/gitee_id_rsa 第二步 生成一个 github 用的 SSH-Key ssh-keygen -t rsa -C 'xxxxx@qq.com' -f ~/.ssh/github_id_rsa 第三步 在 ~/.ssh 目录下新建一个 config 文件（没有后缀）； 添加如下内容（其中 Host 和 HostName 填写 git 服务器的域名，IdentityFile 指定私钥的路径） # gitee Host gitee.com HostName gitee.com PreferredAuthentications publickey IdentityFile ~/.ssh/gitee_id_rsa # github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsa 提示\r\r如果自动生成了以上内容，则不用自己修改，保持不动即可。\r\r 第四步 用 ssh 命令分别测试 ssh -T git@gitee.com ssh -T git@github.com ","date":"2021-10-20","objectID":"/posts/git-manual/:1:1","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"同步代码至github和gitee 我们有时候开发代码需要把代码同步到多个远程库中，该如何操作呢？ Git 是分布式版本控制系统，同步到多个远程库时，需要用不同的名称来标识不同的远程库；而 Git 给远程库起的默认名称是 Origin ,所以我们需要修改、配置名称，以关联不同远程库，以 Github 和 Gitee 为例； 同步方式 一、命令方式同步 第一步 删除已关联的名为 origin 的远程库： git remote rm origin 第二步 再关联 github 的远程库： git remote add github git@github.com:chloneda/demo.git 第三步 再关联 gitee 的远程库： git remote add gitee git@gitee.com:chloneda/demo.git 二、配置方式同步 修改 .git 文件夹内的 config 文件： [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote \"origin\"] url = git@github.com:chloneda/demo.git fetch = +refs/heads/*:refs/remotes/github/* [branch \"master\"] remote = origin merge = refs/heads/master 将上述文件内容 [remote \"origin\"] 内容复制，修改 origin 名称，内容如下： [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote \"github\"] url = git@github.com:chloneda/demo.git fetch = +refs/heads/*:refs/remotes/github/* [remote \"gitee\"] url = git@gitee.com:chloneda/demo.git fetch = +refs/heads/*:refs/remotes/gitee/* [branch \"master\"] remote = origin merge = refs/heads/master 查看远程库 通过以上两种方式的任一种方式配置完成后，我们查看以下远程库信息： git remote -v 可以看到两个远程库，说明配置生效了。 gitee　git@gitee.com:chloneda/demo.git (fetch) gitee　git@gitee.com:chloneda/demo.git (push) github git@github.com:chloneda/demo.git (fetch) github git@github.com:chloneda/demo.git (push) 上传代码 git add . git commit -m \"update\" 提交到github git push github master 提交到gitee git push gitee master 更新代码 # 从github拉取更新 git pull github # 从gitee拉取更新 git pull gitee 踩到的坑 上述过程中，更新或提交代码时可能会遇到 fatal:refusing to merge unrelated histories (拒绝合并无关的历史) 错误，解决办法： 首先将远程仓库和本地仓库关联起来。 git branch --set-upstream-to=origin/remote_branch your_branch 其中，origin/remote_branch 是你本地分支对应的远程分支，your_branch 是你当前的本地分支。 然后使用 git pull 整合远程仓库和本地仓库。 git pull --allow-unrelated-histories # (忽略版本不同造成的影响) 重新更新、提交即可。 强制提交 # 强制推送到gitee git push -f gitee master # 强制推送到github git push -f github master 注意\r\r不到万不得已，非常不推荐使用。\r\r ","date":"2021-10-20","objectID":"/posts/git-manual/:1:2","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Git Bash 设置中文 Git Bash 本身就支持中文，只需要在打开 Git bash 后命令窗口右键「Options」 –\u003e 「Windows」 –\u003e 「UI languages」下拉选择 zh_CN 保存即可！！ ▲ 右键菜单\r\r▲ 设置界面\r\r我为了使用方便，设置了「选中」 –\u003e 「选中后立即复制」 ，「鼠标」 –\u003e 「右键（粘贴）」、「中键（回车）」； ▲ 选中后立即复制\r\r▲ 快速粘贴、回车\r\r这时候就无法右键弹出菜单 -\u003e 「设置」选项了； 可以用鼠标单击窗口左上角的图标 -\u003e 「选项」进行设置； ▲ 弹出菜单\r\r","date":"2021-10-20","objectID":"/posts/git-manual/:1:3","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Git GUI 汉化 第一步 下载汉化文件 zh_cn.msg 第二步 解压缩后得到 zh_cn.msg 文件。 ▲ 下载解压后的文件\r\r将其放到 /mingw64/share/git-gui/lib/msgs/zh_cn.msg 路径下； ▲ 将其放入此文件夹\r\r如果没有 msgs 这个文件夹就自己创建之后再将这个汉化文件放进去； 重新打开 Git GUI ，你就会发现界面已经变成了中文了。 ","date":"2021-10-20","objectID":"/posts/git-manual/:1:4","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Git 疑难杂症 ","date":"2021-10-20","objectID":"/posts/git-manual/:2:0","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"SSH Key 突然失效 出现的问题 2021 年 09 月 26 日发布的 OpenSSH 8.8 中移除了对 RSA-SHA1 的支持 最新的 git for windows 2.33.1 版本已使用 OpenSSH 8.8; arch 和 manjaro 等发行版的滚动升级比较激进，使用 pacman -Syu 就会升级所有软件到最新版本; 此时的表现就是之前还可以正常使用，pacman -Syu 或升级到 git for windows 2.33.1 之后使用 git pull 就出现 fatal: 无法读取远程仓库的提示; 如果您升级到 OpenSSH 8.8 或以上版本，则使用 ssh 推拉 Gitee 代码时会出现校验不通过的问题; 临时解决方案 第一种 配置 OpenSSH 服务允许使用 RSA-SHA1key 在~/.ssh/config加上如下配置 Host gitee.com HostkeyAlgorithms +ssh-rsa PubkeyAcceptedAlgorithms +ssh-rsa 提示\r\r这种方式不需要更换 ssh key，推荐 Linux 和 windows git bash 用户使用。\r\r 第二种 换用其他算法生成 ssh key ssh-keygen -t ed25519 -C \"your@example.email\" 之后到 Gitee 重新添加公钥即可 提示\r\r这种方式需要更换 ssh key，推荐 windows 用户使用\r\r 第三种 暂时不要使用 OpenSSH 8.8 及以上版本 ","date":"2021-10-20","objectID":"/posts/git-manual/:2:1","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Hugo Server 报错 ▲ 命令执行失败\r\r $ hugo server Start building sites … hugo v0.88.1-5BC54738+extended windows/amd64 BuildDate=2021-09-04T09:39:19Z VendorInfo=gohugoio ERROR 2021/10/24 13:14:34 Failed to read Git log: fatal: your current branch 'master' does not have any commits yet WARN 2021/10/24 13:14:34 Current environment is \"development\". The \"comment system\", \"CDN\" and \"fingerprint\" will be disabled. 当前运行环境是 \"development\". \"评论系统\", \"CDN\" 和 \"fingerprint\" 不会启用. Error: Error building site: logged 1 error(s) Built in 306 ms 解决方法\r\r先在 Blog 项目文件夹中右键 git bash here 输入命令； git init 接着尝试在 git 中执行命令； hugo server 如果依然报错，请将 Public 中的 .git 文件夹中的内容复制 Blog 文件夹下面的 .git 文件夹中，选择「不覆盖」粘贴； 再次执行命令； hugo server -D -e production \r\r 成功执行，问题解决。 ▲ 成功执行\r\r","date":"2021-10-20","objectID":"/posts/git-manual/:2:2","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"Git 命令 在开始前，我们先做出如下约定： \u003clocalBranch\u003e 指本地分支 \u003coriginBranch\u003e 指远程分支 \u003cbranchName\u003e 指分支名称 \u003crepoAddress\u003e 指仓库地址 \u003ccommit\u003e 指某个commit记录 \u003ctagName\u003e 指标签名 ","date":"2021-10-20","objectID":"/posts/git-manual/:3:0","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"设置命令别名 git config --global alias.st status // git status ==\u003e git st git config --global alias.ci commit // git commit ==\u003e git ci git config --global alias.co checkout // git checkout ==\u003e git co git config --global alias.br branch // git barnch ==\u003e git br git config --global alias.sh stash // git stash ==\u003e git sh git config --global alias.pop \"stash pop\" // git stash pop ==\u003e git pop ","date":"2021-10-20","objectID":"/posts/git-manual/:3:1","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"查看 # 查看git版本 git --version # 查看用户配置 git config --global --list # 查看当前分支信息 git status # 查看本地提交历史 git log # 查看本地最后n次提交 git log -n # 查看本地分支 git branch # 查看远程分支 git branch -r # 查看所有分支 git branch -a # 查看本地分支与的远程分支的关联情况 git branch -vv # 查看标签 git tag # 查看标签与之对应的提交信息 git show \u003ctagName\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:2","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"新建 # 新建一个本地分支，但不会切换到该分支上 git branch \u003clocalBranch\u003e # 为某个commit记录创建一个分支 git branch \u003cbrancName\u003e \u003ccommit\u003e # 从某个分支新建一个分支 git branch \u003cbrancName\u003e \u003clocalBranch\u003e # 新建一个本地分支，并切到该分支 git checkout -b \u003cbrancName\u003e # 新建一个本地分支，同时切换到该分支，并且关联该远程分支 git checkout -b \u003cbranchName\u003e origin/\u003coriginBranch\u003e # 新建一个和远程同名的分支，同时切换到该分支，并且关联该远程分支 git checkout --track origin/\u003coriginBranch\u003e # 新建一个附注标签，并添加标签信息 git tag -a \u003ctagName\u003e -m \"some message\" # 新建一个轻量标签 git tag \u003ctagName\u003e # 给某一个commit他标签 git tag \u003ctagName\u003e \u003ccommit\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:3","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"切换 # 切换到本地的另一个分支 git checkout \u003clocalBranch\u003e # 强制切换到本地的另一个分支，该操作会丢失在当前分支所做的修改，慎用 git checkout \u003clocalBranch\u003e -f # 新建一个本地分支，并切到该分支 git checkout -b \u003clocalBranch\u003e # 新建一个本地分支，同时切换到该分支，并且关联该远程分支 git checkout -b \u003cbranchName\u003e origin/\u003coriginBranch\u003e # 切换到某个tag git checkout \u003ctagName\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:4","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"删除 # 删除(一个或多个)本地该分支（不能删除当前所在的分支，不能删除没有合并到master上的分支） git branch -d \u003clocalBranch\u003e ... # 删除(一个或多个)本地该分支（不能删除当前所在的分支，可以删除没有合并到master上的分支） git branch -D \u003clocalBranch\u003e ... # 删除远程分支 git push -d origin \u003coriginBranch\u003e # 删除远程分支 git push origin -d \u003coriginBranch\u003e # 删除最新提交，只能删除本地的提交记录 git reset --hard HEAD^ # 删除本地tag git tag -d \u003ctagName\u003e # 删除远程tag git push origin --delete \u003ctagName\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:5","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"拉取 # 拉取与当前分支关联的远程分支代码并进行合并 git pull # 拉取与当前分支关联的远程分支代码并通过变基进行合并 git pull --rebase # 拉取远程某个分支的代码并与当前分支进行合并 git pull origin \u003coriginBranch\u003e # 拉取远程某个分支的代码并与本地分支进行合并 git pull origin \u003coriginBranch\u003e:\u003clocalBranch\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:6","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"推送 # 推送到已关联的远程分支 git push # 推送当前分支到指定远程分支 git push origin \u003coriginBranch\u003e # 推送某个本地分支到某个远程分支 git push origin \u003clocalBranch\u003e:\u003coriginBranch\u003e # 推送指定tag到远程 git push origin \u003ctagName\u003e # 推送所有不在远程的tag到远程 git push --tags ","date":"2021-10-20","objectID":"/posts/git-manual/:3:7","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"关联 # 推送并与远程分支建立联系，若远程不存在该分支则自动创建 git push --set-upstream origin \u003coriginBranch\u003e # 与远程分支建立关系，远程必须存在该分支 git branch --set-upstream-to=origin/\u003coriginBranch\u003e \u003clocalBranch\u003e # 被废弃的方式 与远程分支建立关系 git branch --set-upstream \u003clocalBranch\u003e origin/\u003coriginBranch\u003e # 将本地仓库与远程仓库关联 git remote add origin \u003crepoAddress\u003e # 新建一个本地分支，同时切换到该分支，并且关联该远程分支 git checkout -b \u003cbranchName\u003e origin/\u003coriginBranch\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:8","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"暂存 # 贮存当前改动 git stash # 查看贮存列表 git stash list # 应用某个贮存（默认第一个），即git stash pop stash@{0} # 可修改最后的数字，来指定应用某个贮存，该命令同时会将应用的贮存删除 git stash pop # 应用某个贮存（默认第一个），即 git stash apply stash@{0} # 可修改最后的数字，来指定应用某个贮存，该不会删除贮存 git stash apply # 删除某个贮存（默认第一个），即git stash drop stash@{0} # 可修改最后的数字，来指定删除某个贮存 git stash drop # 查看某个贮存（默认第一个）做了那些改动，即 git stash show stash@{0} # 可修改最后的数字，来指定查看某个贮存 git stash show # 删除所有贮存 git stash clear ","date":"2021-10-20","objectID":"/posts/git-manual/:3:9","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"克隆 # 克隆master分支代码 git clone \u003crepoAddress\u003e # 克隆某个分支的代码 git clone -b \u003coriginBranch\u003e \u003crepoAddress\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:10","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"修改 # 修改分支名称 \u003coldBranch\u003e原始分支名称 \u003cnewBranch\u003e新分支名称 git branch -m \u003coldBranch\u003e \u003cnewBranch\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:11","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"合并 # 将某个分支合并到当前分支 git merge \u003cbranchName\u003e # 将当前分支变基到某分支 git rebase \u003cbranchName\u003e ","date":"2021-10-20","objectID":"/posts/git-manual/:3:12","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"参考链接 git同步代码至GitHub和gitee（码云） 根据功能分类Git命令 Git GUI汉化包来源 ","date":"2021-10-20","objectID":"/posts/git-manual/:4:0","tags":["Git"],"title":"Git - 使用手册","uri":"/posts/git-manual/"},{"categories":["Z-Turn"],"content":"hugo安装 Hugo的安装有很多方式 Install Hugo 根据个人喜好可以自行安装。 使用 Hugo 前需要安装 Git 和 Go 语言开发环境。 第一步 下载 hugo，选择符合自己环境的版本下载； 第二步 解压hugo安装文件，比如到 C:\\hugo 管理员身份打开cmd，切换到 C:\\hugo\\ 目录下，输入： hugo version 显示 hugo 版本号，说明安装成功了； 将Hugo添加到Windows的环境变量 PATH 中； 步骤 计算机 –\u003e 属性 –\u003e 高级系统设置 –\u003e 环境变量 –\u003e 系统变量 –\u003e Path。 现在在任意位置，右键打开 git bash 输入 hugo version 同样也会得到 hugo 版本号； ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:1:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"Node.js安装 打开Node.js，选择合适的版本下载安装即可； 我安装的长期维护版，安装过程一路点击下一步即可； ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:2:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"PicGo 配置(Gitee) ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:3:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"安装插件 在左侧 插件设置 选项中，搜索 Gitee 即可出现对应的插件，点击安装即可； 我选择的是 gitee-uploader 1.1.2 ； ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:3:1","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"配置gitee 点击左侧 图床设置 –\u003e gitee ； 填写说明\r\r repo： 仓库名称，填写你在创建图床时的仓库名字，这里注意带上你的用户名，比如我的是 cajunlei/ImageBed; branch： 填写分支名称，一般默认 master； token： 这个比较重要，就是上面创建仓库后创建的私人令牌明文，直接粘贴上去就行，如果忘记了那么直接删除重新再创建了； path： 填写仓库下面某个文件夹名字，也就是你存放图片的位置，比如我的是在images,这个名字要和你仓库中创建的对应； customPath： 保持默认可不用修改； customUrl： 保持默认可不用修改； \r\r 最后「确认」后直接就可以使用了，记得点击下「设置为默认图床」。 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:3:2","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"Blog 配置 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:4:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"为自己的博客添加运行时间 第一步 将以下代码中的日期和时间，修改为你博客或者网站的运行开始日期和时间； \u003c!-- 修改此行日期及时间 --\u003e new Date(\"9/24/2021 22:52:50\"); 第二步 将修改过后的代码，放到你网站喜欢的位置就好啦。 \u003cspan id=\"runtime_span\"\u003e\u003c/span\u003e \u003cscript type=\"text/javascript\"\u003e function show_runtime(){window.setTimeout(\"show_runtime()\",1000); X=new Date(\"9/24/2021 22:52:50\"); Y=new Date();T=(Y.getTime()-X.getTime()); M=24*60*60*1000;a=T/M; A=Math.floor(a);b=(a-A)*24; B=Math.floor(b);c=(b-B)*60; C=Math.floor((b-B)*60); D=Math.floor((c-C)*60); runtime_span.innerHTML=\"本站已运行:\"+A+\"天\"+B+\"小时\"+C+\"分\"+D+\"秒\"}show_runtime(); \u003c/script\u003e 我的放在 /layouts/pratials/footer.html 文件中： ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:4:1","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"加入不蒜子统计 在根目录的 config.toml 文件中加入以下代码： [params] ... # 以下为需添加内容 # # busuanzi busuanzi = true busuanzi_site_offset = 100000 在 /layouts/pratials/footer.html 文件中加入以下代码： {{- if ne .Site.Params.footer.enable false -}} \u003cfooter class=\"footer\"\u003e \u003cdiv class=\"footer-container\"\u003e ... \u003c!-- 以下为需添加内容 --\u003e \u003cspan id=\"busuanzi_container_site_pv\"\u003e 本站访问量：\u003cspan id=\"busuanzi_value_site_pv\"\u003e\u003c/span\u003e次 \u003c/span\u003e | \u003cspan id=\"busuanzi_container_site_uv\"\u003e 您是本站第 \u003cspan id=\"busuanzi_value_site_uv\"\u003e\u003c/span\u003e 位访问者 \u003c/span\u003e \u003c!-- 以上为需添加内容 --\u003e \u003c/div\u003e \u003c/footer\u003e {{- end -}} ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:4:2","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"用于站长SEO 无需上传验证文件到根目录，直接修改配置文件； 网站验证代码修改，根目录 config.toml 文件； # Site verification code for Google/Bing/Yandex/Pinterest/Baidu # 网站验证代码，用于 Google/Bing/Yandex/Pinterest/Baidu [params.verification] google = \"google699009ae438f1e4d\" bing = \"0AA62D35A93C9239B95F5187EC12FAF1\" yandex = \"\" pinterest = \"\" baidu = \"3f7de7fba11a61559c21d907904d0a1b\" ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:4:3","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"jsDelivr 加速 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:5:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"操作步骤 第一步 新建Github仓库； 第二步 将需要cdn加速的静态资源上传到github仓库； 第三步 点击release发布版本，自定义发布版； 第四步 应用资源文件路径： https://cdn.jsdelivr.net/gh/user/repo@version/file https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径 以我的为例，访问仓库目录下的logo.jpg文件，为以下链接： https://cdn.jsdelivr.net/gh/AyagawaSeirin/BlogAssets@1.3/logo.jpg 注意\r\r版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，\r\r ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:5:1","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"CDN 缓存 当网站更新时，如果CDN节点上数据没有及时更新，即便在浏览器使用Ctrl+F5的方式强制刷新浏览器的缓存，也会因为CDN节点没有同步最新数据而导致访问不到最近资源。 我们可以通过CDN服务商提供的刷新缓存接口来达到清理CDN边缘节点缓存的目的，这样在更新数据后，可以使用「刷新缓存」功能来强制CDN节点上的数据缓存过期，保证在访问时，拉取到最新的数据。 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:5:2","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"jsDelivr 缓存刷新 对于jsDelivr，缓存刷新的方式也很简单，只需将想刷新的链接的开头的 https://cdn.jsdelivr.net/... 替换成 https://purge.jsdelivr.net/... 即可实时刷新。刷新成功后，浏览器会返回缓存刷新成功的信息，如下： { \"id\": \"I2ZhNWYqdXev0Dmh\", \"status\": \"finished\", \"timestamp\": \"2021-12-05T01:54:57.948Z\", \"paths\": { \"/gh/cajunlei/ImageBed/images/1.jpg\": { \"throttled\": false, \"providers\": { \"fastly\": true, \"bunny\": true, \"cloudflare\": true, \"quantil\": false } } } } ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:5:3","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"为图标添加动画效果 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:6:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"示例代码 \u003cdiv class=\"fa-3x\"\u003e \u003ci class=\"fas fa-spinner fa-spin\"\u003e\u003c/i\u003e \u003ci class=\"fas fa-circle-notch fa-spin\"\u003e\u003c/i\u003e \u003ci class=\"fas fa-sync fa-spin\"\u003e\u003c/i\u003e \u003ci class=\"fas fa-cog fa-spin\"\u003e\u003c/i\u003e \u003ci class=\"fas fa-spinner fa-pulse\"\u003e\u003c/i\u003e \u003ci class=\"fas fa-stroopwafel fa-spin\"\u003e\u003c/i\u003e \u003c/div\u003e ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:6:1","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"显示效果 \r\r\r\r\r\r\r","date":"2021-10-18","objectID":"/posts/blog-building-notes/:6:2","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"自定义模板 第一步 将\\themes\\LoveIt\\layouts\\posts\\single.html文件复制到\\layouts\\_default文件夹下； 第二步 按需要修改single.html模板文件； 第三步 最后在文章头部引用模板即可； --- title: \"XX\" layout: \"journal\" --- ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:7:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"一些问题 ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:8:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"背景设置透明度后文章图片也被透明化的解决方法 因为增加了背景图片，故正文部分填充颜色设置了透明度，但是发现文章的「图片」也被透明了； 解决办法： 在设置透明度的时候改用rgba形式就可以了，只需要在设置颜色的透明度的时候可以先找到16进制颜色对应的rgb值，如：255,255,255然后通过rgba(255,255,255,0.9)来实现透明度； ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:8:1","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"参考链接 jsDelivr - Open Source CDN jsdelivr 缓存刷新 如何使用jsDelivr+Github 实现免费CDN加速? ","date":"2021-10-18","objectID":"/posts/blog-building-notes/:9:0","tags":["Blog"],"title":"Blog 搭建笔记","uri":"/posts/blog-building-notes/"},{"categories":["Z-Turn"],"content":"关于在使用 Sublime Text3 所遇到的一系列报错等问题的解决办法。 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:0:0","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"问题一 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:1:0","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"问题描述 打开 Sublime Text3 软件时或者安装插件时，弹出提示框： ▲ 错误提示\r\r Package Control Unable to download XXX. Please view the console for more details. 一番搜索后在 Github 上找到答案： ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:1:1","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"解决方法 ▲ 解决办法\r\r第一步 打开 Sublime Text3 ； 第二步 依次点击 Preference（首选项）–\u003e ackage Settings –\u003e Package Control –\u003e Settings ，打开设置文件； ▲ 打开设置文件\r\r第三步 在打开文件中添加下面以下代码； \"debug\": true, \"downloader_precedence\": { \"linux\": [ \"curl\", \"urllib\", \"wget\" ], \"osx\": [ \"curl\", \"urllib\" ], \"windows\": [ \"wininet\" ] }, 第四步 Ctrl + S保存即可； ▲ 添加代码\r\r第五步 重启 Sublime Text3 ，问题解决。 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:1:2","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"问题二 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:2:0","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"问题描述 Sublime Text3 在安装插件的时候出现 There Are No Packages Available For Installation。如下图： 原因是系统下载channel_v3.json包失败，解决办法是手动下载channel_v3.json包然后复制到相应的文件夹并修改目录即可。 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:2:1","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"解决方法 第一步 下载 channel_v3.json 包，可以自行百度或者点此下载； 第二步 打开Sublime Text3，依次点击导航栏上面 Preferences（首选项）-\u003e Browse Packages（浏览插件目录）； ▲ 首选项-浏览插件目录\r\r第三步 然后点击地址栏上面的 Sublime text3 进入上级目录： ▲ 进入上级目录\r\r第四步 点击 Lib； ▲ 进入Lib文件夹\r\r第五步 将上面下载的channel_v3.json复制粘贴进去； ▲ 拷贝文件到当前目录\r\r第六步 回到 Sublime Text3 中，依次点击 Preference（首选项）–\u003e Package Settings –\u003e Package Control –\u003e Settings ，打开设置文件； ▲ 打开设置文件\r\r第七步 在打开文件中添加下面以下代码，Ctrl + S保存即可； \"channels\": [ \"C:\\\\Users\\\\ASUS\\\\AppData\\\\Roaming\\\\Sublime Text 3\\\\Lib\\\\channel_v3.json\" ], ▲ 添加代码\r\r 注意:\r\r路径就是刚才粘贴 json 文件的地址，根据自己电脑改动填写；\r\r 第八步 重启 Sublime Text3，问题解决。 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:2:2","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"参考链接 package_control –\u003e issues#1220 ","date":"2021-10-17","objectID":"/posts/sublime-text-common-problem/:3:0","tags":["Sublime Text"],"title":"Sublime Text3 - 常见问题","uri":"/posts/sublime-text-common-problem/"},{"categories":["Z-Turn"],"content":"个人使用 Sublime Text3 过程中收集整理的一些技巧和方法。 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:0:0","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"安装插件、卸载插件 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:1:0","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"安装 Package Control 打开 Package Control 的网页 https://packagecontrol.io ，点击右侧的 Install Now 按钮; ▲ Package Control 官网\r\rPackage Control 为插件管理包，所以我们首先要安装它。有了它，我们就可以很方便的浏览、安装和卸载 Sublime Text 中的插件。官网安装步骤的一些相关说明，如下图所示： ▲ 官网安装步骤说明\r\r第一步 Win 系统，在Sublime Text中：同时按下Ctrl + Shift + P，会打开命令面板； 第二步 然后输入：Install Package Control ，按 Enter ，即会开始安装 Package Control； 第三步 等待 Package Control 安装完成。之后使用Ctrl + Shift + P打开命令板，输入PC应出现 Package Control：（如下图所示，即为安装成功） ▲ 安装成功\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:1:1","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"安装插件 同时按Ctrl + Shift + P打开命令板，输入PCIP, 然后下选点击 Package Control: Install Package。 ▲ 安装插件\r\r会出现一个输入框，输入你想要安装的插件，然后选择它，即可进行安装。 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:1:2","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"卸载插件 卸载比较容易，同时按Ctrl + Shift + P打开命令板，输入PCRP然后然后下选点击 Package Control: Remove Package ; ▲ 卸载插件\r\r然后选择你要卸载的插件，就可以卸载了。 ▲ 已安装插件\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:1:3","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"失去焦点自动保存 第一步 Preference（首选项）-\u003e Settings（设置）； ▲ 打开设置文件\r\r第二步 打开的界面是分两边的，左边是只读的不能编辑，在左边区域Ctrl + F（查找），然后在下面输入框里输入 save_on_focus_lost； ▲ 查找代码\r\r第三步 复制这行代码到右边的框里，然后把 false ,改成 true ，保存后关闭窗口，大功告成，今后就不用手动Ctrl + S了，Nice!！！ ▲ 修改完成\r\r Tips:\r\r懒得查找的，也可以直接复制下面这段代码粘贴到右边区域，保存关闭窗口即可；\r\r \"save_on_focus_lost\": true, ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:2:0","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"实现 Markdown 编辑和实时预览 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:0","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"安装所需的插件 按下Ctrl + Shift + P打开快速菜单，输入 pcip： ▲ 安装插件\r\r回车，等待数据更新，完成后会主动显示软件列表。 在里面输入以下软件名称并回车进行安装： Markdown Editing // Markdown编辑和语法高亮支持 OmniMarkupPreviewer //本地hsot实时预览 Markdown Preview // Markdown导出html预览支持 auto-save // 可自定义的自动保存功能 耐心等待操作完成，之后关闭并重新打开 Sublime Text 3. 前两个是标准的 Markdown 编辑与预览工具，第三个是实现实时预览的关键。 ▲ 安装好的 Markdown 插件\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:1","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"实现实时预览 方法一 安装 OmniMarkupPreviewer 插件; 在浏览器中预览：Ctrl + Alt + O 导出HTML：Ctrl + Alt + X 标记拷贝至剪贴板：Ctrl + Alt + C 便可以实现实时预览； 输出样式的修改 默认情况下，在目录 OmniMarkupPreviewer -\u003e Public 下，修改 Github.css 文件即可。 如果想要修改控制样式输出的 .css 文件，可以在首选项 -\u003e 插件设置 -\u003e OmniMarkupPreviewer -\u003e Settings-User 中修改 html_template_name 选项对应的文件名即可。 注意：\r\r上面的修改只是修改了你在浏览器中的预览的样式，如果想要同步修改输出的样式 默认情况下，在目录 OmniMarkupPreviewer -\u003e templates 下，修改 github-export.tpl 文件即可。 比如：想要修改输出 HTML 中内容区域的整体宽度，就需要同时修改 github.css 和 github-export.tpl 这两个文件中的 .container 的 max-width 的值即可。这样就可以保证在预览和导出时的样式都是一致的。\r\r 方法二 更改 MarkdownPreview.sublime-settings, 启用 enable_autoreload 依次点击 Preference（首选项）–\u003e Package Settings –\u003e Markdown Preview –\u003e Settings ，打开 Markdown Preview 设置文件； ▲ 打开设置文件\r\r输入以下代码： \"enable_autoreload\": true, ▲ 输入代码\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:2","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"如何打开预览 我们使用 Markdown Preview 插件来打开浏览器进行预览： 按下Ctrl + Shift + P打开快速菜单，键入 mp； ▲ 选择 Markdown Preview\r\r选择 Markdown; ▲ 选择 Markdown\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:3","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"自定义快捷键 直接在浏览器中预览效果的话，可以自定义快捷键：点击 Preferences（首选项）–\u003e 选择 Key Bindings User（快捷键设置）： ▲ 打开快捷键设置\r\r输入一下代码； { \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\": {\"target\": \"browser\", \"parser\":\"markdown\"} }, ▲ 输入代码\r\r保存后，直接输入快捷键：Alt + M就可以直接在浏览器中预览生成的HTML文件了。 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:4","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"实现浏览器自动刷新 对于浏览器而言，我们让它自动刷新只需在md文件最下面加入一行： \u003cmeta http-equiv=\"refresh\" content=\"0.1\"\u003e 0.1 负责表示刷新间隔，单位是秒，这是一个比较合适的设定值。 太快的话我们难以滚动页面，太慢的话有可能体验很差。 为了不让滚动时编辑的新文字触底，可以在最后一行的刷新代码之上打好几个占空间的行即可。 由于空行不会被解析，在每一行之前放一个字符#或者打三个以上的减号表示分割线。 ","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:5","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"md文档到html文件的自动更新 这里我们用到了一个叫做 Auto-Save 的插件，它可以针对一个文档实现空闲 x 秒后自动保存。 我们打开 Auto-Save 的默认设置和用户设置文件： 依次点击 Preference（首选项）–\u003e Package Settings –\u003e Auto-save –\u003e打开 Settings-Defualt 和 Settings-User; ▲ Auto-save设置\r\r将 Default 的内容复制粘贴到 User 里面，并复制以下代码到 User 设置文件： ▲ Default 文件\r\r▲ User 文件\r\r \"auto_save_delay_in_seconds\": 0.15, 经过实测，0.15 是一个比较能接受的值，不会对磁盘造成频繁读写的影响，延迟也不大。 最后就是打开本文档的自动保存功能了： 按下Ctrl + Shift + P打开快速菜单，键入 auto； Tips:\r\r如果是写带图片的文章，反复刷新会影响使用，我一般写博客是打开生成本地静态文件，用浏览器预览，采用失去焦点自动保存 ，体验更佳。\r\r","date":"2021-10-16","objectID":"/posts/sublime-text-manual/:3:6","tags":["Sublime Text"],"title":"Sublime Text3 - 使用手册","uri":"/posts/sublime-text-manual/"},{"categories":["Z-Turn"],"content":"很多的 Hugo 主题是没有自带搜索功能的，但是们为了方便用户浏览和查找内容是需要在网站上提供搜索功能。 主题 LoveIt 最新版已经内置了Lunr.js、algolia，这里我选择的是 Algolia ，只需要简单配置即可使用。 如何选择?\r\r以下是两种搜索的对比: lunr: 简单, 无需同步index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 \r\r ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:0:0","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"在 Algolia 端创建应用和索引 ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:1:0","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"创建新程序 点击 NEW APPLICATION，创建新程序，Name：自己起个名字，方案选择 FREE（免费），点击下一步； ▲ 创建新程序\r\r地区选择邻近地区（比如 HongKong）即可； ▲ 选择地区\r\r确认信息，完成创建； ▲ 确认创建\r\r","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:1:1","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"创建Index 在引导界面，选择新手引导，进行下一步； ▲ 创建 Index\r\r输入 Index name（例如自己的域名），提交即可； ▲ 命名Index name\r\r","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:1:2","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"API Keys 点击左上的小房子回到主页，点击 API Keys，查看 Key 信息； ▲ 点击 API Keys\r\r记住以下的 Keys，之后会用到； ▲ 记住 Key 信息\r\r","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:1:3","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"开始配置 ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:2:0","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"config.toml 把\\themes\\LoveIt\\exampleSite\\config.toml 文件，复制到Hugo项目根目录下（如果应用主题的时候已经操作过了可忽略这一步）修改以下信息，Ctrl+S 保存； [languages.zh-cn.params.search] ... [languages.zh-cn.params.search.algolia] index = \"index.zh-cn\" appID = \"PASDMWALPK\" searchKey = \"b42948e51daaa93df92381c8e2ac0f93\" ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:2:1","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"生成索引文件 导航到Hugo项目根目录下使用 Git bat```batch 执行 Hugo 命令； hugo 便会在\\public\\文件夹下生成 algolia.json文件； ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:2:2","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"上传索引文件至 Algolia 将刚刚生成的algolia.json文件上传至 Algolia 刚刚创建的 Index 下即可； 不过这样操作太过于繁琐了，每次更新博客都要手动上传一次，我们可以通过一个插件 atomic-algolia 来一键同步数据； 第一步 安装 atomic-aligolia ； 我们需要先确保我们已经安装了 npm 或者 yarn 包管理工具。 导航到Hugo项目根目录下右键使用 Git bat```batch 执行以下命令； npm install atomic-algolia --save 这会将 atomic-algolia 软件包安装到本地 node_modules 文件夹，并使其可用于您的 Hugo 项目。 第二步 配置完成以后，在Hugo项目根目录下右键使用 Git bat```batch 执行以下命令： ALGOLIA_APP_ID={{ YOUR_APP_ID }} ALGOLIA_ADMIN_KEY={{ YOUR_ADMIN_KEY }} ALGOLIA_INDEX_NAME={{ YOUR_INDEX NAME }} ALGOLIA_INDEX_FILE={{ PATH/TO/algolia.json }} npm run algolia 这个时候我们在 dashboard 中打开 Indices ，可以看到已经有几十条数据了。 ▲ Indices界面\r\r可还是不够便捷，请继续； 第三步 Algolia 是支持 .env 文件的，在 Hugo项目根目录中创建一个名为 .env 的新文件（就是这个文件名），并添加以下内容： ALGOLIA_APP_ID={{ YOUR_APP_ID }} ALGOLIA_ADMIN_KEY={{ YOUR_ADMIN_KEY }} ALGOLIA_INDEX_NAME={{ YOUR_INDEX_NAME }} ALGOLIA_INDEX_FILE={{ PATH/TO/algolia.json }} 第四步 现在，您可以通过在Hugo项目根目录下右键使用 Git bat```batch 执行更简单的一条命令来更新索引： npm run algolia Tips:\r\r如果某篇文章不想被索引的话，我们只需要在文件的最前面设置 index 参数为 false 即可。\r\r ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:2:3","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Z-Turn"],"content":"参考链接 zhaoqiang’s blog 水寒 ","date":"2021-10-15","objectID":"/posts/hugo-algolia-site-search/:3:0","tags":["Hugo","Algolia"],"title":"Hugo \u0026 Algolia 实现站内搜索","uri":"/posts/hugo-algolia-site-search/"},{"categories":["Windows"],"content":"解决 Windows 下移动硬盘无法弹出的问题。 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:0:0","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"问题描述 今天在弹出移动硬盘的时候，系统提示该设备正在使用中。 ▲ 弹出移动设备失败\r\r然后用火绒试了一下，发现是 E:\\$Extend\\$RmMetadata\\$TxfLog\\$TxfLog.blf 等文件正在被使用； ▲ 火绒-弹出移动设备\r\r这是一个索引文件目录； ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:1:0","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"解决办法 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:0","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第一招 打开 我的电脑 ； 选择移动硬盘点击「右键」，选择「属性」； 取消勾选 移动硬盘的索引： ▲ 我的电脑-硬盘盘符-属性\r\r▲ 确认更改属性\r\r等待完成，文件多可能时间会较长； 然后就可以正常弹出了。 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:1","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第二招 以此点击：属性 -\u003e 硬件 -\u003e 属性 -\u003e 策略 -\u003e 快速删除（默认） ▲ 我的电脑 -\u003e 硬盘盘符 -\u003e 属性\r\r▲ 快速删除（默认）\r\r","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:2","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第三招 打开任务管理器 -\u003e 性能 -\u003e 打开资源监视器 ▲ 打开资源监视器\"\r\r比如目前我电脑中硬盘是E盘，那么在搜索句柄中输入E: ▲ 搜索移动硬盘的盘符\"\r\r可以看到，Photoshop.exe中用到了E盘，结束使用到E盘的进程。就可以弹出。 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:3","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第四招 打开计算机管理 -\u003e 磁盘管理，右键，选择脱机，意思就是这个磁盘大家都别用了，系统也不能用。然后再弹出磁盘。 图1 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:4","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第五招 点击开始菜单，输入Eventvwr，打开事件查看器。 ▲ 事件查看器\"\r\r打开管理事件，下面的红色框中会显示当前操作的事件信息 图2 此时点击弹出硬盘，在该窗口中会显示如下，如果没有更新，按F5刷新一下 图3 可以看到，占用硬盘的是FoxitPhantom.exe 图4 打开任务管理器 -\u003e 详细信息，找到FoxitPhantom.exe，结束进程 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:5","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"第六招 $Extend并不是回收站的内容，它是一个隐藏的、系统级的元数据文件夹。感觉你的移动硬盘是索引数据出了问题，可以用自带的磁盘检查工具修复一下： ▲ 操作步骤\r\r磁盘 -\u003e 属性 -\u003e 工具 -\u003e 查错 -\u003e 开始检查 -\u003e 两个都勾上 -\u003e 开始 ▲ 磁盘检查\r\r","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:6","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"终极大招 关机 -\u003e 直接拔出U盘🤣 ","date":"2021-10-14","objectID":"/posts/mobile-hard-disk/:2:7","tags":["移动硬盘"],"title":"Win10 - 移动硬盘无法弹出的问题","uri":"/posts/mobile-hard-disk/"},{"categories":["Windows"],"content":"笔记本电脑电量莫名其妙地掉得很快，怎么办？这似乎是很多朋友都碰到过的问题。特别是一些用久了的笔记本电脑，更容易电量尿崩。那么要怎样才能确定电池有没有毛病？ 从 Windows 8 开始，Windows 系统就自带了电池检查的功能。 Windows 系统能够实时监测电量的变化，从而判断电池的实际容量，也能让你彻底了解电量的消耗情况，电池有没有衰减，一目了然。 ","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:0:0","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"生成电池电量报告 第一步 点击 Win+R ，输入 cmd ，确定； ▲ 运行窗口\r\r第二步 在命令提示符窗口中输入以下命令，直接复制粘贴即可； powercfg /batteryreport ▲ 命令提示符窗口\r\r第三步 回车即可生成电池电量报告； ▲ 生成文件\r\r第四步 根据显示文件路径找到电池电量报告文件； ▲ 找到生成文件所在路径\r\r第五步 用浏览器打开 battery-report.html 文件，就可以查看电池电量的详细信息了。 ","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:1:0","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"电池电量报告怎么看？ ","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:2:0","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"电池概况 主要看 DESIGN CAPACITY（电池的设计容量） 和 FULL CHARGE CAPACITY（满电容量） ,是通过读取电池信息得到的。我们可以粗略通过这两个数据判断电池是否有衰减，如果发现 FULL CHARGE CAPACITY（满电容量） 大幅小于 DESIGN CAPACITY（电池的设计容量） ，那么电池衰减可能就比较厉害了。但这个信息也不一定完全准确，甚至会不断浮动，要结合其他信息判断电池的衰减程度，且往下看。 ▲ 电池概况\r\r","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:2:1","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"使用时长 在 Usage history（使用历史记录） 一栏中，可以看到电脑每天 ACTIVE（活动） 和 CONNECTED STANDBY（连接待机） 的市场。有时候电量消耗太快是因为电脑莫名其妙唤醒，没有待机，在这里可以查看耗电太多是不是这一原因。 ▲ 活动和待机的时长\r\r","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:2:2","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"电池历史容量 这里可以看到电池的 FULL CHARGE CAPACITY（满电容量）和 DESIGN CAPACITY（电池的设计容量） 的数值变化。和前面读取而来的信息不同，这是通过耗电、充电计算得出的数据，可以和前面的数据相互参照，判断电池的衰减情况。 ▲ 电池容量变化\r\r最后，还可以看到现在电池实际能用的时长。仅供参考，准确度感人 ▲ 估计电池使用时间\r","date":"2021-10-07","objectID":"/posts/testing-laptop-battery/:2:3","tags":["电池"],"title":"如何检测笔记本电脑电池使用情况","uri":"/posts/testing-laptop-battery/"},{"categories":["Windows"],"content":"因键盘布局不符合个人使用习惯，键盘某个按键失灵等等情况，我们可以通过修改键位映射来很好的解决这些问题。 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:0:0","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"修改键位映射 操作步骤如下： ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:1:0","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"打开注册表编辑器 按下 Win+R 打开运行，输入 regedit ，点击确定。 ▲ 运行窗口\r\r","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:1:1","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"创建映射文件 打开后我们看到的界面是这样的。 ▲ 注册表界面\r\r我们需要在左侧目录树下定位到这个地方： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout ▲ 定位到 Keyboard Layout\r\r就是这个目录，注意不要点进它的两个子文件夹里。 在右侧空白处「右键」 –\u003e 新建，选择「二进制值」。 并且给建好的文件取名为 Scancode Map 。 ▲ 创建二进制值\r\r▲ 创建成功\r\r","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:1:2","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"修改注册表键值 打开 Scancode Map 文件; ▲ 编辑 Scancode Map\r\r前 8 个字节是版本信息，输入 8 组 00 即可； ▲ 输入 8 组 00\r\r接下来 4 组数值表示映射的数量，填写 03 00 00 00 。其中 03 表示有 2 组映射。 ▲ 输入映射数量\r\r若要映射多组，只需增加相应的值即可，如映射 3 组填写为 04 ，映射 5 组填写为 06 ，其最小值为 02 ，表示只映射 1 组。 接下来每 4 组数值代表一个映射，每一个映射格式如下：【 A 】 【 B 】 【 B 】映射为【 A 】，即按下【 B 】键时，则按下原来的 【 A 】键。 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:1:3","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"开始修改 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:2:0","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"制定方案 因为使用Mac习惯用用大拇指按 Command 键； ▲ Mac键盘布局\r\r换Win环境用Ctrl不太顺手，故把键盘左侧Win（徽标键）和Ctrl键互换，把Win（徽标键）用作Ctrl键使用。 原按键 映射为 左 Ctrl 左 Win 左 Win 左 Ctrl ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:2:1","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"查阅键码 接下来，只要把对应键位码代入进去就好了！ 每个按键的修改占 4 个字节：右边 2 字节为原扫描码，左边 2 字节为修改后的扫描码。 通过查阅键位表得知： 按键 扫描码 Left Ctrl 00 1D Left Windows E0 5B 注意\r\r在注册表中输入时，需要将扫描码的高低字节交换一下。\r\r 即: 按键 扫描码 输入值 Left Ctrl 00 1D 1D 00 Left Windows E0 5B 5B E0 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:2:2","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"输入键值 输入数值后，最后 4 个 0 字节为固定结束符，以 00 00 00 00 结尾，就完成了。 ▲ 映射完成\r\r","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:2:3","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"完成 最后，重启电脑即可生效。需重启，注销无用。 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:2:4","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"常见问题 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:3:0","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"如何让某个键失效？ 如果想要某个键失效，将它的扫描码映射为 00 00 即可。 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:3:1","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"如何撤销更改？ 若需要恢复键盘键位为默认布局，只需删除我们新建的 Scancode Map 键值就可以了。 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:3:2","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"附录:《键位表》 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:0","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"功能区 键位 扫描码 Esc 00 01 F1 00 3B F2 00 3C F3 00 3D F4 00 3E F5 00 3F F6 00 40 F7 00 41 F8 00 42 F9 00 43 F10 00 44 F11 00 57 F12 00 58 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:1","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"第一排数字键盘 键位 扫描码 ` ~ 00 29 _ 00 0C = + 00 0D 0 ) 00 0B 1 ! 00 02 2 @ 00 03 3 # 00 04 4 $ 00 05 5 % 00 06 6 ^ 00 07 7 \u0026 00 08 8 * 00 09 9 ( 00 0A ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:2","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"字母 键位 扫描码 A 00 1E B 00 30 C 00 2E D 00 20 E 00 12 F 00 21 G 00 22 H 00 23 I 00 17 J 00 24 K 00 25 L 00 26 M 00 32 N 00 31 O 00 18 P 00 19 Q 00 10 R 00 13 S 00 1F T 00 14 U 00 16 V 00 2F W 00 11 X 00 2D Y 00 15 Z 00 2C ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:3","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"符号 键位 扫描码 [ { 00 1A ] } 00 1B \\ ; : 00 27 ’ ” 00 28 , \u003c 00 33 . \u003e 00 34 / ? 00 35 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:4","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"小键盘区 键位 扫描码 Num Lock 00 45 / 00 35 * 00 37 - 00 4A + 00 4E Enter E0 1C 0 00 52 1 00 4F 2 00 50 3 00 51 4 00 4B 5 00 4C 6 00 4D 7 00 47 8 00 48 9 00 49 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:5","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"操作按键 键位 扫描码 Tab 00 0F Caps Lock 00 3A Space 00 39 Backspace 00 0E Enter 00 1C Left Ctrl 00 1D Left Shift 00 2A Left Alt 00 38 Left Windows E0 5B Right Ctrl E0 1D Right Shift 00 36 Right Alt E0 38 Right Windows E0 5C Up E0 48 Down E0 50 Left E0 4B Right E0 4D ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:6","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Windows"],"content":"附加按键 键位 扫描码 PrtSc E0 37 Scroll Lock 00 46 Insert E0 52 Delete E0 53 HOME E0 47 End E0 4F Page Up E0 49 Page Down E0 51 ","date":"2021-09-29","objectID":"/posts/windows10-registry-key-mapping/:4:7","tags":["注册表","键盘"],"title":"Win10 - 用注册表修改键位映射","uri":"/posts/windows10-registry-key-mapping/"},{"categories":["Work"],"content":" 享受国家补贴的职业资格证书申请名单是哪些？享受国家补贴的职业资格证书申请条件是什么？享受国家补贴的职业资格证书申请流程如何？\r","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:0:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"申领补贴应具备什么条件？ 1. 申领人于2019年1月1日至2020年12月31日期间，取得专业技术类国家职业资格证书（以证书标注的批准日期为准）；该证书可在人社部人事考试中心全国联网查询系统或四川省人力资源和社会保障厅官网 http://rst.sc.gov.cn/ 「人事考试专栏」等全国联网查询系统查询； 2. 且已在成都市依法参加失业保险，累计缴纳失业保险费12个月（含视同缴费年限）及以上的企业在职职工。 ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:1:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"申领时限有何规定？ 符合申领条件的企业在职职工，应按以下时限申领技术技能提升补贴： 1. 证书标注的批准日期在2019年1月1日至2019年12月31日期间的，应在2020年12月31日前申领。 2. 证书标注的批准日期在2020年1月1日至2020年12月31日期间的，应在证书批准之日起12个月内申领。 ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:2:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"补贴是多少？ 1. 企业在职职工取得专业技术类职业资格证书补贴标准： 证书等级 补贴标准 初级 1000元 中级 1500元 高级 2000元 2. 证书未标注高级、中级、初级或未分等级的，按四川省人力资源和社会保障厅 《关于部分专业类职业资格可聘相应专业技术职务的通知》（川人社办发〔2018〕122号）明确的可聘相应专业技术职务对应执行补贴标准； 即： 取得职业资格可聘高级、中级、初级（助理、员级）专业技术职务的，补贴标准分别为2000元、1500元、1000元； 3. 未明确可聘相应专业技术职务的，补贴标准按1000元执行。对应等级有多个的，按就高原则执行。 4. 同一专业技术同一等级只能申请并享受一次技术技能提升补贴。 ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:3:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"如何申领？ 申领人员登录人力资源和社会保障部人事考试中心全国联网查询系统或四川省人力资源和社会保障厅官网 http://rst.sc.gov.cn/ “人事考试专栏”等全国联网查询系统，查询本人取得的专业技术类职业资格证书是否已在网上公布。 已在全国联网查询系统查询到证书的企业在职职工，在规定申领时限内，下载填写 《技术技能提升补贴个人申请表》，并携带本人居民身份证（社会保障卡）、证书原件及复印件、网上证书查询截图打印件，到本人失业保险参保地或企业所在地的区（市）县就业局提出技术技能提升补贴申请。 说明：\r\r 市本级参保人员向市就业局或就近向企业所在地区（市）县就业局提交申报资料，区（市）县参保人员向当地就业局提交申报资料。 经职工自愿申请，企业可填报《委托申请技术技能提升补贴汇总表》，代职工向市或区（市）县就业局集中提交申报资料。 跨失业保险统筹地区迁转的企业职工申请技术技能提升补贴，应持原参保地失业保险经办机构开具的未享受补贴有效证明。 \r\r 政策解读部门： 市人社局 / 12333 / 区市县经办窗口 政策解读电话： 12333 / 87706279 / 87706585 经办窗口地址及电话详附件 附件： 市和区（市）县技术技能提升补贴经办地址及电话联系表 名称 地址 咨询电话 成都市就业局 二环路北一段4号一楼失业保险经办窗口 12333 87706279 87706585 锦江区就业局 成都市锦江区金石路166号天府宝座A座4楼9号、10号窗口 86613808 86628581 青羊区就业局 成都市青羊区清江中路20号 67826205 金牛区就业局 金牛区茶店子西街36号金璐天下一单元2-2就业服务大厅 86797357 武侯区就业局 武侯区武科西五路360号武侯政务中心就业服务大厅 85058067 成华区就业局 成都市双林巷二号附三号成华区就业社保医保服务中心二楼十四号窗口 8437158684313871 高新区人社局就业处 成都高新区天府大道北段18号高新国际广场A座509 8533903385339319 天府新区社事局就业和社会保障处 天府大道南段1632号 68381080 龙泉驿区就业局 龙泉驿区长柏路248号失业保险经办窗口 84853110 青白江区就业局 青白江区怡湖西路118号307房间、凤凰东六路187号 8369283683600248 新都区就业局 新都区清源路90号人力资源市场2楼 89399318 温江区就业局 温江区五环广场七号楼人力资源市场三楼305室 82721661 都江堰市就业局 都江堰市天府大道639号—楼 61929058 彭州市就业局 彭州市回龙西路18号 64287303 邛崃市就业局 邛崃市凤凰大道567号新市民中心9楼培训科 88769969 崇州市就业局 崇州市崇阳街道永康东路385号 82216900 金堂县失业保险办公室 金堂县赵镇迎宾大道一段388号 84997157 双流区就业局 双流区东升街道正通路555号 85736257 郫都区就业局 郫都区郫筒镇何公路9号 87928971 大邑县就业局 大邑县晋原街道邑新大道192号 88280755 蒲江县就业局 蒲江县鹤山街道工业南路16号 88523551 新津县就业局 新津县普兴镇山河村4组 82556412 简阳市就业局 简阳市射洪坝街道松林路333号简阳市人力资源和社会保障综合服务中心二楼简阳市就业服务中心失业保险科 27229686 ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:4:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"总结 1. 带上你们的社保卡（要开通银行卡功能），办完了开通也可以； 2. 身份证原件复印件； 3. 社会保障和人力资源厅，人事考试专栏证书查询的页面打印出来；（我去的时候是在柜台电脑查询然后截图保存的） 4. 带上证书原件，复印件； 5. 然后就去你社保购买地的区就业局，拿号排队，申请，会给你一张表，填完就OK，等3-6个月。（我的大概三个月到账） ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:5:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"附件下载 ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:6:0","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"附件一：技术技能提升补贴个人申请表 百度云\r\r 链　接： https://pan.baidu.com/s/1WTlH2Z1EcaiHdc9zTkSOHw 提取码： by3f \r\r 蓝奏云\r\r 链　接： https://cajun.lanzoui.com/il5Vgwo2upi 密　码： g5is \r\r ","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:6:1","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"附件二：四川省专业技术类职业资格可聘专业技术职务对应表 百度云\r\r 链　接： https://pan.baidu.com/s/1t7IPrrnJxmyt-ierjMJbog 提取码： 6835 \r\r 蓝奏云\r\r 链　接： https://cajun.lanzoui.com/iaS2Jwo2uqj 密　码： 6zh4 \r\r","date":"2021-09-28","objectID":"/posts/professional-qualification-subsidy/:6:2","tags":["职业资格证书","技能补贴"],"title":"如何申领专业技术职业资格提升补贴","uri":"/posts/professional-qualification-subsidy/"},{"categories":["Work"],"content":"图纸集是一个图纸管理功能，可以用于管理个人图纸或是项目图纸，也就是说图纸集是来自多个图形文件的图纸的有组织的集合。 接下来，我将从以下3个方面带大家系统的认识一下，到底什么是图纸集？对我们的制图工作到底能提供哪些便利和帮助呢？ 如何理解图纸集，注意要点有哪些？ 如何创建与编辑图纸？ 批量打印和图纸集输出有什么区别？ ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:0:0","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"前言 如何理解图纸集，注意要点有哪些？ 图纸集，简单来说它就是集合你需要的 CAD 文件在一个管理器里面，你不需要在一个个文件打开点击了; 我们从以下2个方面来理解这个概念： ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:1:0","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"理解图纸集 先来认识一下图纸集文件及操作面板： ▲ 图纸集文件\r\r图纸集文件是一个 .DST 格式的文件 ▲ CAD图纸集界面\r\r","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:1:1","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"图纸集到底是什么？ 图纸集是一个图纸管理功能，可以用于管理个人图纸或是项目图纸； 图纸集是来自多个图形文件的图纸的有组织的集合； 可以将图纸集作为一个单元进行管理、传递、发布和归档。 小结一下： 利用图纸集，可以更加高效地修改、编辑图纸。 管理者也可以更直观了解项目整体进程，相当于通过电子目录监控项目进度。 ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:1:2","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"掌握图纸集需要注意的要点 第一点 要注意打印设置，图纸集的输出都是需要提前把图纸打印设置完成。 ▲ CAD打印界面\r\r第二点 要注意每个布局空间只能有一个图框作为参照点； 关于图纸集输出，每个布局只识别一个打印预设范围，即每一个布局图纸集只能输出一张图纸,所以我们对于每个布局的设置都要提前完成； 我们每个布局的图框设置这样操作看似费时费力，但是到后期打印的时候会节省更多时间。 ▲ CAD布局\r\r第三点 要注意每个布局的图框位置尽量放置在坐标 0,0,0 点，这不是必须操作，但是这个是一个绘图的好习惯。 ▲ CAD布局原点\r\r","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:1:3","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"图纸集的使用方法 如何创建与编辑图纸？ 在了解了图纸集和概念和注意要点后，我们来看看图纸集应该“怎么用”。 我们从以下2个方面来为你解析它的使用技巧： ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:2:0","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"创建图纸集 创建图纸集的方式常用有2种： 1、 菜单栏「文件」–\u003e 新建图纸集； 2、 快捷键 Ctrl+4 调取管理器面板，新建图纸集。 具体步骤如下： 第一步： Ctrl+4 调出图纸集管理面板； ▲ 图纸集管理面板\r\r第二步： 打开选项中选择新建图纸集； ▲ 新建图纸集\r\r第三步： 选择现有图形，点击下一步； ▲ 创建图纸集\r\r第四步： 选择现有图形，点击下一步； ▲ 图纸集命名\r\r▲ 创建图纸集\r\r▲ 完成创建图纸集\r\r第五步： 此时 dop-实战指南 图纸集已经创建完成； ▲ 图纸集创建成功\r\r▲ 图纸集文件\r\r","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:2:1","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"快速编辑图纸集 对图纸集进行图纸增加和减少，首先第一步是要把所有的布局拆分完成，保证每一个布局内可打印一张图纸。 ▲ CAD布局\r\r其次是对于每个布局内的图纸进行打印设置； ▲ CAD打印界面\r\r如果以上两步完成，就可以对图纸集进行编辑了。 步骤如下： 第一步: 在布局名称处，右键选择将布局作为图纸输入选项； 第二步： 选择要增加到图纸集的图纸，点击输入选定内容，此时需要注意不建议勾选将文件名作为图纸标题的前缀； 第三步： 选择要增加到图纸集的图纸，点击输入选定内容，此时需要注意不建议勾选将文件名作为图纸标题的前缀； 第四步： 选择图纸右键可对单张图纸进行编辑； 第五步： 选择图纸右键可对单张图纸进行编辑； 第六步： 选择图纸右键可以重命名并重新编号图纸等操作； ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:2:2","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"拓展知识 ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:3:0","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"什么情况下使用批量打印？ 批量打印市面上常用的打印机有以下 2 种： ▲ 第1种\r\r▲ 第2种\r\r两种打印机的输出结果都是一致的，只是对部分设置方式有些不同而已。 但是不管使用哪一种批量打印机，在打印前都要对图纸进行打印设置，完成之后再进行批量打印。 ▲ CAD打印界面\r\r那么都说到这了，什么时候用批量打印呢？ ▲ 一个布局多张图纸排版\r\r 当项目体量相对较小，图纸数量不多的情况下； 不想把图纸拆分布局的项目图纸； 不需要二次或者多次打印的项目图纸； 个人觉得以上三点可以使用批量打印的方式来解决图纸输出。 ","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:3:1","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"什么情况下使用图纸集输出？ 图纸集的作用一方面是为了图纸输出便捷和快速，另一方面也是为了适用于项目进度管理操作，所以图纸集并不仅限于图纸打印输出。 所以，通常情况下，如果项目是需要团队多个成员同时协作来完成图纸绘制的话，就可以使用图纸集来进行统一的图纸管理。 所以图纸集输出与批量打印机的区别，简单来讲可以分为以下三点： 批量打印对于少量图纸或者CAD文件比较少的项目优势比较明显，速度相对较快； 批量打印必须把CAD文件全部打开进行输出，图纸集只需要打开一张图纸就可以打印全部图纸，所以这一方面，图纸集相对占优； 图纸集可以对整套图纸进行单张打印或者全部打印，也可以进行挑选打印，这一点批量打印要想实现就比较困难； 综上，两种图纸输出方式各有优势，可以根据不同的项目需求来选择合适的图纸输出方式。 ▲ CAD图纸集发布\r\r","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:3:2","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":["Work"],"content":"总结 最后我们通过一张导图来总结一下知识要点： ▲ 思维导图\r","date":"2021-09-24","objectID":"/posts/cad-drawings-instructions/:4:0","tags":["Auto CAD"],"title":"Auto CAD - 图纸集的正确使用方法","uri":"/posts/cad-drawings-instructions/"},{"categories":null,"content":"前言 本博客使用的是Hugo的LoveIt主题，本文也是基于该主题而写的，不过Hugo的美化步骤应该大同小异，版本如下： hexo: 3.8.0 hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 请注意，本文的所有功能都离不开两个新增加的文件：_custom.scss和custom.js，部分功能还需要jquery，在第一章中会提及如何引入。 另外本文篇幅太长，阅读体验不好，将其进行分章如下： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章 Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章 Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章 ","date":"2021-08-24","objectID":"/lewky/hugo-3.3/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章","uri":"/lewky/hugo-3.3/"},{"categories":null,"content":"显示最近更新的十篇文章 在归档页面只能看到所有以创建时间递减排序的文章列表，可以用下面的方法在归档页面开头增添十篇最近更新的文章。 首先在配置文件config.toml中添加新的变量： [params.section] # 显示最近更新文章的数量 lastUpdatedSize = 15 接着将/themes/LoveIt/layouts/_default/section.html拷贝到/layouts/_default/section.html，打开拷贝后的文件，找到如下： {{- /* Paginate */ -}} 在这行代码的上方位置插入下面的代码： {{- /* Last Modified */ -}} {{- $lastUpdatedSize := .Site.Params.section.lastUpdatedSize -}} {{- if $lastUpdatedSize -}} {{- if .Pages -}} {{- $pages := .Pages.ByLastmod.Reverse -}} \u003ch3 class=\"group-title\"\u003e最近更新 \u003csup\u003e{{- $lastUpdatedSize -}}\u003c/sup\u003e\u003c/h3\u003e {{- range first $lastUpdatedSize $pages -}} \u003carticle class=\"archive-item\"\u003e \u003ca href=\"{{ .RelPermalink }}\" class=\"archive-item-link\"\u003e {{- .Title -}} \u003c/a\u003e \u003cspan class=\"archive-item-date2\"\u003e {{- \"2006-01-02\" | .Lastmod.Format -}} \u003c/span\u003e \u003c/article\u003e {{- end -}} {{- end -}} {{- end -}} 然后在/assets/css/_custom.scss中添加如下样式代码： .archive-item-date2 { color: #a9a9b3; } 同时为了方便区分开创建时间和最近更新时间，在每篇文章中也新增了最近更新时间这个meta。将/themes/LoveIt/layouts/posts/single.html拷贝到/layouts/posts/single.html，打开拷贝后的文件，找到如下： {{- with .Site.Params.dateformat | default \"2006-01-02\" | .PublishDate.Format -}} \u003ci class=\"far fa-calendar-alt fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003ctime datetime=\"{{ . }}\"\u003e{{ . }}\u003c/time\u003e\u0026nbsp; {{- end -}} 将上面的代码改为如下： {{- with .Site.Params.dateformat | default \"2006-01-02\" | .PublishDate.Format -}} \u003ci class=\"far fa-calendar fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003ctime datetime=\"{{ . }}\"\u003e{{ . }}\u003c/time\u003e\u0026nbsp; {{- end -}} {{- with .Site.Params.dateformat | default \"2006-01-02\" | .Lastmod.Format -}} \u003ci class=\"far fa-calendar-plus fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003ctime datetime=\"{{ . }}\"\u003e{{ . }}\u003c/time\u003e\u0026nbsp; {{- end -}} ","date":"2021-08-24","objectID":"/lewky/hugo-3.3/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章","uri":"/lewky/hugo-3.3/"},{"categories":null,"content":"参考链接 Lists of Content in Hugo ","date":"2021-08-24","objectID":"/lewky/hugo-3.3/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章","uri":"/lewky/hugo-3.3/"},{"categories":null,"content":"前言 本博客使用的是Hugo的LoveIt主题，本文也是基于该主题而写的，不过Hugo的美化步骤应该大同小异，版本如下： hexo: 3.8.0 hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 请注意，本文的所有功能都离不开两个新增加的文件：_custom.scss和custom.js，部分功能还需要jquery，在第一章中会提及如何引入。 另外本文篇幅太长，阅读体验不好，将其进行分章如下： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章 Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章 Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"Valine评论系统添加邮件通知和QQ提醒 LoveIt主题自带的Valine没有邮件通知和QQ提醒功能，所以需要额外使用Valine的增强版Valine-Admin来进行功能增强。网上有好几个版本，我这里选择了目前由@W4J1e维护的Hexo-Valine-ASPush项目，由于我需要自定义部分改动，所以自己fork了一份：valine-admin-custom。如果需要进行自定义改动的，可以继续fork我的这个项目。 下面开始教程。这里默认你已经使用了Valine作为评论系统，如果还没有对应的LeanCloud应用请自行移步Valine的官方文档： Valine快速开始。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"部署LeanCloud云引擎 登陆你的LeanCloud账号，进入你的应用，选择：云引擎 -\u003e 部署 -\u003e Git部署，然后输入下面的仓库地址： https://github.com/lewky/valine-admin-custom.git 然后点击部署按钮，等待云引擎将上面的仓库代码克隆下来。接下来需要设置环境变量。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"设置环境变量 点击云引擎 -\u003e 设置，选择添加新变量，将下列变量一一加入。 变量 示例 说明 SITE_NAME xxx [必填] 网站名称 SITE_URL https://xxx.com [必填] 网站首页地址，地址末尾不要加/ SMTP_USER xxxxxx@qq.com [必填] SMTP登录用户，一般为邮箱地址 SMTP_PASS ccxxxxxxxxch [必填] SMTP授权码，不是邮箱的登陆密码，请自行查询对应邮件服务商授权码的获取方式 SMTP_SERVICE QQ [必填] 邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多 SENDER_NAME xxx [必填] 发件人 SENDER_EMAIL xxxxxx@qq.com [必填] 发件邮箱 ADMIN_URL https://xxx.leanapp.cn/ [建议] Web主机二级域名（云引擎域名），用于自动唤醒 BLOGGER_EMAIL xxxxx@gmail.com [可选] 博主通知收件地址，默认使用SENDER_EMAIL AKISMET_KEY xxxxxxxx [可选] Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾 TEMPLATE_NAME default [可选] 设置提醒邮件主题，目前内置了多款主题：default、rainbow、custom1、custom2 COMMENT #post-comment [可选] 评论 div 的 ID 名，直接跳转到评论位置 设置好变量后，需要重启实例。在部署页面点击重启按钮即可，每次更改变量后都需要重启才能生效。如果对应的Git仓库代码发生变更，需要清除部署，重新克隆代码才能生效。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"后台评论管理 首先需要设置管理员信息。在部署云引擎成功后，访问管理员注册页面https://云引擎域名/sign-up，注册管理员登录信息，如：https://cloud.lewky.cn/sign-up 注册成功后可以在存储 -\u003e 结构化数据 -\u003e _User里看到多出来一条数据，正是刚刚我们注册成功的用户。 注：使用原版Valine如果遇到注册页面不显示直接跳转至登录页的情况，请手动删除_User表中的全部数据。 注册成功后，就可以通过这个注册的用户访问后台评论管理页面：https://云引擎域名 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"配置QQ提醒 前往Qmsg酱官网，点击管理台登陆账号，选择其中任意一个你想使用的Qmsg酱(QQ机器人)，并加其为QQ好友 点击菜单栏里Qmsg酱旁边的QQ号码，添加你想要接收信息推送的QQ号码 点击 菜单栏里的KEY，这里有一串字符串等下要添加到LeanCloud的环境变量里 官网里提供了所有的接口文档，你可以先行通过一个简单的测试来验证你的QQ能不能接收到推送，如下： 在浏览器新打开一个页面，在地址栏里输入https://qmsg.zendee.cn/send/，然后把你管理台里的KEY添加到地址栏末尾，然后在末尾继续加上?msg=test，接着按下回车键，这里表示让Qmsg酱发送test给你的QQ号码 如果发送成功，你会发现浏览器页面内容变成： {\"success\":true,\"reason\":\"操作成功\",\"code\":0,\"info\":{}} 与此同时，你的QQ号码会收到你加的那个Qmsg酱QQ好友的消息。这表明推送正常，可以往下走了。 前面我们已经在LeanCloud云引擎里配置了一部分必须的环境变量，为了使用QQ提醒功能，还想要额外配置两个变量： 变量 示例 说明 QMSG_KEY xxxxxxx [必填] Qmsg酱的KEY QQ xxxxxxx [必填] Qmsg酱发送的 qq，支持多个，用英文逗号分隔即可 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"解决云引擎休眠 LeanCloud云引擎有自动休眠机制，这是官方的说法：点击查看 目前实现了两种云函数定时任务来解决云引擎休眠的问题： 自动唤醒，定时访问Web APP二级域名防止云引擎休眠； 每天定时检查过去24小时内漏发的邮件通知。 进入云引擎 -\u003e 定时任务，创建两个定时任务： 选择self-wake云函数，Cron表达式为0 */25 7-23 * * ?，表示每天早7点到晚12点每隔25分钟访问云引擎。 选择resend-mails云函数，Cron表达式为0 10 7 * * ?，表示每天7点10分检查过去24小时内漏发的通知邮件并补发。 云引擎还有个国际版的，要注意表达式的时区问题，不过表达式填写后会显示每天几点操作，应该不会有人填错吧。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:2:5","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"解决免费版云引擎流控问题 免费版云引擎会在达到最大启动时长限制（好像是持续运行18个小时），进入强制休眠状态。在休眠状态时无法通过我们定义的自动唤醒函数来自动重启，可以在日志里看到报错如下： {\"error\":\"因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠 https://url.leanapp.cn/dwAEksv\"} 但是如果在休眠期间，云引擎又受到外界的一次访问，就可以再次激活进入启动状态，这时候就可以通过自动唤醒函数来每隔半小时自我唤醒一次了。也就是说，当云引擎进入强制休眠状态后，我们通过外部的定时任务，来每天定时访问云引擎绑定好的域名（也就是你的后台评论管理页面地址），就可以继续白嫖了。 那么去那里弄免费的外部定时任务呢？实现方案有不少，比如： ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"方案一：GitHub + Actions 借助GitHub + Actions，自动部署也是用这种方案，不过这种方案有个缺点，就是每次执行action都会生成一次对应的commit，对我来说不是理想方案，这里就不介绍了。有兴趣的可以参考这篇文章 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:3:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"方案二：借助国内其他的免费云函数或定时任务 利用国内的云函数，自己写一个脚本。然后定时监控即可。或者宝塔、自己服务器的定时任务都是可以的。说穿了，就是用其他的类似于LeanCloud云引擎类似的免费容器的云函数或者定时任务来唤醒LeanCloud的云引擎，那如果其他的免费容器也有类似的强制休眠机制怎么办呢？ 很简单，互相套娃即可。让一个免费的容器A通过定时任务在非休眠期间去唤醒另一个强制休眠中的容器B，如果容器A强制休眠了就让另一个非休眠的容器B去唤醒。只要两个免费容器的强制休眠时间错开即可完成这一白嫖循环O(∩_∩)O~ ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:3:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"方案三：cloudflare的Workers cloudflare的Workers可以在线定义脚本，通过链接即可触发脚本，具体做法请参考这篇文章 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:3:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"方案四：借助cron-job平台进行每日定时唤醒 通过cron-job平台进行监控，这是注册地址 本人使用的方案四，该方案其实和方案二是一回事。这里简单介绍下怎么用，注册该平台可能需要tī zi，请自行解决。 注册时，Time zone（也就是时区）请选择Asia/Shanghai，否则后续在定义cron表达式时需要自己换算时区时间。如果注册页面最下面的谷歌人机验证出不来，你懂的，请自行解决。 注册后需要登录邮箱通过邮件激活账号，没收到邮件的请检查你的垃圾箱，邮件可能在垃圾箱里。 激活账号后登录你的账号，访问这个地址：https://cron-job.org/en/members/jobs/ 点击页面上的Create cronjob按钮，创建你的定时任务，各个必填配置项如下表： 变量 示例 说明 Title xxx 定时任务名称 Address https://xxx.com 访问的地址，请填写LeanCloud云引擎绑定的域名地址，也就是那个后台评论管理页面地址https://云引擎域名 Schedule 按需选择 定时任务的执行时间和频率，这里建议使用第二种：Every day at 6 : 50 。具体每天几点执行请自行决定。 Notifications 按需选择 执行失败时的通知提醒 Save responses 按需选择 保存执行定时任务的日志 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:3:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"使用Waline替代Valine评论系统 鉴于Valine的安全问题，以及LeanCloud云引擎的限流问题，改用Waline + Vercel来作为评论系统，Waline是基于Valine进行开发的，所以迁移成本较低。这是Waline的官方文档，有很详细的配置、迁移等教程。 由于LoveIt主题没有引入Waline，所以这里记录下如何引入Waline，以及遇到的相关问题的解决方法。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"站点配置文件添加相关变量 打开站点配置文件，找到Valine相关变量[params.page.comment.valine]，在该节点下面添加Waline相关的变量 [params.page.comment.waline]： # Waline comment config (https://waline.js.org/) # Waline 评论系统设置 (https://waline.js.org/) [params.page.comment.waline] enable = true #js = \"https://cdn.jsdelivr.net/npm/@waline/client@latest\" js = \"https://cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js\" meta = ['nick','mail','link'] # 评论者相关属性 requiredFields = ['nick','mail'] # 设置必填项，默认匿名 placeholder = \"提交评论较慢，请等待几秒~\" # 评论框占位提示符 serverURL = \"\" # Waline的服务端地址（必填） #imageHosting = # 图床api，如果允许评论框上传图片 avatar = \"retro\" # Gravatar头像 avatarCDN = \"https://sdn.geekzu.org/avatar/\" # Gravatar头像CDN地址，不建议使用loli源 pageSize = 10 # 评论列表分页，每页条数 lang = \"zh-CN\" # 多语言支持 visitor = true # 文章访问量统计 highlight = true # 代码高亮 记得把原本的评论系统的enable设置为false，改用新加的Waline。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"修改comment.html模板文件 将\\themes\\LoveIt\\layouts\\partials\\comment.html拷贝到\\layouts\\partials\\comment.html，打开拷贝后的文件，找到Valine相关的代码部分，然后在其下方添加Waline的代码，如下： {{- /* Waline Comment System */ -}} {{- $waline := $comment.waline | default dict -}} {{- if $waline.enable -}} \u003cdiv id=\"waline\"\u003e\u003c/div\u003e \u003cscript src='{{ $waline.js }}'\u003e\u003c/script\u003e \u003cscript\u003e new Waline({ el: '#waline', meta: {{ $waline.meta }}, placeholder: {{ $waline.placeholder }}, serverURL: {{ $waline.serverURL }}, avatarCDN: {{ $waline.avatarCDN }}, requiredFields: {{ $waline.requiredFields }}, pageSize: {{ $waline.pageSize }}, avatar: {{ $waline.avatar }}, lang: {{ $waline.lang }}, visitor: {{ $waline.visitor }}, highlight: {{ $waline.highlight }} }); \u003c/script\u003e {{- end -}} Waline内置微博表情，如果想自定义表情包的，可以继续添加两个属性emojiCDN和emojiMaps到上面的代码里，具体做法可以参考官方文档 - 自定义表情。 这里顺便介绍下@小康大佬整理的一个很方便的表情包站点：表情速查，里面有很多类别的表情包，还有对应的快速引入语法链接，以及用于配置Valine、Waline等评论系统表情包映射的JSON！ 这里还有一个专门爬取b站表情包的项目仓库：lrhtony / BiliEmoji ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加评论统计到文章元数据 将/themes/LoveIt/layouts/posts/single.html拷贝到/layouts/posts/single.html，打开拷贝后的文件，找到如下： \u003cdiv class=\"post-meta-line\"\u003e {{- with .Site.Params.dateformat | default \"2006-01-02\" | .PublishDate.Format -}} \u003ci class=\"far fa-calendar-alt fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003ctime datetime=\"{{ . }}\"\u003e{{ . }}\u003c/time\u003e\u0026nbsp; {{- end -}} \u003ci class=\"fas fa-pencil-alt fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ T \"wordCount\" .WordCount }}\u0026nbsp; \u003ci class=\"far fa-clock fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ T \"readingTime\" .ReadingTime }}\u0026nbsp; {{- $comment := .Scratch.Get \"comment\" | default dict -}} {{- if $comment.enable | and $comment.valine.enable | and $comment.valine.visitor -}} \u003cspan id=\"{{ .RelPermalink }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ .Title }}\"\u003e \u003ci class=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspan class=leancloud-visitors-count\u003e\u003c/span\u003e\u0026nbsp;{{ T \"views\" }} \u003c/span\u003e\u0026nbsp; {{- end -}} \u003c/div\u003e 将上面的代码改为如下代码： \u003cdivclass=\"post-meta-line\"\u003e{{-with.Site.Params.dateformat|default\"2006-01-02\"|.PublishDate.Format-}}\u003ciclass=\"far fa-calendar-alt fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003ctimedatetime=\"{{ . }}\"\u003e{{.}}\u003c/time\u003e\u0026nbsp;{{-end-}}\u003ciclass=\"fas fa-pencil-alt fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{T\"wordCount\".WordCount}}\u003ciclass=\"far fa-clock fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{T\"readingTime\".ReadingTime}}\u0026nbsp;{{-$comment:=.Scratch.Get\"comment\"|defaultdict-}}{{-if$comment.enable|and$comment.valine.enable|and$comment.valine.visitor-}}\u003cspanid=\"{{ .RelPermalink }}\"class=\"leancloud_visitors\"data-flag-title=\"{{ .Title }}\"\u003e\u003ciclass=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspanclass=leancloud-visitors-count\u003e\u003c/span\u003e\u0026nbsp;{{T\"views\"}}\u003c/span\u003e\u0026nbsp;{{-end-}}{{-if$comment.enable|and$comment.waline.enable|and$comment.waline.visitor-}}\u003cspanid=\"{{ .RelPermalink }}\"class=\"leancloud_visitors\"data-flag-title=\"{{ .Title }}\"\u003e\u003ciclass=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspanclass=leancloud-visitors-count\u003e\u003c/span\u003e\u0026nbsp;{{T\"views\"}}\u003c/span\u003e\u0026nbsp;\u003cahref=\"#comments\"id=\"post-meta-vcount\"title=\"{{ T `viewComments` }}\"\u003e\u003ciclass=\"fas fa-comment fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspanid=\"{{ .RelPermalink }}\"class=\"waline-comment-count\"\u003e\u003c/span\u003e\u0026nbsp;条评论\u003c/a\u003e{{-end-}}\u003c/div\u003e ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加样式 在_custom.scss里添加如下样式： /* 文章元数据meta */ .post-meta .post-meta-line:nth-child(2) i:nth-child(1) { margin-left: 0; } .post-meta .post-meta-line:nth-child(2) i { margin-left: 0.3rem; } .post-meta .post-meta-line:nth-child(2) span i { margin-left: 0.3rem !important; } .post-meta a#post-meta-vcount { color: #a9a9b3; \u0026:hover { color: #2d96bd; } } ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"部署到Vercel 这个部分直接参考官方文档 - Vercel 部署。实际上就是在GitHub上帮你创建了一个仓库，仓库里只有简单的几个文件，用于Vercel的部署。Vercel那边会和刚刚创建的GitHub仓库关联，然后部署到Vercel自己的服务器。 这里有个坑，之前用Valine的时候只需要用到LeanCloud的两个变量APP ID和APP KEY。但是对于Waline，必须要再用到第三个变量Master Key。也就是说，对于Waline + Vercel，必须配置三个变量LEAN_ID、LEAN_KEY和LEAN_MASTER_KEY才能算部署成功。 否则你会发现就算Vercel显示部署成功，一旦访问部署页面却会发现页面一片空白，具体可参考GitHub上的一个issue：Vercel初始化后打开网址页面内容为空 #82 Waline还带有简单的后台，可以实现对评论的管理。部署完成后访问\u003cserverURL\u003e/ui/register进行注册，第一个注册的你会被设定成管理员。登录成功后就可以看到评论管理的界面了，大家可以收藏该地址方便后续使用。serverURL就是Vercel部署成功后提供给你的那几个访问域名。 如果原本使用的是Valine + LeanCloud云引擎，在改用Waline + Vercel后记得把LeanCloud云引擎的部署清除掉。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:5","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"使用评论通知功能 Waline支持邮件、微信、QQ通知，想要使用通知功能，需要在Vercel那边配置环境变量。具体可参考官方文档 - 评论通知。这些环境变量名字和Valine的配置是一样的，貌似只有QQ通知相关的一个变量名字不一样而已。 Vercel配置环境变量步骤： 打开你在Vercel上创建的项目 点击Settings -\u003e Environment Variables -\u003e 选择添加Plaintext类型的环境变量 -\u003e 输入环境变量的name和value -\u003e 点击Save 所有被添加的环境变量可以在下方看到，可以删除或修改已定义的环境变量。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:6","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"Waline + Vercel的使用体验 由于使用了LeanCloud作为存储，外加使用了反垃圾评论服务Akismet，所以在提交评论时会比较慢，大概需要等待个两三秒。这个耗时见仁见智，一方面确实慢，一方面可以有效避免被人恶意评论攻击。 据说部署在CloudBase的速度还行。 Waline的机制好像是QQ提醒了邮件就不提醒，所以对于新评论，如果设置了QQ提醒就不会再收到邮件通知。对于回复的评论则是可以同时收到。 Waline提供了一个很棒的后台管理，还支持其他人的注册和登陆。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:4:7","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加百度统计 默认的统计功能只有Google Analytics和Fathom Analytics两种，想要使用百度统计需要自行修改配置文件和模板文件。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加百度统计相关变量 在站点配置文件里找到统计相关的配置，如下： # Analytics config # 网站分析配置 [params.analytics] enable = flase # Google Analytics [params.analytics.google] id = \"\" # whether to anonymize IP # 是否匿名化用户 IP anonymizeIP = true # Fathom Analytics [params.analytics.fathom] id = \"\" # server url for your tracker if you're self hosting # 自行托管追踪器时的主机路径 server = \"\" 在这里的[params.analytics.fathom]后面添加一个新的变量给百度统计使用： # Baidu Analytics # 百度统计 [params.analytics.baidu] id = \"\" ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:5:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"将百度统计的脚本代码添加到analytics.html里 首先拷贝\\themes\\LoveIt\\layouts\\partials\\plugin\\analytics.html到\\layouts\\partials\\plugin\\analytics.html。 打开拷贝后的analytics.html文件，在Fathom Analytics的代码下面加上如下内容： {{- /* Baidu Analytics */ -}} {{- with $analytics.baidu.id -}} \u003cscript\u003e var _hmt = _hmt || []; (function() { var hm = document.createElement(\"script\"); hm.src = \"https://hm.baidu.com/hm.js?{{ . }}\"; var s = document.getElementsByTagName(\"script\")[0]; s.parentNode.insertBefore(hm, s); })(); \u003c/script\u003e {{- end -}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:5:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"启用百度统计 将统计功能的enable = flase改为enable = true。在新增的百度统计变量的id那里填上你的百度统计id值，也就是百度统计的脚本代码里https://hm.baidu.com/hm.js?后面跟着的那串很长的东东。如果不知道怎么查看这个百度统计id，请自行百度。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:5:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加鼠标右键菜单 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加右键菜单的变量 打开站点配置文件，添加如下变量，可以自行定制菜单里的按钮，包括数量、名称、图片和地址： # Right click menu # 右键菜单 [params.rightmenu] enable = true # true or false 是否开启右键 audio = false # true or false 是否开启点击音乐 [[params.rightmenu.layout]] # 按钮名称 name = \"首页\" # 背景图片 image = \"/images/rightmenu/rightmenu1.jpg\" # 跳转地址 url = \"/\" [[params.rightmenu.layout]] name = \"音乐游戏\" image = \"/images/rightmenu/rightmenu2.jpg\" url = \"/funny/mikutap/\" [[params.rightmenu.layout]] name = \"前方高能\" image = \"/images/rightmenu/rightmenu3.jpg\" url = \"/funny/high/\" [[params.rightmenu.layout]] name = \"建站日志\" image = \"/images/rightmenu/rightmenu4.jpg\" url = \"/posts/e62c38c4.html\" [[params.rightmenu.layout]] name = \"随笔\" image = \"/images/rightmenu/rightmenu5.jpg\" url = \"/posts/d65a1577.html\" [[params.rightmenu.layout]] name = \"友链\" image = \"/images/rightmenu/rightmenu6.jpg\" url = \"/friends/\" 如果你有图床的话，还可以额外增加一个图床变量，这样可以去图床加载你的图片，可以参考前文的添加全局cdn变量。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:6:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加rightmenu.html文件 新建一个layouts/partials/plugin/rightmenu.html文件，内容如下： {{- $rightmenu := .Site.Params.rightmenu -}} {{- $cdn := .Site.Params.cdnPrefix -}} {{- if $rightmenu.enable -}} \u003cdiv class=\"GalMenu GalDropDown\"\u003e \u003cdiv class=\"circle\" id=\"gal\"\u003e \u003cdiv class=\"ring\"\u003e {{- range $item := $rightmenu.layout -}} {{- $defaultURL := \"/\" -}} {{- $defaultName := \"Home\" -}} {{- $defaultImage := \"https://gravatar.loli.net/avatar/c02f8b813aa4b7f72e32de5a48dc17a7?d=retro\u0026v=1.4.14\" -}} \u003ca href=\"{{- $item.url | default $defaultURL -}}\" target=\"_blank\" {{- $itemImage := $item.image | default $defaultImage -}} {{- if strings.HasPrefix $item.image \"http\" -}} style=\"background-image:url({{- $itemImage -}});\" {{- else if strings.HasPrefix $item.image \"/\" -}} style=\"background-image:url({{- $cdn -}}{{- $itemImage -}});\" {{- else -}} style=\"background-image:url({{- $itemImage -}});\" {{- end -}} class=\"menuItem\"\u003e{{- $item.name | default $defaultName -}}\u003c/a\u003e {{- end -}} \u003c/div\u003e {{- if $rightmenu.audio -}} \u003caudio id=\"audio\" src=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/audio/niconiconi.mp3\"\u003e\u003c/audio\u003e {{- end -}} \u003c/div\u003e \u003c/div\u003e \u003cscript type=\"text/javascript\"\u003e var items = document.querySelectorAll('.menuItem'); for (var i = 0, l = items.length; i \u003c l; i++) { items[i].style.left = (50 - 35 * Math.cos( - 0.5 * Math.PI - 2 * (1 / l) * i * Math.PI)).toFixed(4) + \"%\"; items[i].style.top = (50 + 35 * Math.sin( - 0.5 * Math.PI - 2 * (1 / l) * i * Math.PI)).toFixed(4) + \"%\" } \u003c/script\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/css/GalMenu.css\"\u003e \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/js/GalMenu.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e $(document).ready(function() { $('body').GalMenu({ 'menu': 'GalDropDown' }) }); \u003c/script\u003e {{- end -}} 这个模板代码里使用到了我项目里的niconiconi.mp3、GalMenu.css、GalMenu.js这三个文件，有兴趣的可以自己把文件保存到自己网站里，mp3文件可以自己修改为其他的音频文件。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:6:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"修改assets.html文件 将主题的\\themes\\LoveIt\\layouts\\partials\\assets.html拷贝一份到\\layouts\\partials\\assets.html，在{{- partial \"plugin/analytics.html\" . -}}下添加如下内容： {{- /* 右键菜单 */ -}} \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js\"\u003e\u003c/script\u003e {{- partial \"plugin/rightmenu.html\" . -}} 搞定，这个功能就完成了。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:6:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加文章加密功能 将\\themes\\LoveIt\\layouts\\posts\\single.html拷贝到\\layouts\\posts\\single.html，打开拷贝后的文件，在{{- $params := .Scratch.Get \"params\" -}}的下一行添加如下代码： {{- $password := $params.password | default \"\" -}} {{- if ne $password \"\" -}} \u003cscript\u003e (function(){ if({{ $password }}){ if (prompt('请输入文章密码') != {{ $password }}){ alert('密码错误！'); if (history.length === 1) { window.opener = null; window.open('', '_self'); window.close(); } else { history.back(); } } } })(); \u003c/script\u003e {{- end -}} 之后只要在文章的头部加上password属性即可进行加密，只有输入了正确密码才能打开文章，否则会回退到之前的页面。用法如下： --- title: 随笔 password: test --- ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加GitHub Corner 将\\themes\\LoveIt\\layouts\\partials\\header.html拷贝到\\layouts\\partials\\header.html，打开拷贝后的文件，在\u003cdiv class=\"header-wrapper\"\u003e的下一行添加一个超链代码： \u003ca href=\"https://github.com/lewky\" class=\"github-corner\" target=\"_blank\" title=\"Follow me on GitHub\" aria-label=\"Follow me on GitHub\"\u003e\u003csvg width=\"3.5rem\" height=\"3.5rem\" viewBox=\"0 0 250 250\" style=\"fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);\" aria-hidden=\"true\"\u003e\u003cpath d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"\u003e\u003c/path\u003e\u003cpath d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"\u003e\u003c/path\u003e\u003cpath d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e 将上边的超链的href改为自己的GitHub地址，如果想调整图片大小，可以修改代码里的svg标签的width和height属性。 然后是添加样式代码到_custom.scss里： /* Github Corner */ .github-corner:hover .octo-arm { animation: octocat-wave 560ms ease-in-out } @keyframes octocat-wave { 0%,100% { transform: rotate(0) } 20%,60% { transform: rotate(-25deg) } 40%,80% { transform: rotate(10deg) } } @media (max-width:500px) { .github-corner:hover .octo-arm { animation: none } .github-corner .octo-arm { animation: octocat-wave 560ms ease-in-out } } 下面是GitHub Corner的项目地址，一共有10种颜色样式，随便挑！ GitHub Corners项目地址 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"页面下方添加拉姆雷姆快捷跳转 将\\themes\\LoveIt\\layouts\\_default\\baseof.html拷贝到\\layouts\\_default\\baseof.html，打开拷贝后的baseof.html，在{{- /* Load JavaScript scripts and CSS */ -}}的上面一行添加如下代码： \u003cdiv class=\"sidebar_wo\"\u003e \u003cdiv id=\"leimu\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/leimuA.png\" alt=\"雷姆\" onmouseover=\"this.src='https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/leimuB.png'\" onmouseout=\"this.src='https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/leimuA.png'\" title=\"回到顶部\"\u003e \u003c/div\u003e \u003cdiv class=\"sidebar_wo\" id=\"lamu\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/lamuA.png\" alt=\"雷姆\" onmouseover=\"this.src='https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/lamuB.png'\" onmouseout=\"this.src='https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/b2t/lamuA.png'\" title=\"回到底部\"\u003e \u003c/div\u003e \u003c/div\u003e 在_custom.scss里添加对应的css代码： /* 拉姆蕾姆回到顶部或底部按钮 */ .sidebar_wo { position:fixed; line-height:0; bottom:0; z-index:1000 } #leimu { left:0; -webkit-transition:all .3s ease-in-out; transition:all .3s ease-in-out; -webkit-transform:translate(-7px,7px); -ms-transform:translate(-7px,7px); transform:translate(-7px,7px) } #lamu { -webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out; -webkit-transform:translate(7px,7px); -ms-transform:translate(7px,7px); transform:translate(7px,7px); right:0 } #leimu:hover { -webkit-transform:translate(0,0); -ms-transform:translate(0,0); transform:translate(0,0) } #lamu:hover { -webkit-transform:translate(0,0); -ms-transform:translate(0,0); transform:translate(0,0) } .sidebar_wo img { cursor:pointer; } @media only screen and (max-width:1024px) { .sidebar_wo{display:none} } 最后在custom.js里添加如下代码，注意，要先引入jquery才有效果，具体细节请看前文： /* 拉姆蕾姆回到顶部或底部按钮 */ $(function() { $(\"#lamu img\").eq(0).click(function() { $(\"html,body\").animate({scrollTop:$(document).height()},800); return false; }); $(\"#leimu img\").eq(0).click(function() { $(\"html,body\").animate({scrollTop:0},800); return false; }); }); ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加首页头像挂件 这个功能分为四个部分： 首页头像的动画特效从浮动改为旋转，为了适配挂件还稍微缩小了头像大小 添加头像挂件（都是b站的挂件） 点击头像一点次数后随机刷新头像 加载首页时随机刷新头像（该功能可禁用） ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"修改站点配置文件 在站点配置文件里找到你配置首页头像的变量avatarURL，在其下方添加两个新的变量，内容如下： [params.home.profile] enable = true # 主页显示头像的 URL avatarURL = \"/images/avatar.jpg\" # 是否启用头像挂件 avatarPluginURL = \"/images/avatar-plug/bilibili_27.png\" # 是否启用头像挂件自动刷新 avatarPluginFlush = true # 点击频率，点击几次就换挂件 avatarPluginFrequency = 1 # 头像挂件总数 avatarPluginCount = 128 如果你有自己的图床，还可以配置一个给头像挂件使用的图床地址，如下： # 参数 [params] # 图床变量，末尾不需要加/ cdnPrefix = \"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master\" 这个变量不设置也没关系，不会影响挂件的功能。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:10:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"修改模板文件profile.html 将\\themes\\LoveIt\\layouts\\partials\\home\\profile.html拷贝到\\layouts\\partials\\home\\profile.html，打开拷贝后的文件，找到下面的代码： \u003ca href=\"{{ $url }}\"{{ with .Title | default .Name }} title=\"{{ . }}\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 这是渲染首页头像的代码，将这段代码改成如下内容： {{- if $profile.avatarPluginURL -}} \u003cimg class=\"site-avatar-plug-bilibili\" /\u003e \u003ca href=\"javascript:void(0);\"{{ with .Title | default .Name }} title=\"Please click me~~\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar \"Title\" \"Please click me~~\" | partial \"plugin/image.html\" -}} \u003c/a\u003e {{- else -}} \u003ca href=\"{{ $url }}\"{{ with .Title | default .Name }} title=\"{{ . }}\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e {{- end -}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:10:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"修改模板文件assets.html 打开\\layouts\\partials\\assets.html，在你引入的jquery的下面添加如下代码，不知道怎么引入jquery的请看前文： \u003c!-- 头像挂件 --\u003e \u003cscript\u003e {{- $profile := .Site.Params.home.profile -}} {{- $avatarPlugin := $profile.avatarPluginURL -}} {{- $avatarPluginFrequency := $profile.avatarPluginFrequency -}} {{- $avatarPluginCount := $profile.avatarPluginCount -}} {{- $cdnPrefix := .Site.Params.cdnPrefix -}} {{- if $avatarPlugin -}} /* 头像挂件自动刷新 */ {{- if $profile.avatarPluginFlush -}} $(function () { $(\".site-avatar-plug-bilibili\").attr(\"src\", \"{{ $cdnPrefix }}/images/avatar-plug/bilibili_\" + (~~({{ $avatarPluginCount }}*Math.random())+1) + \".png\"); }); {{- else -}} $(function () { $(\".site-avatar-plug-bilibili\").attr(\"src\", \"{{ $cdnPrefix }}{{ $avatarPlugin }}\"); }); {{- end -}} /* 点击头像更换b站挂件 */ var avatar_plug = 0; var avatar_click = 1; jQuery(document).ready(function($) { /* 点击频率，点击几次就换挂件 */ var frequency = {{ $avatarPluginFrequency }}; /* 头像挂件总数 */ var plug_count = {{ $avatarPluginCount }}; $(\"div.home-avatar a\").click(function(e) { if (avatar_click % frequency === 0) { avatar_plug ++; $(\".site-avatar-plug-bilibili\").attr(\"src\", \"{{ $cdnPrefix }}/images/avatar-plug/bilibili_\" + avatar_plug + \".png\"); } if (avatar_plug === plug_count) { avatar_plug = 0; } $(\"div.home-avatar a\").attr(\"alt\",\"再点击\" + (frequency - avatar_click % frequency) + \"次头像试试看~~\"); avatar_click ++; }); }); {{- end -}} \u003c/script\u003e ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:10:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"添加css代码 在自定义的_custom.scss里添加如下代码： /* 首页头像 */ /* bilibili头像挂件 */ img.site-avatar-plug-bilibili { position: absolute; display: block; margin: -2rem !important; padding: 0; width: 9rem !important; max-width: 168px; height: auto; box-shadow: none !important; z-index: 1; pointer-events: none; } /* 头像旋转 */ .home .home-profile .home-avatar img { width: 5rem; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ease-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out; \u0026:hover { /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg); } } /* Z 轴旋转动画 */ @-webkit-keyframes play { 0% { -webkit-transform: rotateZ(0deg); } 100% { -webkit-transform: rotateZ(-360deg); } } @-moz-keyframes play { 0% { -moz-transform: rotateZ(0deg); } 100% { -moz-transform: rotateZ(-360deg); } } @keyframes play { 0% { transform: rotateZ(0deg); } 100% { transform: rotateZ(-360deg); } } 头像和挂件的样式代码可能根据个人的定制化而需要微调下位置之类的。至于头像挂件这些图片请去我的站点里下载下来，下面是具体地址： https://github.com/lewky/lewky.github.io/tree/master/images/avatar-plug ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:10:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"参考链接 DesertsP/Valine-Admin Hexo主题使用Valine-Admin管理评论和评论提醒 最新版基于Leancloud或javascript推送Valine评论到QQ 优雅解决LeanCloud流控问题 cron-job.org Qmsg酱 hexo中添加鼠标右键功能 在搭配Volantis主题的hexo博客上使用waline ","date":"2021-05-29","objectID":"/lewky/hugo-3.1/:11:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章","uri":"/lewky/hugo-3.1/"},{"categories":null,"content":"前言 本博客使用的是Hugo的LoveIt主题，本文也是基于该主题而写的，不过Hugo的美化步骤应该大同小异，版本如下： hexo: 3.8.0 hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 请注意，本文的所有功能都离不开两个新增加的文件：_custom.scss和custom.js，部分功能还需要jquery，在第一章中会提及如何引入。 另外本文篇幅太长，阅读体验不好，将其进行分章如下： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章 Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章 Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加归档、分类页面里的文章数量统计 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"在list.html里添加sup标签 文章数量统计实际上就是添加html里的sup标签，借助hugo提供的变量来获取对应的文章数量，即可实现该功能。 拷贝\\themes\\LoveIt\\layouts\\taxonomy\\list.html到\\layouts\\taxonomy\\list.html，打开拷贝后的文件，找到如下内容： {{- if eq $taxonomy \"category\" -}} \u003ci class=\"far fa-folder-open fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Title }} {{- else if eq $taxonomy \"tag\" -}} \u003ci class=\"fas fa-tag fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Title }} {{- else -}} 改成如下： {{- if eq $taxonomy \"category\" -}} \u003ci class=\"far fa-folder-open fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Title }}\u003csup\u003e{{ len .Pages }}\u003c/sup\u003e {{- else if eq $taxonomy \"tag\" -}} \u003ci class=\"fas fa-tag fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Title }}\u003csup\u003e{{ len .Pages }}\u003c/sup\u003e {{- else -}} 继续找到如下内容： {{- range $pages.PageGroups -}} \u003ch3 class=\"group-title\"\u003e{{ .Key }}\u003c/h3\u003e 改成如下： {{- range $pages.PageGroups -}} \u003ch3 class=\"group-title\"\u003e{{ .Key }} \u003csup\u003e{{ len .Pages }}\u003c/sup\u003e\u003c/h3\u003e 原本主题的文章是按照年份来分组的，如果想按照月份来分组，找到下面的内容： {{- /* Paginate */ -}} {{- if .Pages -}} {{- $pages := .Pages.GroupByDate \"2006\" -}} 改成如下： {{- /* Paginate */ -}} {{- if .Pages -}} {{- $pages := .Pages.GroupByDate \"2006-01\" -}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:2:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"在terms.html里添加sup标签 拷贝\\themes\\LoveIt\\layouts\\taxonomy\\terms.html到\\layouts\\taxonomy\\terms.html，打开拷贝后的文件，找到如下内容： \u003cdiv class=\"page archive\"\u003e {{- /* Title */ -}} \u003ch2 class=\"single-title animated pulse faster\"\u003e {{- .Params.Title | default (T $taxonomies) | default $taxonomies | dict \"Some\" | T \"allSome\" -}} \u003c/h2\u003e 改成如下： \u003cdiv class=\"page archive\"\u003e {{- /* Title */ -}} \u003ch2 class=\"single-title animated pulse faster\"\u003e {{- .Params.Title | default (T $taxonomies) | default $taxonomies | dict \"Some\" | T \"allSome\" -}}\u003csup\u003e{{ len .Pages }}\u003c/sup\u003e \u003c/h2\u003e 找到如下内容： \u003ch3 class=\"card-item-title\"\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e \u003ci class=\"far fa-folder fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Page.Title }} \u003c/a\u003e \u003c/h3\u003e 改成如下： \u003ch3 class=\"card-item-title\"\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e \u003ci class=\"far fa-folder fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;{{ .Page.Title }} \u003csup\u003e{{ len .Pages }}\u003c/sup\u003e \u003c/a\u003e \u003c/h3\u003e ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:2:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"在section.html里添加sup标签 拷贝\\themes\\LoveIt\\layouts\\_default\\section.html到\\layouts\\_default\\section.html，打开拷贝后的文件，找到如下内容： \u003cdiv class=\"page archive\"\u003e {{- /* Title */ -}} \u003ch2 class=\"single-title animated pulse faster\"\u003e {{- .Params.Title | default (T .Section) | default .Section | dict \"Some\" | T \"allSome\" -}} \u003c/h2\u003e 改成如下： \u003cdiv class=\"page archive\"\u003e {{- /* Title */ -}} \u003ch2 class=\"single-title animated pulse faster\"\u003e {{- .Params.Title | default (T .Section) | default .Section | dict \"Some\" | T \"allSome\" -}}\u003csup\u003e{{ len .Pages }}\u003c/sup\u003e \u003c/h2\u003e 找到如下内容： {{- range $pages.PageGroups -}} \u003ch3 class=\"group-title\"\u003e{{ .Key }}\u003c/h3\u003e 改成如下： {{- range $pages.PageGroups -}} \u003ch3 class=\"group-title\"\u003e{{ .Key }} \u003csup\u003e{{ len .Pages }}\u003c/sup\u003e\u003c/h3\u003e 这里同样是按照年份来分组的，如果想按照月份来分组，找到下面的内容： {{- /* Paginate */ -}} {{- if .Pages -}} {{- $pages := .Pages.GroupByDate \"2006\" -}} 改成如下： {{- /* Paginate */ -}} {{- if .Pages -}} {{- $pages := .Pages.GroupByDate \"2006-01\" -}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:2:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"修改侧边栏目录样式 默认侧边栏的目录是全展开的，如果文章太长，小标题太多，就会导致目录非常长，看起来不方便。可以改成只展开当前正在查看的小标题对应的目录，在_custom.scss里添加如下样式： /* 目录 */ nav#TableOfContents ol { padding-inline-start: 30px; \u0026 ol { padding-inline-start: 25px; display: none; } \u0026 li.has-active ol { display: block; } } ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加文章过期提醒 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"配置文件添加相关变量 在config.toml添加如下变量： # Display a message at the beginning of an article to warn the readers that it's content may be outdated. # 在文章末尾显示提示信息，提醒读者文章内容可能过时。 [params.outdatedInfoWarning] enable = true hint = 90 # Display hint if the last modified time is more than these days ago. # 如果文章最后更新于这天数之前，显示提醒 warn = 180 # Display warning if the last modified time is more than these days ago. # 如果文章最后更新于这天数之前，显示警告 这里是对全局文章生效，也可以在每篇文章的文件头里添加如下变量来控制是否启用该功能： outdatedInfoWarning: false ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:4:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加变量到国际化文件 将\\themes\\LoveIt\\i18n\\zh-CN.toml拷贝到\\i18n\\zh-CN.toml，然后将该文件重命名为zh-cn.toml。因为站点配置文件里的中文语言代码应该是全小写的zh-cn，如下： defaultContentLanguage = \"zh-cn\" 打开拷贝后的文件，添加如下内容： [outdatedInfoWarningBefore] other = \"本文最后更新于 \" [outdatedInfoWarningAfter] other = \"，文中内容可能已过时，请谨慎使用。\" 如果你的国际化文件是用的yaml格式，则如下： outdatedInfoWarningBefore: other: \"本文最后更新于 \" outdatedInfoWarningAfter: other: \"，文中内容可能已过时，请谨慎使用。\" 如果有配置了其他语言，可以添加上面两个变量到对应的国际化文件里，自行修改other所对应的值即可。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:4:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加模板文件outdated-info-warning.html 新建模板文件/layouts/partials/single/outdated-info-warning.html，内容如下： {{- if or .Params.outdatedInfoWarning (and .Site.Params.outdatedInfoWarning.enable (ne .Params.outdatedInfoWarning false)) }} {{- $daysAgo := div (sub now.Unix .Lastmod.Unix) 86400 }} {{- $hintThreshold := .Site.Params.outdatedInfoWarning.hint | default 30 }} {{- $warnThreshold := .Site.Params.outdatedInfoWarning.warn | default 180 }} {{- $updateTime := .Lastmod }} {{- if .GitInfo }} {{- if lt .GitInfo.AuthorDate.Unix .Lastmod.Unix }} {{- $updateTime := .GitInfo.AuthorDate }} {{- end }} {{- end -}} {{- if gt $daysAgo $hintThreshold }} {{- $iconDetails := \"fas fa-angle-right fa-fw\" -}} {{- if gt $daysAgo $warnThreshold }} {{- $type := \"warning\" -}} {{- $icon := \"fas fa-exclamation-triangle fa-fw\" -}} \u003cdiv class=\"details admonition {{ $type }} open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e \u003ci class=\"icon {{ $icon }}{{ $type }}\"\u003e\u003c/i\u003e{{ T $type }}\u003ci class=\"details-icon {{ $iconDetails }}\"\u003e\u003c/i\u003e {{- else }} {{- $type := \"note\" -}} {{- $icon := \"fas fa-pencil-alt fa-fw\" -}} \u003cdiv class=\"details admonition {{ $type }} open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e \u003ci class=\"icon {{ $icon }}{{ $type }}\"\u003e\u003c/i\u003e{{ T $type }}\u003ci class=\"details-icon {{ $iconDetails }}\"\u003e\u003c/i\u003e {{- end }} \u003c/div\u003e \u003cdiv class=\"details-content\"\u003e \u003cdiv class=\"admonition-content\"\u003e {{ T \"outdatedInfoWarningBefore\" -}} \u003cspan class=\"timeago\" datetime=\"{{ dateFormat \"2006-01-02T15:04:05\" $updateTime }}\" title=\"{{ dateFormat \"January 2, 2006\" $updateTime }}\"\u003e {{- dateFormat \"January 2, 2006\" $updateTime -}} \u003c/span\u003e{{ T \"outdatedInfoWarningAfter\" -}} \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e {{- end -}} {{- end -}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:4:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"修改模板文件single.html 将/themes/LoveIt/layouts/posts/single.html拷贝到/layouts/posts/single.html，打开拷贝后的文件，找到如下内容： {{- /* Content */ -}} \u003cdiv class=\"content\" id=\"content\"\u003e {{- dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" | safeHTML -}} \u003c/div\u003e 修改成如下： \u003cdiv class=\"content\" id=\"content\"\u003e {{- dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" | safeHTML -}} {{- /* Outdated Info Warning */ -}} {{- partial \"single/outdated-info-warning.html\" . -}} \u003c/div\u003e ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:4:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"菜单栏支持子菜单 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"修改模板代码 将主题的/themes/LoveIt/layouts/partials/header.html拷贝一份到layouts/partials/header.html，找到如下代码，一共有两个地方，分别对应网页端和手机端： {{-range.Site.Menus.main-}}{{-$url:=.URL|relLangURL-}}{{-with.Page-}}{{-$url=.RelPermalink-}}{{-end-}}\u003caclass=\"menu-item{{ if $.IsMenuCurrent `main` . | or ($.HasMenuCurrent `main` .) | or (eq $.RelPermalink $url) }} active{{ end }}\"href=\"{{ $url }}\"{{with.Title}}title=\"{{ . }}\"{{end}}{{if(urls.Parse$url).Host}}rel=\"noopener noreffer\"target=\"_blank\"{{end}}\u003e{{-.Pre|safeHTML}}{{.Name}}{{.Post|safeHTML-}}\u003c/a\u003e{{-end-}} 将上述代码改为如下代码： {{-range.Site.Menus.main-}}{{if.HasChildren}}\u003cdivclass=\"dropdown\"\u003e\u003ca{{if.URL}}href=\"{{ .URL }}\"{{else}}href=\"javascript:void(0);\"{{end}}class=\"menu-item menu-more dropbtn\"title=\"{{ .Title }}\"{{ifeq.Post\"_blank\"}}target=\"_blank\"rel=\"noopener\"{{end}}\u003e{{-.Pre|safeHTML}}{{.Name}}{{ifne.Post\"_blank\"}}{{.Post|safeHTML-}}{{end}}\u003c/a\u003e\u003cdivclass=\"menu-more-content dropdown-content\"\u003e{{-range.Children-}}{{-$url:=.URL|relLangURL-}}{{-with.Page-}}{{-$url=.RelPermalink-}}{{-end-}}\u003cahref=\"{{ $url }}\"title=\"{{ .Title }}\"{{ifeq.Post\"_blank\"}}target=\"_blank\"rel=\"noopener\"{{end}}\u003e{{-.Pre|safeHTML}}{{.Name}}{{ifne.Post\"_blank\"}}{{.Post|safeHTML-}}{{end}}\u003c/a\u003e{{-end-}}\u003c/div\u003e\u003c/div\u003e{{else}}{{-$url:=.URL|relLangURL-}}{{-with.Page-}}{{-$url=.RelPermalink-}}{{-end-}}\u003caclass=\"menu-item{{ if $.IsMenuCurrent `main` . | or ($.HasMenuCurrent `main` .) | or (eq $.RelPermalink $url) }} active{{ end }}\"href=\"{{ $url }}\"{{with.Title}}title=\"{{ . }}\"{{end}}{{if(urls.Parse$url).Host}}rel=\"noopener noreffer\"target=\"_blank\"{{end}}\u003e{{-.Pre|safeHTML}}{{.Name}}{{ifne.Post\"_blank\"}}{{.Post|safeHTML-}}{{end}}\u003c/a\u003e{{-end-}}{{-end-}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:5:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加css样式 在_custom.scss中添加如下代码： /* 子菜单栏 */ .dropdown { display: inline-block; } /* 子菜单的内容 (默认隐藏) */ .dropdown-content { display: none; position: absolute; background-color: #f9f9f9; box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2); border-radius: 4px; line-height: 1.3rem; } /* 子菜单的链接 */ .dropdown-content a { padding: 10px 18px 10px 14px; text-decoration: none; display: block; \u0026 i { margin-right: 3px; } } /* 鼠标移上去后修改子菜单链接颜色 */ .dropdown-content a:hover { background-color: #f1f1f1; border-radius: 4px; } /* 在鼠标移上去后显示子菜单 */ .dropdown:hover .dropdown-content { display: block; } @media screen and (max-width: 680px) { .dropdown { display: inline; } .dropdown:hover .dropdown-content { display: inline; z-index: 1; margin-top: -2em; margin-left: 3em; } .dropdown-content a:hover { background-color: transparent; } } ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:5:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"配置子菜单 打开站点配置文件config.toml，添加子菜单到菜单栏里。子菜单其实和原本的菜单一样写法，只是多了一个parent属性，用来定位到对应的父菜单的identifier。下面是一个简单的子菜单定义方式（没有使用多语言功能）： # 菜单配置 [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\u003ci class='fas fa-fw fa-archive'\u003e\u003c/i\u003e\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"归档\" url = \"/posts/\" title = \"\" weight = 1 [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-link'\u003e\u003c/i\u003e\" name = \"友链\" identifier = \"friends\" url = \"/friends/\" weight = 2 # 二级菜单 [[menu.main]] parent = \"posts\" pre = \"\u003ci class='fas fa-fw fa-th'\u003e\u003c/i\u003e\" name = \"分类\" identifier = \"categories\" url = \"/categories/\" weight = 1 [[menu.main]] parent = \"posts\" identifier = \"tags\" pre = \"\u003ci class='fas fa-fw fa-tag'\u003e\u003c/i\u003e\" post = \"_blank\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 菜单栏还允许以下配置： 通过给菜单配置一个post = \"_blank\"属性来将该菜单设置为在新窗口打开该链接，如果post属性填其他值则依然作为原本的功能使用：即给name添加后缀。 通过设置title来添加超链的提示文本。 父菜单可以通过将url设置为空来将其渲染为不跳转的超链：url = \"\"。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:5:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加文章打赏 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"配置文件添加相关变量 在config.toml添加如下变量： [params.reward] # 文章打赏 enable = true wechat = \"/images/wechat.png\" # 微信二维码 alipay = \"/images/alipay.png\" # 支付宝二维码 这里是对全局文章生效，也可以在每篇文章的文件头里添加如下变量来控制是否启用该功能： reward: false 至于微信和支付宝的收款码，如果不想用官方提供的样式，可以参考这篇文章：微信支付宝收款码制作和美化如何做？ ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加变量到国际化文件 将\\themes\\LoveIt\\i18n\\zh-CN.toml拷贝到\\i18n\\zh-CN.toml，然后将该文件重命名为zh-cn.toml。因为站点配置文件里的中文语言代码应该是全小写的zh-cn，如下： defaultContentLanguage = \"zh-cn\" 打开拷贝后的文件，添加如下内容： [reward] other = \"赞赏支持\" [rewardAlipay] other = \"支付宝打赏\" [rewardWechat] other = \"微信打赏\" 如果你的国际化文件是用的yaml格式，则如下： reward: other: \"赞赏支持\" rewardAlipay: other: \"支付宝打赏\" rewardWechat: other: \"微信打赏\" 如果有配置了其他语言，可以添加上面两个变量到对应的国际化文件里，自行修改other所对应的值即可。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加模板文件reward.html 新建模板文件/layouts/partials/single/reward.html，内容如下： {{ if or .Params.reward (and .Site.Params.reward.enable (ne .Params.reward false)) -}} \u003cdiv class=\"post-reward\"\u003e \u003cinput type=\"checkbox\" name=\"reward\" id=\"reward\" hidden /\u003e \u003clabel class=\"reward-button\" for=\"reward\"\u003e{{ T \"reward\" }}\u003c/label\u003e \u003cdiv class=\"qr-code\"\u003e {{ $qrCode := .Site.Params.reward }} {{- $cdnPrefix := .Site.Params.cdnPrefix -}} {{ with $qrCode.wechat -}} \u003clabel class=\"qr-code-image\" for=\"reward\"\u003e \u003cimg class=\"image\" src=\"{{ $cdnPrefix }}{{ . }}\"\u003e \u003cspan\u003e{{ T \"rewardWechat\" }}\u003c/span\u003e \u003c/label\u003e {{- end }} {{ with $qrCode.alipay -}} \u003clabel class=\"qr-code-image\" for=\"reward\"\u003e \u003cimg class=\"image\" src=\"{{ $cdnPrefix }}{{ . }}\"\u003e \u003cspan\u003e{{ T \"rewardAlipay\" }}\u003c/span\u003e \u003c/label\u003e {{- end }} \u003c/div\u003e \u003c/div\u003e {{- end }} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"修改模板文件single.html 将/themes/LoveIt/layouts/posts/single.html拷贝到/layouts/posts/single.html，打开拷贝后的文件，找到如下内容： {{- /* Content */ -}} \u003cdiv class=\"content\" id=\"content\"\u003e {{- dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" | safeHTML -}} \u003c/div\u003e 修改成如下： {{- /* Content */ -}} \u003cdiv class=\"content\" id=\"content\"\u003e {{- dict \"Content\" .Content \"Ruby\" $params.ruby \"Fraction\" $params.fraction \"Fontawesome\" $params.fontawesome | partial \"function/content.html\" | safeHTML -}} {{- /* Reward */ -}} {{- partial \"single/reward.html\" . -}} \u003c/div\u003e ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加css代码 在自定义的_custom.scss里添加如下样式： /* 打赏 */ article .post-reward { margin-top: 20px; padding-top: 10px; text-align: center; border-top: 1px dashed #e6e6e6 } article .post-reward .reward-button { margin: 15px 0; padding: 3px 7px; display: inline-block; color: #c05b4d; border: 1px solid #c05b4d; border-radius: 5px; cursor: pointer } article .post-reward .reward-button:hover { color: #fefefe; background-color: #c05b4d; transition: .5s } article .post-reward #reward:checked~.qr-code { display: block } article .post-reward #reward:checked~.reward-button { display: none } article .post-reward .qr-code { display: none } article .post-reward .qr-code .qr-code-image { display: inline-block; min-width: 200px; width: 40%; margin-top: 15px } article .post-reward .qr-code .qr-code-image span { display: inline-block; width: 100%; margin: 8px 0 } article .post-reward .qr-code .image { width: 200px; height: 200px } ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:6:5","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加打赏榜 全文新增了文章打赏的功能，这里添加一个新的页面来记录老板们的打赏和红包，用的是响应式垂直时间轴。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"配置文件添加子菜单 这里使用了菜单栏的子菜单配置，子菜单的做法请参考前文。 [[menu.main]] parent = \"posts\" pre = \"\u003ci class='fas fa-fw fa-donate'\u003e\u003c/i\u003e\" name = \"打赏\" title = \"感谢打赏，老板大气~\" identifier = \"donation\" url = \"/donation/\" weight = 4 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:7:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加模板文件donation.html 新建模板文件/layouts/shortcodes/donation.html，内容如下： {{ if .IsNamedParams }} {{- $cdn := .Site.Params.cdnPrefix -}} {{- $name := .Get \"name\" -}} \u003cdiv class=\"cd-timeline-block\"\u003e {{- if eq $name \"wechat\" -}} \u003cdiv class=\"cd-timeline-img cd-wechat\"\u003e \u003cimg src=\"/images/common/wechat.svg\" alt=\"微信\"\u003e \u003c/div\u003e {{- else if eq $name \"alipay\" -}} \u003cdiv class=\"cd-timeline-img cd-alipay\"\u003e \u003cimg src=\"{{- $cdn -}}/images/common/alipay.svg\" alt=\"支付宝\"\u003e \u003c/div\u003e {{- end -}} \u003cdiv class=\"cd-timeline-content {{ .Get \"name\" }}\"\u003e \u003cp\u003e\u003cb\u003e{{ .Get \"title\" }}\u003c/b\u003e\u003c/p\u003e \u003cp\u003e{{ .Get \"description\" }}\u003c/p\u003e \u003ca href={{ .Get \"url\" }} class=\"cd-read-more\" target=\"_blank\"\u003e阅读被打赏文章\u003c/a\u003e \u003cspan class=\"cd-date\"\u003e{{ .Get \"date\" }}\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e {{ end }} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:7:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"新增css样式文件和图片 新建/static/css/timeline.style.css，内容如下： /* -------------------------------- Primary style -------------------------------- */ html * { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } *, *:after, *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } body { font-size: 100%; background-color: #e9f0f5; } footer { padding-bottom: 3rem; } img { max-width: 100%; } /* -------------------------------- Modules - reusable parts of our design -------------------------------- */ .cd-container { /* this class is used to give a max-width to the element it is applied to, and center it horizontally when it reaches that max-width */ width: 90%; max-width: 1170px; margin: 0 auto; } .cd-container::after { /* clearfix */ content: ''; display: table; clear: both; } /* -------------------------------- Main components -------------------------------- */ #cd-timeline { position: relative; padding: 2em 0; margin-top: 0; margin-bottom: 0; } #cd-timeline::before { /* this is the vertical line */ content: ''; position: absolute; top: 0; left: 18px; height: 100%; width: 4px; background: #d7e4ed; } @media only screen and (min-width: 1170px) { #cd-timeline { margin-top: 0; margin-bottom: 0; } #cd-timeline::before { left: 50%; margin-left: -2px; } } .cd-timeline-block { position: relative; margin: 2em 0; } .cd-timeline-block:after { content: \"\"; display: table; clear: both; } .cd-timeline-block:first-child { margin-top: 0; } .cd-timeline-block:last-child { margin-bottom: 0; } @media only screen and (min-width: 1170px) { .cd-timeline-block { margin: 4em 0; } .cd-timeline-block:first-child { margin-top: 0; } .cd-timeline-block:last-child { margin-bottom: 0; } } .cd-timeline-img { position: absolute; top: 0; left: 0; width: 40px; height: 40px; border-radius: 50%; box-shadow: 0 0 0 4px #e9f0f5, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05); } .cd-timeline-img img { display: block; width: 24px; height: 24px; position: relative; left: 50%; top: 50%; margin-left: -12px; margin-top: -12px; } .cd-timeline-img.cd-wechat { background: #75ce66; } .cd-timeline-img.cd-alipay { background: #3e8af4; } .cd-timeline-img.cd-location { background: #f0ca45; } @media only screen and (min-width: 1170px) { .cd-timeline-img { width: 60px; height: 60px; left: 50%; margin-left: -30px; /* Force Hardware Acceleration in WebKit */ -webkit-transform: translateZ(0); -webkit-backface-visibility: hidden; } .cssanimations .cd-timeline-img.is-hidden { visibility: hidden; } .cssanimations .cd-timeline-img.bounce-in { visibility: visible; -webkit-animation: cd-bounce-1 0.6s; -moz-animation: cd-bounce-1 0.6s; animation: cd-bounce-1 0.6s; } } .cd-timeline-content { position: relative; margin-left: 60px; border-radius: 0.25em; padding: 1em; box-shadow: 0 3px 0 #d7e4ed; } .cd-timeline-content:after { content: \"\"; display: table; clear: both; } .cd-timeline-content { color: #303e49; } .cd-timeline-block .wechat{ background: #75ce66; } .cd-timeline-block .alipay{ background: #3e8af4; } .cd-timeline-content p, .cd-timeline-content .cd-read-more, .cd-timeline-content .cd-date { font-size: 13px; font-size: 0.8125rem; } .cd-timeline-content .cd-read-more, .cd-timeline-content .cd-date { display: inline-block; } .cd-timeline-content p { margin: 1em 0; line-height: 1.6; } .cd-timeline-content .cd-read-more { float: right; padding: .8em 1em; background: white; color: #999 !important; border-radius: 0.25em; } .no-touch .cd-timeline-content .cd-read-more:hover { background-color: #bac4cb; } a.cd-read-more:hover{text-decoration:none; background-color: #424242; } .cd-timeline-content .cd-date { float: left; padding: .8em 0; opacity: .7; color: black; } .cd-timeline-content::before { content: ''; position: absolute; top: 16px; right: 100%; height: 0; width: 0; border: 7px solid transparent; border-right: 7px solid white; } @media only screen and (min-width: 768px) { .cd-timeline-content { font-size: 20px; font-s","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:7:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"新建donation页面 新建/content/donation/index.md，内容如下： --- title: \"打赏榜\" date: 2021-08-23T22:01:44+08:00 lastmod: 2021-08-23T22:01:44+08:00 --- \u003clink rel=\"stylesheet\" href=\"/css/timeline.style.css\" /\u003e \u003csection id=\"cd-timeline\" class=\"cd-container\"\u003e {{\u003c donation name=\"wechat\" title=\"感谢*A打赏5元！\" description=\"打赏文章为Hexo系列(2.1) - NexT主题美化与博客功能增强 · 第二章#对文章进行加密\" url=\"https://lewky.cn/posts/hexo-2.1.html/#对文章进行加密\" date=\"2021-08-23\" \u003e}} {{\u003c donation name=\"alipay\" title=\"感谢*B打赏5元！\" description=\"打赏文章为Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章#使用Waline替代Valine评论系统\" url=\"/lewky/hugo-3.1/#使用waline替代valine评论系统\" date=\"2021-08-11\" \u003e}} \u003c/section\u003e 该页面首先需要引入css样式文件，然后是添加一个section标签，我们的打赏片段需要在section标签里通过一个个的donation短代码来引入。 上文中的donation短代码有五个属性。 name有两种值：wechat和alipay，分别对应微信和支付宝。 title是标题，description是描述，url是被打赏文章的链接，date是打赏日期。 具体效果可以去我的打赏页面看看。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:7:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加站点运行时间 将\\themes\\LoveIt\\layouts\\partials\\footer.html拷贝到\\layouts\\partials\\footer.html，打开拷贝后的文件，在\u003cdiv class=\"footer-container\"\u003e的下方添加如下代码： \u003cdiv class=\"footer-line\"\u003e \u003cspan id=\"run-time\"\u003e\u003c/span\u003e \u003c/div\u003e 然后在custom.js中添加如下代码： /* 站点运行时间 */ function runtime() { window.setTimeout(\"runtime()\", 1000); /* 请修改这里的起始时间 */ let startTime = new Date('04/24/2018 15:00:00'); let endTime = new Date(); let usedTime = endTime - startTime; let days = Math.floor(usedTime / (24 * 3600 * 1000)); let leavel = usedTime % (24 * 3600 * 1000); let hours = Math.floor(leavel / (3600 * 1000)); let leavel2 = leavel % (3600 * 1000); let minutes = Math.floor(leavel2 / (60 * 1000)); let leavel3 = leavel2 % (60 * 1000); let seconds = Math.floor(leavel3 / (1000)); let runbox = document.getElementById('run-time'); runbox.innerHTML = '本站已运行\u003ci class=\"far fa-clock fa-fw\"\u003e\u003c/i\u003e ' + ((days \u003c 10) ? '0' : '') + days + ' 天 ' + ((hours \u003c 10) ? '0' : '') + hours + ' 时 ' + ((minutes \u003c 10) ? '0' : '') + minutes + ' 分 ' + ((seconds \u003c 10) ? '0' : '') + seconds + ' 秒 '; } runtime(); ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加文章热度排行榜 在content目录下新建hot目录，添加一个index.md文件，内容如下： --- title: \"热度排行榜\" --- \u003cstyle\u003e ul#hot { list-style: none; } ul#hot li { position: relative; padding-left: 30px; height: 36px; line-height: 36px; } ul#hot li:after { content: \"\"; display: inline-block; width: 20px; height: 20px; line-height: 20px; text-align: center; color: #FFF; background: #999999; text-align: center; position: absolute; left: 0; top: 8px; } ul#hot li:first-child:after {content: \"1\";background: #FD8C84;} ul#hot li:nth-child(2):after {content: \"2\";background: #FFCC99;} ul#hot li:nth-child(3):after {content: \"3\";background: #7FD75A;} ul#hot li:nth-child(4):after {content: \"4\";background: #CCCCFF;} ul#hot li:nth-child(5):after {content: \"5\";background: #60C4FD;} ul#hot li:nth-child(6):after {content: \"6\";} ul#hot li:nth-child(7):after {content: \"7\";} ul#hot li:nth-child(8):after {content: \"8\";} ul#hot li:nth-child(9):after {content: \"9\";} ul#hot li:nth-child(10):after {content: \"10\";} ul#hot li:nth-child(11):after {content: \"11\";} ul#hot li:nth-child(12):after {content: \"12\";} ul#hot li:nth-child(13):after {content: \"13\";} ul#hot li:nth-child(14):after {content: \"14\";} ul#hot li:nth-child(15):after {content: \"15\";} li font {color: grey;} li#hot1 font, li#hot2 font, li#hot3 font {color: red;} li#hot4 font, li#hot5 font {color: #bd5d67;} ul#hot li { display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; overflow: hidden; } \u003c/style\u003e \u003cdiv\u003e\u003cul id=\"hot\"\u003e\u003c/ul\u003e\u003c/div\u003e \u003cscript src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js\"\u003e\u003c/script\u003e \u003cscript\u003eAV.initialize(\"appId\", \"appKey\");\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e var time=0 var title=\"\" var url=\"\" var query = new AV.Query('Counter'); query.notEqualTo('id',0); query.descending('time'); query.limit(15); query.find().then(function (todo) { for (var i=0;i\u003c1000;i++){ var result=todo[i].attributes; time=result.time; title=result.title; url=result.url; if (i\u003c5) { var content=\"\u003cli id='hot\"+(i+1)+\"'\u003e\"+\"\u003ca href='\"+url+\"'\u003e\"+title+\"\u003cfont\u003e\"+\"\u0026nbsp;\u0026nbsp;\u003ci class='fas fa-fire fa-fw'\u003e\u003c/i\u003e \"+time+\" ℃\"+\"\u003c/font\u003e\"+\"\u003c/a\u003e\"+\"\u003c/li\u003e\"; } else { var content=\"\u003cli id='hot\"+(i+1)+\"'\u003e\"+\"\u003ca href='\"+url+\"'\u003e\"+title+\"\u003cfont\u003e\"+\"\u0026nbsp;\u0026nbsp;\u003ci class='fas fa-eye fa-fw'\u003e\u003c/i\u003e \"+time+\" ℃\"+\"\u003c/font\u003e\"+\"\u003c/a\u003e\"+\"\u003c/li\u003e\"; } document.getElementById(\"hot\").innerHTML+=content } }, function (error) { console.log(\"error\"); }); \u003c/script\u003e 需要把上面代码中的appId和appKey改成LeanCloud应用对应的值。 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"添加PlantUML支持 新增/themes/LoveIt/layouts/shortcodes/uml.html，内容如下： {{ $title := \"Diagram\" }} {{ if .IsNamedParams }} {{ with .Get \"title\" }} {{ $title = . }} {{ end }} {{ else }} {{ with .Get 0 }} {{ $title = . }} {{ end }} {{ end }} {{ $inner := .Inner }} \u003cfigure\u003e \u003cimg src='https://g.gravizo.com/svg?{{ $inner }}' alt='{{ $title }}' /\u003e \u003cfigcaption\u003e{{ $title }}\u003c/figcaption\u003e \u003c/figure\u003e 之后即可在正文中通过在{{\u003c uml \u003e}}和{{\u003c /uml \u003e}}之间使用PlantUML的语法来自动渲染出对应的PlantUML图，不过需要注意的是，该功能是借助的gravizo来实现。而gravizo并不能支持所有的PlantUML语法，部分语法会失效导致渲染失败。这时候只能手动去PlantUML官网提供的在线工具生成对应的图片了。 {{\u003c uml \u003e}} @startuml class Animal class Cat Animal \u003c-- Cat @enduml {{\u003c /uml \u003e}} ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"参考链接 Hexo-NexT添加热度、阅读量排行 分享一个纯CSS样式，显示不同颜色数字的排行榜列表 Embed a diagram in a Hugo page HTML5+CSS3实现的响应式垂直时间轴 ","date":"2021-05-29","objectID":"/lewky/hugo-3.2/:11:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章","uri":"/lewky/hugo-3.2/"},{"categories":null,"content":"前言 本文主要记录从Hexo迁移至Hugo所遇到的一些坑，以及Hugo的LoveIt主题的一些bug之类的应对方案。下面是涉及到的Hexo、Hugo以及LoveIt各自的版本： hexo: 3.8.0 hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"Hugo无法使用abbrlink导致的URL与原本Hexo的URL不同步 原本的Hexo博客使用了hexo-abbrlink插件，目的是为每篇文章生成由字母和数字组成的随机URL，这样有利于SEO。迁移到Hugo后没找到类似的插件，只能用自带的slug功能来代替。 原本的文章文件头里有一个abbrlink属性，如下： --- abbrlink: 71bd19d3 --- 为了让旧的文章url和以前保存一致，于是全部加上一个slug属性，如下： --- abbrlink: 71bd19d3 slug: 71bd19d3 --- 然后在站点配置文件里这样配置： [permalinks] posts = \"/posts/:slug.html\" 这样就可以避免旧文章的URL在迁移后不一致的问题，但是这也引入了另一个问题，那就是每一篇新文章都要手动添加slug属性，否则就还是会直接拿文章标题来作为URL的一部分。 不过这点还是可以接受的，每篇文章额外配置slug也不算麻烦，毕竟博客园同样有提供这种给URL起别名的功能，可以把一系列的文章起一些比较接近的URL，更有利于访问。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"Valine评论功能无法使用 LoveIt主题的评论功能默认情况下是无法在本地使用的，除非修改模板渲染文件，或者启动本地服务时添加参数，如下： hugo server -e production 这样就可以在本地调试时使用\"评论系统\", “CDN” 和 “fingerprint”。 但是对于v0.2.10版本的LoveIt主题，只是加入启动参数依然无法使用Valine评论功能，原因是评论功能的模板文件有问题，需要我们自己修改才能正常使用，如下： 把\\themes\\LoveIt\\layouts\\partials\\comment.html拷贝到站点根目录下的\\layouts\\partials\\comment.html 打开拷贝后的comment.html，找到Valine相关的代码，把{{- if $valine.enable -}}和{{- end -}}之间的代码改成如下： {{- if $valine.enable -}} \u003cdiv id=\"valine\" class=\"comment\"\u003e\u003c/div\u003e \u003cscript src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"\u003e\u003c/script\u003e \u003cscript src='{{ $cdn.valineJS }}'\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\"\u003e new Valine({ el: '#valine' , appId: '{{ $valine.appId }}', appKey: '{{ $valine.appKey }}', notify: '{{ $valine.notify }}', verify: '{{ $valine.verify }}', avatar:'{{ $valine.avatar }}', placeholder: '{{ $valine.placeholder }}', visitor: '{{ $valine.visitor }}' }); \u003c/script\u003e {{- end -}} 之后在站点配置文件里启用valine，然后填上从LeanCloud的应用中得到的appId和appKey就可以用了。并且在使用了valine的同时，还可以顺带启用阅读次数的统计功能。以前用Hexo的时候，就是用的LeanCloud来帮忙统计阅读次数的。 LeanCloud的使用也很简单，去官网注册个账号，然后创建一个应用，然后进入该应用的配置，选择设置 -\u003e 应用Keys，然后复制该应用的appId和appKey到站点配置文件里就行了。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"lightgallery图片相册功能无法使用 在启用了lightgallery功能后无法触发，然后在LoveIt仓库里找到了类似的issue，发现必须使用带标题的图片才能使用相册功能，如下： ![Alt Text](/url/to/your/image \"Title\") 但是一般情况下在引入图片时都不会再特地起一个标题，尤其是原本就已经有大量文章里使用了不带标题的图片，想全部改过来是不可能的。 接着发现已经有人发起了PR修复了该issue，只是作者还没merge，所以只能把这段代码自行合并到自己的博客项目了。做法也很简单： 在站点根目录下创建的/layouts/_default/_markup/render-image.html 在新创建的这个render-image.html文件里黏贴下面的代码即可： {{ $figcap := or .Title .Text }} {{ $caption := or .Text \" \" }} {{- if eq $figcap $caption -}} {{ $caption = \" \" }} {{- end -}} {{- if $figcap -}} \u003cfigure\u003e {{- dict \"Src\" .Destination \"Title\" $figcap \"Caption\" $caption \"Linked\" true \"Resources\" .Page.Resources | partial \"plugin/image.html\" -}} \u003cfigcaption class=\"image-caption\"\u003e {{- $figcap | safeHTML -}} \u003c/figcaption\u003e \u003c/figure\u003e {{- else -}} {{- dict \"Src\" .Destination \"Title\" (path.Base .Destination) \"Resources\" .Page.Resources | partial \"plugin/image.html\" -}} {{- end -}} 另外，该做法会导致生成的图片下方多出一个figcaption标签，觉得这个图片名字标签太碍眼的，可以用下面的样式隐藏掉： /* 图片 */ figcaption { display: none !important; } ","date":"2020-10-12","objectID":"/lewky/hugo-4/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"lightgallery启用时，第二次加载页面时图片会变小 该issue可见于lightgallery启用时，图片会显示得很小，是设计如此还是bug#311 这是lazysizes的问题，具体参见[aFarkas/lazysizes#508]，解决方法是修改样式： img[data-sizes=\"auto\"] { display: block; width: 100%; } 如果觉得100%太大可以改成别的比例，我用的是width: 50%;。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"翻页后首页的图片显示不了 首页的头像和文章图片显示正常，但是点击跳转到第二页或者其他除第一页以外的页数时，所有的图片全部显示不了。按下F12查看显示不了的图片的url，可以发现图片的地址不正确，并没有附加上正确的网站地址前缀。 这个是因为图片的url配置不正确导致的。整个网站所使用的图片，其url要以/开头！这个涉及到站点的相对路径和绝对路径。 比如站点头像，是在站点配置文件里的avatarURL属性决定的。如果你的头像是存放在images/avatar.jpg，那么就要配置成avatarURL = \"/images/avatar.jpg\"。 其他图片同理，在文章里插入图片一般用法如下： ![avatar](/images/avatar.jpg) 当然了，如果你有图床之类的，直接写完整的地址也不会出现这个问题，如： ![avatar](https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/avatar.jpg) ","date":"2020-10-12","objectID":"/lewky/hugo-4/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"自定义样式文件_custom.scss无法生效 LoveIt主题有提供\\themes\\LoveIt\\assets\\css\\_custom.scss，可以在该文件内自定义页面的样式，但是经过测试并无法生效。不过最终还是在stackoverflow上找到了答案： You can use hugo’s extended (like https://github.com/gohugoio/hugo/releases/download/v0.53/hugo_extended_0.53_Windows-64bit.zip) version which automatically compiles SCSS to CSS for you. You can then customize all the setup. If you don’t want to/aren’t using the extended version, then ofc you will have to go old school with a watcher like ruby SASS or Gulp, etc. 简单的说，只有使用的是扩展版本的Hugo，才能令_custom.scss文件生效！！！因为原生的Hugo并不支持编译sass文件，必须使用扩展版本的Hugo才行。 所以请查看你所使用的Hugo版本，如果不是hugo_extended版本，请前往Hugo Release页面下载你当前版本Hugo所对应的hugo_extended版本。 比如我原本使用的是hugo_0.74.0_Windows-64bit.zip，就需要改为使用hugo_extended_0.74.0_Windows-64bit.zip。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"无法直接自定义JavaScript LoveIt主题没有直接提供自定义JavaScript的文件，只能通过修改页面的模板文件来引入自定义的JavaScript文件，具体做法可以参考Hugo系列(3) - LoveIt主题美化与博客功能增强#添加自定义的custom.js。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"文章摘要标志不生效 和Hexo不同，Hugo的文章摘要标志必须是\u003c!--more--\u003e，在more的两边不能有任何空格，且必须全小写，否则便不会生效。用法如下： ## Title Content. \u003c!--more--\u003e ","date":"2020-10-12","objectID":"/lewky/hugo-4/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"文章标题里的特殊符号不需要使用字符实体 在Hexo里，如果文章的标题里存在英文的双引号、冒号等特定的符号，必须使用字符实体来替代，否则就会报错。而在Hugo里，则没有这个需要，直接使用原本的符号就行。如果在标题里使用字符实体，并不会被自动解析成对应的字符。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"Console报错找不到/site.webmanifest 该文件和Progressive web applications (PWA) 有关，通过添加PWA到Hugo站点，可以实现离线访问的功能，也就是说断网状态下依然可以访问到你之前访问过的网页，换言之就是通过PWA来将访问过的网页资源缓存到了本地，所以断网下仍然可以继续访问网站。当然，恢复网络时会自动更新最新的页面资源。 有兴趣的可以去看看下面这几个网站： Add PWA to your Hugo site 改造你的网站，变身 PWA 基于Service Worker 的XSS攻击面拓展 后来又在LoveIt主题作者的一篇文章中找到了答案，如下： 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义browserconfig.xml和site.webmanifest文件来设置theme-color和background-color. 打开上面提及的网站，上传你想要作为网站图标的图片，按照提示走，会生成上述提及的所有文件，最后再下载下来，解压后将所有文件放置到站点根目录下的/static目录里即可。 记得把site.webmanifest的name和short_name填上你的网站名字。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:11:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"远程部署到GitHub Pages后build失败 在本地调试没问题，部署到Coding Pages也没问题，偏偏部署到GitHub Pages 就一直build失败，并一直发送邮件，可以从邮件里看到报错的原因，如下： Thepagebuildfailedforthe`master`branchwiththefollowingerror:Pagebuildfailed.Formoreinformation,seehttps://docs.github.com/github/working-with-github-pages/troubleshooting-jekyll-build-errors-for-github-pages-sites#troubleshooting-build-errors. ForinformationontroubleshootingJekyllsee:https://docs.github.com/articles/troubleshooting-jekyll-buildsIfyouhaveanyquestionsyoucansubmitarequestontheContactGitHubpageathttps://support.github.com/contact?repo_id=130235157\u0026page_build_id=208464262 可以看到报错说是Page build failed.，描述太过模糊不清，我只能一篇篇文章的排查测试。最终发现，问题出在了某篇文章里的代码块，如下： \u003cbody\u003e .... {% include '_custom/custom-foot.swig' %} \u003c/body\u003e \u003c/html\u003e 问题就出在了这个{% %}上，经过几番测试，发现一旦启用了LoveIt主题的Markdown输出功能（即将每篇文章link到原本的Markdown文件），就会造成GitHub Pages服务build失败。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:12:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"全局禁用Markdown输出功能 由于不想把这些造成问题的代码块删掉，于是最佳的解决方案就变成了禁用Markdown输出功能，在站点配置文件如下： [params] [params.page] # whether to show link to Raw Markdown content of the content # 是否显示原始 Markdown 文档内容的链接 linkToMarkdown = false # Options to make output .md files # 用于输出 Markdown 格式文档的设置 #[mediaTypes] # [mediaTypes.\"text/plain\"] # suffixes = [\"md\"] # Options to make output .md files # 用于输出 Markdown 格式文档的设置 #[outputFormats.MarkDown] # mediaType = \"text/plain\" # isPlainText = true # isHTML = false # Options to make hugo output files # 用于 Hugo 输出文档的设置 [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] # page = [\"HTML\", \"MarkDown\"] page = [\"HTML\"] section = [\"HTML\", \"RSS\"] taxonomy = [\"HTML\", \"RSS\"] taxonomyTerm = [\"HTML\"] 在站点配置文件了将linkToMarkdown配置为false，并将对应的三项Markdown输出的属性注释掉，终于解决了GitHub Pages编译失败的问题。 这个做法属于一刀切，后面考虑到依然需要输出md文件，于是想到了另一个解决方法，那就是把某些在GitHub Pages解析有问题的md文件给干掉，让这些引入了“问题”代码块的md文件不生成即可。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:12:1","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"局部禁用Markdown输出功能 首先要改模板文件，将\\themes\\LoveIt\\layouts\\_default\\single.md拷贝到\\layouts\\_default\\single.md，打开拷贝后的文件修改成如下内容： {{- $params := .Scratch.Get \"params\" -}} {{- if $params.linkToMarkdown -}} # {{ .Title }} {{ .RawContent }} {{- end -}} 然后在不想生成md文件的文章头里加上linkToMarkdown: false，如下： --- title: Hexo系列(3) - NexT主题和Markdown的写作技巧 tags: - Hexo - NexT主题 - 写作技巧 categories: - Hexo系列 abbrlink: 576ee548 slug: hexo-3 date: 2018-07-19T23:00:36+08:00 linkToMarkdown: false --- 这样就不会生成对应的md文件，也不会在页面尾部有阅读原始文档这个链接。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:12:2","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"终极方案：新增.nojekyll文件 在学习docsify的时候意外找到了最简单有效的解决方法，就是在站点根目录的static目录下添加一个名为.nojekyll的空内容文件。 .nojekyll文件会告知GitHub Pages不使用jekyll来渲染静态站点，这样就不会和md文件里的某些代码冲突而build失败。 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:12:3","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"网站配置了keywords没有生效 在 https://seo.chinaz.com 里查询站点时发现页面TDK信息里的关键词(KeyWords)为空，然而站点配置文件里是有配置的，如下： # 网站关键词 keywords = \"雨临Lewis,Java,hugo,hexo,博客\" F12查看网站源码后发现缺少keywords这个meta标签，检查了模板文件后发现是LoveIt没有引入该标签，需要修改模板才行。 将\\themes\\LoveIt\\layouts\\partials\\head\\meta.html拷贝到\\layouts\\partials\\head\\meta.html，打开该文件并在\u003cmeta name=\"Description\" content=\"{{ $params.description | default .Site.Params.description }}\"\u003e上方加上如下代码： \u003cmeta name=\"keywords\" content=\"{{ $params.keywords | default .Site.Params.keywords }}\"\u003e ","date":"2020-10-12","objectID":"/lewky/hugo-4/:13:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"配置文件里的license不生效 这个是模板文件有问题，拷贝\\themes\\LoveIt\\layouts\\partials\\single\\footer.html到\\layouts\\partials\\single\\footer.html，打开拷贝后的文件，找到如下内容： \u003cdiv class=\"post-info-license\"\u003e {{- with $params.license | string -}} \u003cspan\u003e {{- . | safeHTML -}} \u003c/span\u003e {{- end -}} \u003c/div\u003e 改成如下： \u003cdiv class=\"post-info-license\"\u003e {{- with $params.license | default .Site.Params.footer.license | string -}} \u003cspan\u003e {{- . | safeHTML -}} \u003c/span\u003e {{- end -}} \u003c/div\u003e ","date":"2020-10-12","objectID":"/lewky/hugo-4/:14:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"参考链接 add more markdown images to gallery when lightgallery is enabled Valine中文文档 How to setup SCSS with Hugo Hugo Release - 0.74.0 lightgallery启用时，图片会显示得很小，是设计如此还是bug#311 主题文档 - 基本概念 ","date":"2020-10-12","objectID":"/lewky/hugo-4/:15:0","tags":["Lewky-Hugo"],"title":"Hugo系列(4) - 从Hexo迁移至Hugo以及使用LoveIt主题的踩坑记录","uri":"/lewky/hugo-4/"},{"categories":null,"content":"前言 使用Hexo搭建个人博客也有两年多时间了，当文章数量达到上百篇之后，开始发现Hexo生成文章的效率越来越慢，直到每次生成都需要至少五分钟的时间。我发现生成效率和文章涉及到的分类和标签有很大关系，由于文章数量多，每篇文章又都关联了若干个分类和标签，再加上我使用了压缩样式的插件，最终导致极其低下的生成效率。 在经过一段时间的考量后，决定将Hexo博客迁移到Hugo。Hugo是用go语言开发的，在用法上和Hexo类似，可以简单地把Hugo当成go语言版的Hexo，但是它拥有更快的生成效率。下面是官网的原话： The world’s fastest framework for building websites Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. ","date":"2020-10-11","objectID":"/lewky/hugo-1/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"安装 和Hexo不同，Hugo安装非常简单，只需要去Hugo Release下载操作系统对应的二进制文件即可（hugo或者hugo.exe)。 对于Windows平台，一般是一个zip文件，解压后里面有个hugo.exe文件。将该文件所在目录添加到环境变量path里，即可在cmd里通过hugo version检测是否能正常运行hugo命令。 如下是我安装的hugo版本： \u003ehugo version Hugo Static Site Generator v0.74.2/extended windows/amd64 BuildDate: unknown 其他平台的安装方法可以参考官方文档：Install Hugo ","date":"2020-10-11","objectID":"/lewky/hugo-1/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"创建站点 首先需要创建一个新的个人站点： hugo new site blog blog就是你的博客站点所在的目录，也是这个站点的根目录，创建站点后目录结构如下： archetypes/ content/ data/ layouts/ static/ themes/ config.toml 下面简单介绍下Hugo根目录下的各个文件目录的作用： archetypes存放创建文件时使用的模板，可以自定义front matter属性。 assets存放需要被Hugo Pipes处理的文件，且只有使用了.Permalink或者.RelPermalink的文件才能被发布到public目录。 注意，默认不会创建assets目录。 config是配置文件，可以有JSON、 YAML或者TOML三种格式，默认使用根目录下的config.toml、config.yaml或config.json中的某一个。可以通过--config来配置读取一个或多个配置文件，如：hugo --config a.toml,b.toml,c.toml。 注意，默认不会创建config目录。 content存放的各种md文件用于部署站点，该目录下可以自行创建若干个子目录来便于对文章进行分类，这些子目录被称为section。 data目录存放的是用于定义变量的模板文件，相当于Java里的常量类，这些文件有JSON、 YAML或者TOML三种格式，会在生成站点时被使用到。一般用不到该功能，具体用法可以参考：data templates layouts目录存放的模板文件用于渲染html页面，模板里可以定义不同页面的html代码。 static目录存放的是静态内容：图片、CSS、JavaScript等。 resources目录用于缓存某些文件来提高生成效率。 注意，默认不会创建resources目录。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"添加主题 为新站点添加一个主题，以我使用的LoveIt主题为例，先将主题代码放置到themes目录下： cd blog git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 接着修改config.toml： theme = \"LoveIt\" 这里的LoveIt对应themes目录下的主题的文件夹名字。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"新建文章 新建一篇文章： hugo new posts/first.md 该命令会在content/posts目录下生成first.md文件，打开进行编辑： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true --- ## First First blog. 两行---里的属性是front matter，用来设置当前文章的属性配置。front matter的内容可以使用3种不同的格式来定义，两行---之间对应的是YAML格式，两行+++之间对应的是TOML格式，{和}之间对应的是JSON格式。 建议用YAML格式来定义，这样从Hexo迁移到Hugo的成本会更低。 下面是官方文档提供的3种不同格式的front matter的样例，有兴趣的可以了解下。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"TOML Example +++ title = \"spf13-vim 3.0 release and new website\" description = \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags = [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] date = \"2012-04-06\" categories = [ \"Development\", \"VIM\" ] slug = \"spf13-vim-3-0-release-and-new-website\" +++ Content of the file goes Here ","date":"2020-10-11","objectID":"/lewky/hugo-1/:5:1","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"YAML Example --- title: \"spf13-vim 3.0 release and new website\" description: \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags: [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] lastmod: 2015-12-23 date: \"2012-04-06\" categories: - \"Development\" - \"VIM\" slug: \"spf13-vim-3-0-release-and-new-website\" --- Content of the file goes Here ","date":"2020-10-11","objectID":"/lewky/hugo-1/:5:2","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"JSON Example { \"title\": \"spf13-vim 3.0 release and new website\", \"description\": \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\", \"tags\": [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ], \"date\": \"2012-04-06\", \"categories\": [ \"Development\", \"VIM\" ], \"slug\": \"spf13-vim-3-0-release-and-new-website\", } Content of the file goes Here ","date":"2020-10-11","objectID":"/lewky/hugo-1/:5:3","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"启动Hugo服务 输入命令： hugo server -D 在本地启动服务后可以在 http://localhost:1313/ 访问个人站点。该命令仅用于本地调试，支持热修改，也就是说在启动服务时修改文章会实时生效，但是该命令不会真正生成静态文件。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"生成静态页面 输入命令： hugo -D 默认会在站点根目录的public/目录下生成对应的静态页面，可以通过在命令行指定-d或者--destination参数来改变静态页面的存放路径，也可以通过在配置文件中设置publishDir来指定。 该命令生成的静态页面文件是用来部署到pages服务的，比如GitHub pages或者Coding pages等。 另外，hugo允许对生成的静态页面设置特殊的参数，比如在文章的front matter里设置参数：draft, publishdate和expirydate。如下： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true publishdate: 2020-09-18T21:57:28+08:00 expirydate: 2020-09-28T21:57:28+08:00 --- draft: true表明该文章是草稿，如果在启用服务时不指定参数-D或--buildDrafts，或者在配置文件config.toml中配置buildDrafts = true，则会在生成文章时忽略草稿。如果不想指定该参数就生成文章，需要改为draft: false或者将其删去。 publishdate: 2020-09-18T21:57:28+08:00表示将来发布的时间，如果不指定参数-F或--buildFuture，或者在配置文件config.toml中配置buildFuture = true，则无法在规定的日期之前生成该文章。 expirydate: 2020-09-28T21:57:28+08:00表示过期时间，如果不指定参数-E或--buildExpired，或者在配置文件config.toml中配置buildExpired = true，则无法在规定的日期之后生成该文章。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"远程部署到Pages服务 Hugo和Hexo一样是静态站点生成工具，不需要服务器即可进行部署运行，为了可以在网络上也访问到我们的博客，需要将静态博客部署到某些网站的pages服务上，借用人家的服务器进行托管。 常用的Pages服务有GitHub pages、Coding pages等，由于暂时没有找到好用的Hugo的远程部署插件，所以这里使用Git命令来进行远程部署。 注意，所谓的远程部署，其实就是把hugo命令生成的public目录里的所有文件push到远程库，然后启用Pages服务进行静态网站的部署。这样，当有人访问静态站点的主页时，Pages服务就会去读取根目录下的index.html。 本文以部署到GitHub Pages为例。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"安装Git 首先要安装Git，Git是一个版本控制工具，可以用来帮忙管理我们的博客，直接前往官网下载安装包即可。 下载链接 在安装的时候会问你是否安装git的cmd工具，把这个也一起安装了后就可以不需要配置环境变量了。这样就可以直接在cmd窗口里运行Git命令，如git version。 当然也可以直接使用安装时自带的Git Bash，个人更喜欢用Git Bash。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:8:1","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"在GitHub上创建一个仓库 首先在GitHub上创建一个仓库，仓库的名字格式为\u003cusername\u003e.github.io。比如我的GitHub用户名是lewky，那么这个仓库就命名为lewky.github.io。 之所以这样规定命名，是因为GitHub默认会把\u003cusername\u003e.github.io的master分支的内容部署到GitHub Pages站点上。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:8:2","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"SSH key的创建与配置 因为要使用SSH的方式来和GitHub仓库进行交互，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。关于SSH key的创建与配置到GitHub，可以看我的另一篇文章的一个小章节：#四、SSH key的创建与配置 的4.1 ~ 4.3的部分。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:8:3","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"在本地关联GitHub的站点仓库 在本地创建一个新的文件夹，比如名为hugo-deploy。首先是初始化该文件夹为Git项目，命令如下： git init 然后把本地的Hugo博客通过hugo命令生成的public目录下的所有文件都复制到这个新建的文件夹hugo-deploy里，然后用Git命令把这些复制过来的文件添加到本地仓库： git add . 接着是提交修改，命令如下： git commit -m \"第一次提交\" -m参数代表提交信息，用于说明本次提交的目的，比如你发布了什么文章、修改了什么样式之类的信息说明。该参数不可以省略，不然会报错，另外要注意这里的双引号是英文的双引号。 接着把刚刚在GitHub上创建的仓库的SSH地址复制下来：点击GitHub仓库的Code绿色按钮，点击SSH就可以看到该仓库的SSH地址，然后点击地址后面的复制按钮即可。 用Git命令把这个SSH地址添加到我们的本地仓库，这样这个GitHub仓库就将作为我们的远程仓库，然后就可以通过Git命令把站点文件部署到GitHub上： git remote add origin git@github.com:lewky/lewky.github.io.git 这里的origin是远程库的别名，后面是要关联的远程库SSH地址。 然后就是最后一步了，把我们刚刚提交到本地库的文件给推送到远程库。由于远程库刚刚创建，还不存在本地的分支（默认是master分支），所以第一次提交的命令要加是一个-u参数： git push -u origin master 这样GitHub远程库上会创建出对应的master分支，以后推送文件的时候，就不需要再加上该参数了： git push origin master ","date":"2020-10-11","objectID":"/lewky/hugo-1/:8:4","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"启用GitHub Pages服务 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"通过master分支来启用GitHub Pages 现在我们的GitHub仓库里已经有站点的文件了，接下来点击Settings进入该仓库的设置页面，找到Github Pages这一项，选择以master分支作为Source，然后保存；接下来这个仓库就会被部署到https://{username}.github.io/{仓库名}。 你会发现这里的url里多了子路径，但是如果仓库名是{username}.github.io的格式，那该url就会被简化为https://{username}.github.io/，这样就不需要在url后边添加上仓库名来访问个人站点了。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:9:1","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"通过gh-pages分支来启用GitHub Pages 还有一种启用的方式是给仓库创建一个名为gh-pages的分支，然后把该分支设置为Source，同样可以让该仓库使用到GitHub Pages服务。 这种启用方式是只有当存在多个项目都要使用GitHub Pages才使用的，因为目前GitHub只允许一个仓库可以通过master分支来启用GitHub Pages。如果其他仓库也要使用GitHub Pages，就需要创建gh-pages分支来部署。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:9:2","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"怎么同时部署到两个不同的Pages服务 进入本地仓库的目录，打开隐藏文件夹.git下的config文件，多添加一行url = xxx，如下： [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true [remote \"origin\"] url = git@github.com:lewky/lewky.github.io.git url = git@e.coding.net:lewky/hugo-deploy/hugo-deploy.git fetch = +refs/heads/*:refs/remotes/origin/* [pull] rebase = true [branch \"master\"] remote = origin merge = refs/heads/master 此后只需要git push origin master就可以同时推送到多个远程库。 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"参考链接 Hugo Front Matter Hugo Quick Start Install Hugo Directory Structure Explained Git的使用–如何将本地项目上传到Github git push同时推送到两个远程仓库 ","date":"2020-10-11","objectID":"/lewky/hugo-1/:11:0","tags":["Lewky-Hugo"],"title":"Hugo系列(1) - 简单搭建教程与远程部署","uri":"/lewky/hugo-1/"},{"categories":null,"content":"前言 本博客使用的是Hugo的LoveIt主题，本文也是基于该主题而写的，不过Hugo的美化步骤应该大同小异，版本如下： hexo: 3.8.0 hugo: v0.74.2/extended windows/amd64 BuildDate: unknown LoveIt: v0.2.10 请注意，本文的所有功能都离不开两个新增加的文件：_custom.scss和custom.js，部分功能还需要jquery，在第一章中会提及如何引入。 另外本文篇幅太长，阅读体验不好，将其进行分章如下： Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章 Hugo系列(3.1) - LoveIt主题美化与博客功能增强 · 第二章 Hugo系列(3.2) - LoveIt主题美化与博客功能增强 · 第三章 Hugo系列(3.3) - LoveIt主题美化与博客功能增强 · 第四章 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加自定义的_custom.scss LoveIt主题提供了一个自定义的_custom.scss，可以在该文件里添加自定义的css样式。该文件目录位于\\themes\\LoveIt\\assets\\css\\_custom.scss，不建议直接在该文件里写css代码。 Hugo在渲染页面时优先读取站点根目录下的同名字的目录和文件，所以可以利用这个特点来美化主题。只需要把想修改的主题模板文件拷贝到根目录下同样的目录中并进行修改，这样就可以在不改动原本的主题文件的情况下实现主题美化。 首先在站点根目录下创建一个自定义的文件：\\assets\\css\\_custom.scss，这样Hugo就会最终以该文件来渲染页面的样式。 这是我个人站点的css文件，有兴趣的可以看看。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"注意！！！ 这里有个很关键的点，只有使用的是扩展版本的Hugo，才能令_custom.scss文件生效！！！因为原生的Hugo并不支持编译sass文件，必须使用扩展版本的Hugo才行。 所以请查看你所使用的Hugo版本，如果不是hugo_extended版本，请前往Hugo Release页面下载你当前版本Hugo所对应的hugo_extended版本。 比如我原本使用的是hugo_0.74.0_Windows-64bit.zip，就需要改为使用hugo_extended_0.74.0_Windows-64bit.zip。 此外，本文会涉及多个文件的修改，包括hmtl、js、scss等文件类型，且由于引入了中文字符，可能导致页面显示乱码，这是因为文件的编码使用的是ANSI，需要改为UTF-8的编码。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:2:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加自定义的custom.js LoveIt主题并没有提供一个文件来让我们自定义JavaScript，所以需要自己创建一个js文件来自定义JavaScript。 首先在站点根目录下创建一个自定义的JavaScript文件：\\static\\js\\custom.js。这个文件需要在body的闭合标签之前引入，并且要在theme.min.js的引入顺序之后。这样可以防止样式被其他文件覆盖，并且不会因为JavaScript文件假装太久导致页面长时间的空白。 对于LoveIt主题，custom.js添加在\\themes\\LoveIt\\layouts\\partials\\assets.html里。 首先把该文件拷贝到根目录下的\\layouts\\partials\\assets.html，然后打开拷贝后的文件，把自定义的JavaScript文件添加到最末尾的{{- partial \"plugin/analytics.html\" . -}}的上一行： {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"/js/custom.js\"\u003e\u003c/script\u003e 由于本文提及的部分功能会用到jQuery，建议一起引入，最终如下： \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js\"\u003e\u003c/script\u003e {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"/js/custom.js\"\u003e\u003c/script\u003e 如果有其他的JavaScript文件要引入，加在一样的地方就行，但是要放在自定义的custom.js之前。这是我的custom.js文件，有兴趣的可以看看。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加全局cdn变量 对于一些静态资源，比如图片、音乐文件、第三方库等，如果有自己的cdn或者图床等，可以在站点配置文件自定义一个cdn变量，如下： [params] # cdn变量，末尾不需要加/ cdnPrefix = \"http://xxxx\" 接下来就可以在你需要的地方使用该变量，大概有如下3种用法。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"在md文件中使用 在md文件中可以用内置的shortcodes来使用该变量： {{\u003c param cdnPrefix \u003e}} ![avatar.jpg]({{\u003c param cdnPrefix \u003e}}/images/avatar.jpg) ","date":"2020-10-11","objectID":"/lewky/hugo-3/:4:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"在模板文件中使用 在layouts目录下有很多html文件，这些是用来渲染站点的模板文件，可以用Hugo的语法来引入该变量： {{ .Site.Params.cdnPrefix }} 如果在一个模板文件里有多个地方使用到该变量，可以定义一个局部变量来使用： {{- $cdn := .Site.Params.cdnPrefix -}} /* 使用局部变量 */ {{ $cdn }} ","date":"2020-10-11","objectID":"/lewky/hugo-3/:4:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"在JavaScript文件中使用 由于JavaScript文件中不能使用上述的shortcodes或Hugo语法来引用变量，只能通过在\\layouts\\partials\\assets.html中用JavaScript语法来引入该变量，如下： /* 这是可以应用于JavaScript文件的全局变量 */ \u003cscript\u003e /* cdn for some static resources */ var $cdnPrefix = {{ .Site.Params.cdnPrefix }}; \u003c/script\u003e 这样就可以在其他被引入的JavaScript文件中使用这个$cdnPrefix变量： $(function () { $.backstretch([ $cdnPrefix + \"/images/background/saber1.jpg\" ], { duration: 60000, fade: 1500 }); }); 如果是想在模板文件里引入某个自定义的JavaScript文件，如下： {{- /* 自定义的js文件 */ -}} \u003cscript type=\"text/javascript\" src=\"{{ .Site.Params.cdnPrefix }}/js/custom.js\"\u003e\u003c/script\u003e ","date":"2020-10-11","objectID":"/lewky/hugo-3/:4:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"主题自带的admonition样式 LoveIt提供了admonition shortcode，支持 12 种样式，可以在页面中插入提示的横幅。代码如下： {{\u003c admonition \u003e}} 一个 **注意** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition abstract \u003e}} 一个 **摘要** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition info \u003e}} 一个 **信息** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition tip \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition success \u003e}} 一个 **成功** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition question \u003e}} 一个 **问题** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition warning \u003e}} 一个 **警告** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition failure \u003e}} 一个 **失败** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition danger \u003e}} 一个 **危险** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition bug \u003e}} 一个 **Bug** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition example \u003e}} 一个 **示例** 横幅 {{\u003c /admonition \u003e}} {{\u003c admonition quote \u003e}} 一个 **引用** 横幅 {{\u003c /admonition \u003e}} 效果如下： 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r ","date":"2020-10-11","objectID":"/lewky/hugo-3/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"自定义404页面 主题默认的404页面太普通，可以通过新增\\layouts\\404.html来自定义自己想要的404页面。这是本站的404页面，有兴趣的可以看看源码页面。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加背景图片轮播 这个功能需要引入图片轮播插件jquery-backstretch的cdn，并且该插件依赖于jQuery，需要在引入该插件之前引入jQuery。 打开\\layouts\\partials\\assets.html，在你引入的custom.js的上面一行添加如下代码（必须要在custom.js之前引入这两个文件才有效果）： \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery@2.1.3/dist/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/jquery-backstretch@2.1.18/jquery.backstretch.min.js\"\u003e\u003c/script\u003e 然后在custom.js里添加如下代码，具体想要轮播哪些图片可以自行修改，如下： /* 轮播背景图片 */ $(function () { $.backstretch([ \"/images/background/saber1.jpg\", \"/images/background/saber2.jpg\", \"/images/background/wlop.jpg\" ], { duration: 60000, fade: 1500 }); }); ","date":"2020-10-11","objectID":"/lewky/hugo-3/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加搜索功能 LoveIt主题自带的搜索插件是lunr和algolia，这两个的使用都比较麻烦，后者甚至还想要去注册账号，虽然可以免费使用搜索服务，但是抓取收录时间好像是一小时一次，并且还有每月使用量的限制，太不便利了。 之前在Hexo那边用的是自带的搜索插件，是每次部署时自动为所有文章生成索引到一个文件里，然后直接搜索该文件来实现本地搜索功能。这个还是比较方便个人站点使用的，于是在网上找到了类似的一个Hugo专用的搜索插件hugo-search-fuse-js。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"安装搜索插件hugo-search-fuse-js到本地 hugo-search-fuse-js并不是一个单独的主题，而是Hugo主题的一个组件： 下载hugo-search-fuse-js到站点的主题目录/themes/hugo-search-fuse-js下，注意，目录名必须是hugo-search-fuse-js 把该主题组件名字添加到站点配置文件里，注意，搜索组件名字要在最前面，后面跟着的是你的主题的文件夹名字： theme = [\"hugo-search-fuse-js\", \"my-theme\"] 新建一个content/search.md文件，内容如下： +++ title = \"Search\" layout = \"search\" outputs = [\"html\", \"json\"] [sitemap] priority = 0.1 +++ ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"修改页面模板文件baseof.html 把主题目录下的\\themes\\LoveIt\\layouts\\_default\\baseof.html拷贝到站点根目录下的\\layouts\\_default\\baseof.html 在拷贝后的baseof.html的适当位置插入两段代码：{{ block \"main\" . }}{{ end }}和{{ block \"footer\" . }}{{ end }}，下面是一个修改后的样例： \u003cdiv class=\"wrapper\"\u003e {{- partial \"header.html\" . -}} \u003cmain class=\"main\"\u003e \u003cdiv class=\"container\"\u003e {{ block \"main\" . }}{{ end }} {{- block \"content\" . }}{{ end -}} \u003c/div\u003e \u003c/main\u003e {{- partial \"footer.html\" . -}} {{ block \"footer\" . }}{{ end }} \u003c/div\u003e ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加搜索按钮 在站点配置文件里添加一个新的按钮给搜索功能使用，如下： [menu] [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"搜索\" weight = 7 identifier = \"search\" url = \"/search/\" 如果你的配置文件里的菜单属性是多语言的，样例如下： [languages] [languages.en] [languages.en.menu] [[languages.en.menu.main]] pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"Search\" weight = 7 identifier = \"search\" url = \"/search/\" ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"关闭LoveIt主题默认的搜索插件 在站点配置文件里把默认的搜索插件关闭，如下： [params] [params.app] [params.search] enable = false 如果你使用的是多语言的配置，则应该把每个语言的搜索插件都关闭，如下： [languages] [languages.en] [languages.en.params] [languages.en.params.search] enable = false [languages.zh-cn] [languages.zh-cn.params] [languages.zh-cn.params.search] enable = false ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"修改搜索页面的样式 如果对该插件生成的搜索页面样式不满意，可以自行修改，下面是我的样式代码： /* 搜索页面 */ .search { position: relative; padding-top: 3.5rem; padding-bottom: 1rem; width: 57.5%; margin: 0 auto; background: white; opacity: .95; } [theme=dark] .search { background: #3a3535; } [theme=dark] .search header, .search header { background-color: #f8f8f8; } [theme=dark] .search header:hover, .search header:hover { -webkit-box-shadow: none; box-shadow: none; } .search header h1 { padding-left: 1rem; background: white; } [theme=dark] .search header h1 { background: #3a3535; } [theme=dark] .search input, .search input { height: initial; width: initial; color: initial; background-color: white; margin: 0 0 0 1rem; border-width: 2px; border-style: inset; border-color: initial; border-image: initial; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; } .search #search-results { padding-left: 1rem; padding-right: 1rem; } [theme=dark] a:active, [theme=dark] a:hover { color: #2d96bd; } .search hr { margin-left: 1rem; margin-right: 1rem; } ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:5","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"优化中文搜索效果 这个搜索功能借助了Fuse.js模糊搜索引擎，为了更好的适配中文搜索结果，需要修改模糊搜索的相关参数，相对的会导致英文搜索结果变多，不过这个可以接受。因为搜索结果变多了，总好过搜索不出来想要的中文结果。而且可以通过设置搜索结果的权重来改变结果的排序，这样越前面的搜索结果就越是我们想要的。 打开\\themes\\hugo-search-fuse-js\\static\\js\\search.js，这里面配置了fuse.js的搜索配置选项，可以参考下我的配置，我已经添加了部分中文注释： // Options for fuse.js let fuseOptions = { shouldSort: true, // 是否按分数对结果列表排序 includeMatches: true, // 是否应将分数包含在结果集中。0分表示完全匹配，1分表示完全不匹配。 tokenize: true, matchAllTokens: true, threshold: 0.2, // 匹配算法阈值。阈值为0.0需要完全匹配（字母和位置），阈值为1.0将匹配任何内容。 location: 0, // 确定文本中预期找到的模式的大致位置。 /** * 确定匹配与模糊位置（由位置指定）的距离。一个精确的字母匹配，即距离模糊位置很远的字符将被视为完全不匹配。 * 距离为0要求匹配位于指定的准确位置，距离为100则要求完全匹配位于使用阈值0.2找到的位置的20个字符以内。 */ distance: 100, maxPatternLength: 64, // 模式的最大长度 minMatchCharLength: 2, // 模式的最小字符长度 keys: [ {name:\"title\",weight:0.8}, {name:\"tags\",weight:0.5}, {name:\"categories\",weight:0.5}, {name:\"contents\",weight:0.4} ] }; 这里和中文搜索有关的主要就3个选项：threshold，location，distance。 threshold是阈值，这个参数搭配distance使用。如果阈值填了0.0，相当于distance没有意义。location填0就行，distance填100就足够了，太大了会导致搜索到过多的结果。上面根据我个人的中文搜索测试结果，选择了这样的配置： threshold: 0.2, location: 0, distance: 100 可以根据个人情况来修改这几个参数的值，另外我还将minMatchCharLength的值改成了2，不过经过测试，和之前默认的3并没有什么差别。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:8:6","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"如何添加自定义的页面 除了发布草稿和正文，我们还可以添加自定义的页面page。page不会像文章那样被渲染，而是被渲染成一个单独的页面，类似于你的文档、标签页面。 方法很简单： 在站点根目录的/content/目录下，新建一个文件夹，比如about文件夹。然后在该文件夹里新建一个index.md文件，该文件将作为站点访问该目录的页面，你可以将其当成一篇特殊的文章。 在index.md文件里加上下面的内容，实际上这里只需要title就够了，date这个日期属性可要可不要，因为page页面是看不到这个日期的： --- title: \"关于\" date: 2018-04-24T22:01:44+08:00 --- `` 接下来你就可以像写普通文章一样，在这个index.md文件里随便写你想要展示的内容就行了。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加友链页面 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"新建Page页面 首先在站点根目录的/content/目录下，新建一个friends文件夹。在该文件夹里新建一个index.md文件，内容如下： --- title: \"友链墙\" --- 由于博主想要将友链分类，并能使用上目录，所以不使用这种page形式的友链页面，而是直接创建一篇文章作为友链使用，文件头如下： title: \"友链墙\" url: friends hiddenFromHomePage: true ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:1","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加friend.html 我们通过自定义一个shortcode来实现该功能，以后就可以方便地通过这个shortcode快速新增友链到页面上。 在站点根目录下新增一个文件：/layouts/shortcodes/friend.html，其内容如下： {{ if .IsNamedParams }} {{ $defaultImg := \"https://sdn.geekzu.org/avatar/d41d8cd98f00b204e9800998ecf8427e?d=retro\" }} \u003ca target=\"_blank\" href={{ .Get \"url\" }} title={{ .Get \"name\" }}---{{ .Get \"word\" }} class=\"friend url\"\u003e \u003cdiv class=\"friend block whole {{ .Get \"primary-color\" | default \"default\"}} {{ .Get \"border-animation\" | default \"shadow\"}}\"\u003e \u003cdiv class=\"friend block left\"\u003e \u003cimg class=\"friend logo {{ .Get \"img-animation\" | default \"rotate\"}}\" src={{ .Get \"logo\" }} onerror=\"this.src='{{ $defaultImg }}'\" /\u003e \u003c/div\u003e \u003cdiv class=\"friend block right\"\u003e \u003cdiv class=\"friend name\"\u003e{{ .Get \"name\" }}\u003c/div\u003e \u003cdiv class=\"friend info\"\u003e\"{{ .Get \"word\" }}\"\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/a\u003e {{ end }} ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:2","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"添加样式文件并引入 在站点根目录下新增一个文件：/assets/css/_partial/_single/_friend.scss，内容如下： .friend.url { text-decoration: none !important; color: black; } .friend.logo { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; margin-top: 14px !important; margin-left: 14px !important; background-color: #fff; } .friend.block.whole { height: 92px; margin-top: 8px; margin-left: 4px; width: 31%; display: inline-flex !important; border-radius: 5px; background: rgba(14, 220, 220, 0.15); \u0026.shadow { margin-right: 4px; box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, 0.2); } \u0026.borderFlash { border-width: 3.5px; border-style: solid; animation: borderFlash 2s infinite alternate; } \u0026.led { animation: led 3s infinite alternate; } \u0026.bln { animation: bln 3s infinite alternate; } } .friend.block.whole { \u0026:hover { color: white; \u0026 .friend.info { color: white; } } \u0026.default { --primary-color: #215bb3bf; \u0026:hover { background: rgba(33, 91, 179, 0.75); } } \u0026.red { --primary-color: #e72638; \u0026:hover { background: rgba(231, 38, 56, 0.75); } } \u0026.green { --primary-color: #2ec58d; \u0026:hover { background: rgba(21, 167, 33, 0.75); } } \u0026.blue { --primary-color: #2575fc; \u0026:hover { background: rgba(37, 117, 252, 0.75); } } \u0026.linear-red { --primary-color: #e72638; \u0026:hover { background: linear-gradient(to right, #f9cdcd 0, #e72638 35%); } } \u0026.linear-green { --primary-color: #2ec58d; \u0026:hover { background: linear-gradient(to right, #1d7544 0, #2ec58d 35%); } } \u0026.linear-blue { --primary-color: #2575fc; \u0026:hover { background: linear-gradient(to right, #6a11cb 0, #2575fc 35%); } } } .friend.block.whole .friend.block.left img { \u0026.auto_rotate_left { animation: auto_rotate_left 3s linear infinite; } \u0026.auto_rotate_right { animation: auto_rotate_right 3s linear infinite; } } .friend.block.whole:hover .friend.block.left img { \u0026.rotate { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } } .friend.block.left { width: 92px; min-width: 92px; float: left; } .friend.block.left { margin-right: 2px; } .friend.block.right { margin-top: 18px; margin-right: 18px; } .friend.name { overflow: hidden; font-weight: bolder; word-wrap:break-word; word-break: break-all; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 1; -webkit-box-orient: vertical; } .friend.info { margin-top: 3px; overflow: hidden; word-wrap:break-word; word-break: break-all; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; line-height: normal; font-size: 0.8rem; color: #7a7a7a; } @media screen and (max-width: 900px) { .friend.info { display: none; } .friend.block.whole { width: 45%; } .friend.block.left { width: 84px; margin-left: 15px; } .friend.block.right { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friend.name { font-size: 14px; } } @keyframes bln { 0% { box-shadow: 0 0 5px grey,inset 0 0 5px grey,0 1px 0 grey; box-shadow: 0 0 5px var(--primary-color,grey),inset 0 0 5px var(--primary-color,grey),0 1px 0 var(--primary-color,grey) } to { box-shadow: 0 0 16px grey,inset 0 0 8px grey,0 1px 0 grey; box-shadow: 0 0 16px var(--primary-color,grey),inset 0 0 8px var(--primary-color,grey),0 1px 0 var(--primary-color,grey) } } @keyframes led { 0% { box-shadow: 0 0 4px #ca00ff } 25% { box-shadow: 0 0 16px #00b5e5 } 50% { box-shadow: 0 0 4px #00f } 75% { box-shadow: 0 0 16px #b1da21 } to { box-shadow: 0 0 4px red } } @keyframes borderFlash { 0% { border-color: white; } to { border-color: grey; border-color: var(--primary-color,grey) } } @keyframes auto_rotate_left { 0% { transform: rotate(0) } to { transform: rotate(-1turn) } } @keyframes auto_rotate_right { 0% { transf","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:3","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"另一种添加样式文件并引入的方案 感谢@kirito的建议，原友链样式的方案会侵入原本的主题样式，并且也不是所有页面都需要这个友链样式，所以可以采用另一种方案来选择性地引入友链样式：即同样使用shortcode来引入。 首先创建一个/assets/css/friend.scss文件，内容跟上文的_friend.scss文件一样。然后新增一个/layouts/shortcodes/friend-css.html文件： {{ $options := (dict \"targetPath\" \"/css/friend.css\" \"outputStyle\" \"compressed\" \"enableSourceMap\" true) }} {{ $style := resources.Get \"css/friend.scss\" | resources.ToCSS $options }} \u003clink rel=\"stylesheet\" href=\"{{ $style.RelPermalink }}\"\u003e 在需要使用友链的页面、文章中添加如下shortcode来引入友链样式即可： {{\u003c link-css \u003e}} ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:4","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"在菜单栏里新增一个友链按钮 打开站点配置文件config.toml，添加友链按钮： # 菜单配置 [menu] [[menu.main]] pre = \"\u003ci class='fas fa-fw fa-fan fa-spin'\u003e\u003c/i\u003e\" name = \"友链\" identifier = \"friends\" url = \"/friends/\" weight = 6 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:5","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"使用示例和效果展示 在你想要引入友链的文章里使用下面的代码即可自动渲染成对应的友链： {{\u003c link name=\"雨临Lewis的博客\" url=\"https://lewky.cn\" logo=\"https://cdn.jsdelivr.net/gh/lewky/lewky.github.io@master/images/avatar.jpg\" word=\"不想当写手的码农不是好咸鱼_(xз」∠)_\" \u003e}} 上面代码里的四个属性为必填项，还可以额外指定三个不同的属性来选择友链内置的多种样式，如下： //边框及鼠标悬停的背景颜色，允许设置渐变色 //支持7种：default、red、green、blue、linear-red、linear-green、linear-blue primary-color=\"default\" //头像动画：rotate(鼠标悬停时旋转，此为默认效果)、auto_rotate_left(左旋转)、auto_rotate_right(右旋转) img-animation=\"rotate\" //边框动画：shadow(阴影，此为默认效果)、borderFlash(边框闪现)、led(跑马灯)、bln(主颜色呼吸灯) border-animation=\"shadow\" \r\r雨临Lewis的博客\r不想当写手的码农不是好咸鱼_(xз」∠)_\r\r\r\r\r雨临Lewis的博客\r不想当写手的码农不是好咸鱼_(xз」∠)_\r\r\r\r\r雨临Lewis的博客\r不想当写手的码农不是好咸鱼_(xз」∠)_\r\r\r\r如果友链的头像无法正常显示，会以一个默认的Gravatar头像显示。此外，在移动端会隐藏站点描述，只显示头像和站点名称，你可以通过将当前窗口缩小到宽度最小即可看到效果。 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:10:6","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"参考链接 自定义Hugo主题样式 kaushalmodi / hugo-search-fuse-js Hugo 篇四：添加友链卡片 shortcodes img标签设置默认图片 Fuse.js模糊搜索引擎 使用fuse.js进行搜索 ","date":"2020-10-11","objectID":"/lewky/hugo-3/:11:0","tags":["Lewky-Hugo"],"title":"Hugo系列(3.0) - LoveIt主题美化与博客功能增强 · 第一章","uri":"/lewky/hugo-3/"},{"categories":null,"content":"前言 Hugo本身可以通过修改站点配置文件来完成页面的部分定制，如按钮、多语言等功能。本文基于LoveIt主题【v0.2.10】，且所使用的Hugo版本如下，不同版本且不同主题可能无法适用某些属性： \u003ehugo version Hugo Static Site Generator v0.74.2/extended windows/amd64 BuildDate: unknown ","date":"2020-10-10","objectID":"/lewky/hugo-2/:1:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"配置文件 Hugo默认使用根目录下的config.toml、config.yaml或config.json中的某一个作为站点的配置文件，可以通过--config来配置读取一个或多个配置文件，如下： hugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml ","date":"2020-10-10","objectID":"/lewky/hugo-2/:2:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"配置文件的目录 除了使用单一的站点配置文件，还可以通过使用configDir变量（默认值为config/）来维护不同环境下的各组件的配置文件： 每个文件各自对应配置文件的根对象，比如Params, Menus, Languages等。 每个子目录对应不同的环境配置，类似于Maven的Profile功能。 这些文件可以应用国际化功能，即区分不同的语言版本。 下面是一个简单的例子： ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── config.toml │ │ └── params.toml │ └── staging │ ├── config.toml │ └── params.toml 可以发现上述的结构中，存在着三种不同的环境配置：_default默认环境、production生成环境、staging演示环境。_default下的配置是通用配置，Hugo每次生成站点时都会读取。如果运行hugo --environment staging，则还会额外合并staging的配置（会替换_default下冲突的配置）。 一般情况下我们用不到多环境的功能，只需要在站点根目录下存放一个config.toml文件，直接在该配置文件中指定各种属性，就可以实现相当程度的个性化了。下面是一些常用的配置文件的属性的用法，这些属性都是配置在站点配置文件里的。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:3:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"theme主题属性 配置你的Hugo主题款式，本文基于LoveIt主题【v0.2.10】，所以配置是： theme = \"LoveIt\" ","date":"2020-10-10","objectID":"/lewky/hugo-2/:4:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"网站路径相关的属性 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:5:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"baseURL 网站的根路径，用法如下： baseURL = \"https://mySite.com/\" ","date":"2020-10-10","objectID":"/lewky/hugo-2/:5:1","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"disablePathToLower 是否禁止将网站路径转换成小写，建议设置成true： disablePathToLower = true ","date":"2020-10-10","objectID":"/lewky/hugo-2/:5:2","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"permalinks 生成的文章的路径，默认配置如下： [permalinks] posts = \"/:year/:month/:title/\" 这里可以使用的变量如下： :year：4位数的年份 :month：2位数的月份 :monthname：月份名字 :day：2位数的日期 :weekday：1位数，每周的第几天，星期日对应0 :weekdayname：星期几 :yearday：1到3位数，每年的第几天 :section：当前文章对应的section分类 :sections：当前文章对应的完整的section分类层次 :title：文章的标题 :slug：文章的slug，和title一样是定义在文件头里的属性，当没有定义slug时会使用title作为url :filename：文章的文件名，不包括文件扩展名。 出于seo考虑，不建议在url里加上年月日之类的，由于标题大多有中文或者特殊字符，所以也不建议直接使用标题作为url的一部分。这里建议使用slug的方式，自己手动给每篇文章提取若干个关键词作为slug，以此作为url的一部分，如下： [permalinks] posts = \"/posts/:slug.html\" 然后文章的slug可以这样配置**（permalinks是配置在站点配置文件里的，slug是配置在每篇文章的文件头里的）**： --- title: 建站日志 slug: e62c38c45 --- 我这里是因为文章是从hexo迁移过来的，hexo那边使用了abbrlink插件来生成随机且不重复的名字，为了和之前的文章url对齐就这样配置了。而hugo没有找到类似的插件，所以选择了slug来自定义url，这个功能倒是和博客园的自定义博文的url类似。 另外值得一提的是，默认用的是pretty Url的配置，所有url的末尾都有个/，而Hexo那边url末尾是没有这个/的，算是一点小小的不同。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:5:3","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"uglyurls 这个属性针对默认的pretty Url，比如有个url是/posts/e62c38c45/。如果设置了uglyurls = true，则会把末尾的/改成.html，新的url就变成了/posts/e62c38c45.html。但是这个属性有个问题，它会把文章以外的url也变成这种“丑陋”的格式，比如分类、标签等url，这样就不美观了。 所以不推荐使用该属性，如果希望文章的url不是纯目录格式的，可以像上文的permalinks那样配置。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:5:4","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"markup标记属性 配置markdown解析器、代码块高亮、文章目录等。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:6:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"markdown解析器 Hugo提供了asciidocExt、blackFriday和goldmark三种markdown解析器，默认使用goldmark来解析markdown，如下： markup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false blackFriday: angledQuotes: false extensions: null extensionsMask: null footnoteAnchorPrefix: \"\" footnoteReturnLinkContents: \"\" fractions: true hrefTargetBlank: false latexDashes: true nofollowLinks: false noreferrerLinks: false plainIDAnchors: true skipHTML: false smartDashes: true smartypants: true smartypantsQuotesNBSP: false taskLists: true defaultMarkdownHandler: goldmark goldmark: extensions: definitionList: true footnote: true linkify: true strikethrough: true table: true taskList: true typographer: true parser: attribute: true autoHeadingID: true autoHeadingIDType: github renderer: hardWraps: false unsafe: false xhtml: false ","date":"2020-10-10","objectID":"/lewky/hugo-2/:6:1","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"Highlight代码高亮 hugo默认的配置如下： markup: highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \"\" lineAnchors: \"\" lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true style: monokai tabWidth: 4 guessSyntax：自动推断代码属于某种语言。 hl_Lines：仅在使用goldmark解析器时该属性才起效，表示对某几行代码进行高亮处理，比如： lineAnchors: \"2\"表示第二行代码高亮； lineAnchors: \"1-8\"表示第一到八行代码高亮； lineAnchors: \"1 3\"表示第一行和第三行代码高亮。 lineNoStart：表示行数从多少开始计数。 lineNos：配置行数，false表示不显示行数。 lineNumbersInTable：值为true时可以在显示行数时提供友好的代码块复制黏贴功能。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:6:2","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"Table Of Contents文章目录 配置如下： markup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 startLevel：从几级标题开始生成目录，值为2表示从h2开始生成目录。 endLevel：到几级标题为止生成目录，值为3表示大于h3的标题就不再生成目录。 ordered：是否生成排序目录，建议启用该功能，生成的目录会更为美观。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:6:3","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"补充一个完整的toml格式的markup配置 上面分别给出了yaml格式的3种配置，下面是对应toml格式的完整配置： [markup] defaultMarkdownHandler = \"goldmark\" [markup.asciidocExt] backend = \"html5\" extensions = [] failureLevel = \"fatal\" noHeaderOrFooter = true safeMode = \"unsafe\" sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] [markup.blackFriday] angledQuotes = false footnoteAnchorPrefix = \"\" footnoteReturnLinkContents = \"\" fractions = true hrefTargetBlank = false latexDashes = true nofollowLinks = false noreferrerLinks = false plainIDAnchors = true skipHTML = false smartDashes = true smartypants = true smartypantsQuotesNBSP = false taskLists = true [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] attribute = true autoHeadingID = true autoHeadingIDType = \"github\" [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = \"\" lineAnchors = \"\" lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \"monokai\" tabWidth = 4 [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:6:4","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"menu菜单属性 侧边栏菜单是在配置文件里配置的，如下： [menu] [[menu.main]] identifier = \"about\" name = \"\u003ci class='fa fa-heart'\u003e\u003c/i\u003eabout hugo\" url = \"/about/\" weight = -110 [[menu.main]] identifier = \"start\" name = \"getting started\" post = \"\u003cspan class='alert'\u003eNew!\u003c/span\u003e\" pre = \"\u003ci class='fa fa-road'\u003e\u003c/i\u003e\" url = \"/getting-started/\" weight = -100 identifier的值不能重复。 weight是比重，值越小则该菜单的位置越靠上面。 name是菜单名字。 pre和post分别对应当前菜单的前缀和后缀，可以定义fontawesome等图标。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:7:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"languages语言属性 该属性可以提供站点的国际化功能，即区分多语言版本的站点，比如若设定了en、zh两个语言，设定默认语言是zh；则默认的站点url的根目录后会加上/zh/，并可以通过站点首页的切换语言下拉框来切换到其他语音，如：/en/。 languages一般用来跟上面的menu一起配合使用，如下： [Languages] [Languages.en] title = \"Yulin Lewis' Blog\" weight = 1 languageName = \"English\" [[Languages.en.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 [Languages.zh] title = \"雨临Lewis的博客\" weight = 2 languageName = \"简体中文\" [[Languages.zh.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 此外，也可以将languages和params搭配使用，用法和上面类似，其实就是在这些属性的前面加上languages前缀而已。但是不知道为什么，在本文背景里提及的hugo和LoveIt版本下，站点无法正常读取到多语言参数，比如[languages.zh-cn.params]这种属性会读取不了。 ","date":"2020-10-10","objectID":"/lewky/hugo-2/:8:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"minify压缩属性 该属性用于压缩站点的各种静态资源，比如html、css、json、xml等，官方的默认配置如下： [minify] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [minify.tdewolff] [minify.tdewolff.css] decimals = -1 keepCSS2 = true [minify.tdewolff.html] keepConditionalComments = true keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepWhitespace = false [minify.tdewolff.js] [minify.tdewolff.json] [minify.tdewolff.svg] decimals = -1 [minify.tdewolff.xml] keepWhitespace = false 但实际上在配置文件中加入上述的配置并没有效果，也无法进行修改，这可能是个bug，因为和启用压缩的命令参数冲突了。不过从上面的配置可以看出，hugo自带的压缩功能是默认会压缩CSS、HTML、JS、JSON、SVG、XML；并且在压缩HTML的时候会保留注释、属性、文档标签和闭合标签，但是会去掉引号和空格。 如果想启用压缩功能，可以运行如下命令（记得运行前要先删掉public目录）： hugo --minify 也可以直接把这个参数配置到配置文件中，这样就可以不在运行命令时指定压缩参数： minify = true ","date":"2020-10-10","objectID":"/lewky/hugo-2/:9:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"参考链接 Configure Hugo Syntax Highlighting Menus Multilingual Mode ","date":"2020-10-10","objectID":"/lewky/hugo-2/:10:0","tags":["Lewky-Hugo"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/lewky/hugo-2/"},{"categories":null,"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:0:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo?\r\r由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本.\r\r 推荐使用 Hugo extended 版本\r\r由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验.\r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:1:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:1","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:2","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意\r\r在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题.\r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:3","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意\r\r默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数.\r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:4","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. ▲ 基本配置下的预览\r\r技巧\r\r当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新.\r\r 注意\r\r由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender \r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:5","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧\r\r网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多…\r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:2:6","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"配置 ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:3:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = fals","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:3:1","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:3:2","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"自定义样式 注意\r\rHugo extended 版本对于自定义样式是必需的.\r\r 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:3:3","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. ▲ 语言切换\r\r","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:4:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:4:1","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意\r\r请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容.\r\r 技巧\r\r也可以使用 文章前置参数 来翻译网址.\r\r ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:4:2","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:4:3","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:5:0","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:5:1","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎?\r\r以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. \r\r 关于 algolia 的使用技巧\r\r你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json…\r\r","date":"2020-03-06","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/:5:2","tags":["LoveIt"],"title":"主题文档 - 基本概念","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"categories":null,"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:0:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用\r\r 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! \r\r ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:1:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意\r\r不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做.\r\r 这是一个前置参数例子: ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"twemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧\r\r featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg \r\r ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:2:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. ▲ 文章摘要预览\r\r","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:1","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意\r\r请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格.\r\r ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:2","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:3","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:4","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意\r\r不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等.\r\r ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:3:5","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:4:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:0","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:1","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"数学公式 LoveIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧\r\r有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单.\r\r 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧\r\r你可以在 网站配置 中自定义公式块和行内公式的分割符.\r\r Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:2","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:3","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:4","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:5","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧\r\r这个方法可以间接解决一个还未解决的 Hugo 的 issue.\r\r 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/:5:6","tags":["LoveIt"],"title":"主题文档 - 内容","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E5%AE%B9/"},{"categories":null,"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:0:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:1:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:2:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:3:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"instagram instagram 的文档 一个 instagram 示例: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:4:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:5:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"ref 和 relref ref 和 relref 的文档 ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:6:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"tweet tweet 的文档 一个 tweet 示例: {{\u003c tweet 877500564405444608 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:7:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:8:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/:9:0","tags":["LoveIt"],"title":"主题文档 - 内置 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E5%86%85%E7%BD%AE-shortcodes/"},{"categories":null,"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:0:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"style 注意\r\rHugo extended 版本对于 style shortcode 是必需的.\r\r style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:1:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: \r \r \r 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:2:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image) ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:3:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip\r\r一个 技巧 横幅\r\r ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:4:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:1","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:2","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:3","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:4","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:5","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:6","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:5:7","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"echarts ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:6:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"mapbox Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:7:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:8:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:8:1","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:8:2","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:8:3","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:8:4","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: \r如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:9:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"typeit typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:10:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:10:1","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:10:2","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r\r","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:10:3","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意\r\r脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库.\r\r 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/:11:0","tags":["LoveIt"],"title":"主题文档 - 扩展 Shortcodes","uri":"/loveit/%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3-%E6%89%A9%E5%B1%95-shortcodes/"},{"categories":null,"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. \r\r 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r\r 将此页保存为书签，以备将来参考!\r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:0:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e \r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:1:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:2:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:3:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:4:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:5:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"强调 ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:1","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:2","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:3","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:6:4","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:7:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"列表 ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:8:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:8:1","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem \r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:8:2","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:8:3","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"代码 ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:1","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:2","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:3","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\r\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:9:4","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. \r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:10:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"链接 ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:1","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:2","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r\r ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:11:3","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:12:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) \rMinion \"\rMinion\r 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") \rAlt textThe Stormtroopocat \"\rThe Stormtroopocat\r 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] \rAlt textThe Dojocat \"\rThe Dojocat\r 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧\r\rLoveIt 主题提供了一个包含更多功能的 图片的 shortcode.\r\r 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/:13:0","tags":["LoveIt"],"title":"Markdown 基本语法","uri":"/loveit/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"categories":null,"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:0:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"表情与情感 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:9","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:10","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:11","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:12","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:13","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:14","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:1:15","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"人与身体 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:9","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:10","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:11","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:12","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:13","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:14","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:15","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:2:16","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"动物与自然 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:3:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"食物与饮料 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:4:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"旅游与地理 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:9","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:10","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:5:11","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"活动 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:6:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"物品 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:9","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:10","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:11","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:12","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:13","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:14","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:15","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:16","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:17","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:7:18","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"符号 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:3","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:4","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:5","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:6","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:7","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:8","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:9","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:10","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:11","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:12","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:8:13","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"旗帜 ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:9:0","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:9:1","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/loveit/emoji-%E6%94%AF%E6%8C%81/:9:2","tags":["LoveIt"],"title":"Emoji 支持","uri":"/loveit/emoji-%E6%94%AF%E6%8C%81/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/moments/:0:0","tags":null,"title":" 时刻","uri":"/moments/"},{"categories":null,"content":"2022-01-09 \r守正 卑鄙是卑鄙者的通行证， 高尚是高尚者的墓志铭； ——北岛《回答》 \r\r\r\r中国 · 四川 · 成都 2022-01-09 20:22:02 \r\r\r","date":"0001-01-01","objectID":"/moments/:1:0","tags":null,"title":" 时刻","uri":"/moments/"},{"categories":null,"content":"\r\r","date":"0001-01-01","objectID":"/love/:1:0","tags":null,"title":"Love","uri":"/love/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":" 初衷 　产生要建立个人博客的想法纯属巧合，一开始纯粹是为了方便记笔记，学习了markdown语法，因为markdown很好的避免了Word的各种复杂排版，但是markdown不支持插入图片，只能以链接的形式，然后开始折腾图床用来存放图片； 　在这个过程中有在网上看到了图床很多都用在自己的博客网站，因为本人也是一个喜欢折腾、研究的人，就勾起了我的好奇，于是开始学习相关知识，搭建了属于自己的个人博客； 　搭建本站是用于存放自己的学习笔记，包括整理的教程，方便日后查看，顺便也分享出来； 　作为一个经常用搜索引擎解决问题、扩展学习的人，深知分享的意义； 　如果有可能帮助到有需要的人，那便是再好不过。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":" 关于本站 ✏️ 本站属个人博客，用于记录、分享本人的学习笔记； ☘️ 如果碰巧对你有帮助，或者想与我交流； 📫 可以添加我的  微信或者  E-Mial与我联系； 👀 也可以在文章下方评论区留言，我都可以看到。 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":" 联系我  微信号: Cajun_Ray  E-mail : cajun_ray@qq.com ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":" 博客事件轴 ","date":"0001-01-01","objectID":"/about/:4:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":"2022 01月09日 - 仿朋友圈，新增 时刻 页面； 01月02日 - 仿聊天界面新增 日志、留言 页面； ","date":"0001-01-01","objectID":"/about/:4:1","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":"2021 11月29日 - 开始变得花里胡哨了，更换了页面字体，避免加载过慢，字体文件作精简处理只保留了常用字体; 11月26日 - 增加轮播背景图，所有页面适配Web端和移动端，同时适配日间模式和夜间模式，初学CSS，沉迷其中无法自拔，我太菜了； 11月22日 - 将博客的静态资源从gitee换到gitHub并启用jsDelivr加速； 11月17日 - 复刻抄袭了 LoveIt 主题作者 Dillon 的彩蛋一枚； 11月14日 - 跟着 雨临Lewis 大佬的教程，增加了文章加密、打赏、文章过期提醒等功能； 11月08日 - 学习了一点点html和css，作为练习，新增 书单； 10月23日 - 为了提升访问速度，使用Vercel+Github自定义域名访问； 10月19日 - 使用Github Pages自定义域名到 https://ll.sc.cn 进行访问； 10月17日 - 购买个人域名ll.sc.cn； 10月11日 - 将代码托管到Github，同时使用github pages进行访问； 10月09日 - 弃用Hexo框架，使用Hugo框架搭建个人博客； 09月26日 - 将代码托管到Gitee，并启用gitee pages进行访问； 09月24日 - 学习使用Hexo框架搭建个人博客； ","date":"0001-01-01","objectID":"/about/:4:2","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":" 致谢 本站基于 Hugo框架； 主题使用 LoveIt； 代码托管由 Github提供支持； 域名服务由 腾讯云提供支持； CDN 服务由 jsDelivr提供支持； 图床由 Gitee提供支持； ","date":"0001-01-01","objectID":"/about/:5:0","tags":null,"title":"关　于","uri":"/about/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/friend/:0:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"大佬们 \rOhYee\r个人向笔记性质技术分享，共产主义开源编程。\r\r\r\r\r\r雨临Lewis的博客\r不想当写手的码农不是好咸鱼\r\r\r\r\r\rOrangeX4\r方橙式的博客\r\r\r\r\r\rDillon\rLoveIt主题作者\r\r\r\r\r","date":"0001-01-01","objectID":"/friend/:1:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"群友 \r\r\r月儿高\r不务正业的Java程序员\r\r\r\r\r","date":"0001-01-01","objectID":"/friend/:2:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"博客组织 \rBlogwe\r博客我们\r\r\r\r\r\r十年之约\r记录十年之约的网站\r\r\r\r\r","date":"0001-01-01","objectID":"/friend/:3:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"欢迎互链 👉 如果您有意交换友情链接，请先将本站添加为您的友链，然后在评论区留言； 👉 留言格式如 本站信息 ，(RSS为非必须项)； 👉 本站目前仅接受个人博客、非商业、非营利网站的友链申请。 ","date":"0001-01-01","objectID":"/friend/:4:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"本站信息 名称: 雷雷屋头 描述: 假装是个室内设计师的工地搬砖狗。 地址: https://ll.sc.cn/ 头像: https://ll.sc.cn/images/avatar.webp/ RSS: https://ll.sc.cn/index.xml/ 注意\r\r本站将会隐藏长时间无法打开的友链，直到您的网站可以访问后重新展示； 请您务必确保域名解析正确且服务器工作正常； 如果您的网站启用了 https ，请留意证书的有效期。 \r\r ","date":"0001-01-01","objectID":"/friend/:5:0","tags":null,"title":"友情链接","uri":"/friend/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/links/:0:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"常用 \r\r\r有道云笔记\r随时记录，高效办公\r\r\r\r\r阿里巴巴矢量图标库\r阿里妈妈矢量图标管理、交流平台\r\r\r\r","date":"0001-01-01","objectID":"/links/:1:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"字体 \r\r\riFonts字体助手\r字体管理器-用有趣的字做设计\r\r\r\r\r\r\r字由\r让设计更有价值\r\r\r\r\r\r\r找字体\r免费商用中文字体\r\r\r\r\r\r\r100font\r一个专门收集整理免费商用字体的网站\r\r\r\r","date":"0001-01-01","objectID":"/links/:2:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"学习 \r\r\rdoyoudo\r学习可以很有趣\r\r\r\r","date":"0001-01-01","objectID":"/links/:3:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"图像处理 \r\r\r图压\r简单易用的图片压缩软件\r\r\r\r","date":"0001-01-01","objectID":"/links/:4:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"编辑器 \r\r\rVSCode\r轻量但功能强大的源代码编辑器\r\r\r\r\r\r\rHBuilderX\r轻如编辑器、强如IDE的合体版本。\r\r\r\r\r\r\rCODEPEN\r在线的前端代码编辑工具\r\r\r\r\r\r\rWeb在线工具\r在线编辑器（Html、SVG、PS）\r\r\r\r","date":"0001-01-01","objectID":"/links/:5:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"链接 \r\r\rGithub\r大型同性交友网站\r\r\r\r\r\r\rVercel\r网站托管服务\r\r\r\r\r\r\rGitee\r代码托管服务\r\r\r\r\r\r\rAlgolia\r托管搜索API\r\r\r\r\r\r\rLeanCloud\r后端云服务\r\r\r\r\r\r\rIcons\r好看的Icon\r\r\r\r\r\r\rjsDelivr\r免费的开源CDN\r\r\r\r\r\r\r百度统计\r中文网站流量分析平台\r\r\r\r\r\r\r谷歌站长\rGoogle Search Console\r\r\r\r\r\r\r必应站长\rBing Webmaster Tool\r\r\r\r\r\r\r搜狗站长\r搜狗站长平台\r\r\r\r\r\r\r360站长\r360站长平台\r\r\r\r","date":"0001-01-01","objectID":"/links/:6:0","tags":null,"title":"常用站点","uri":"/links/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/book/:0:0","tags":null,"title":"我的书单","uri":"/book/"},{"categories":null,"content":"王小波 读 完\r\r\r《黄金时代》\r作者：王小波\r\r\r《白银时代》\r作者：王小波\r\r读 完\r\r\r《青铜时代》\r作者：王小波\r\r\r《黑铁时代》\r作者：王小波\r\r读 完\r\r\r《一只特立独行的猪》\r作者：王小波\r\r\r《沉默的大多数》\r作者：王小波\r\r读 完\r\r\r《绿毛水怪》\r作者：王小波\r\r\r《黑铁时代》\r作者：王小波\r\r\r","date":"0001-01-01","objectID":"/book/:1:0","tags":null,"title":"我的书单","uri":"/book/"},{"categories":null,"content":"中文 \r《围城》\r作者：钱钟书\r\r\r《狂人日记》\r作者：鲁迅\r\r读 完\r\r\r《云边有个小卖部》\r作者：张嘉佳\r\r读 完\r\r\r《平原上的摩西》\r作者：双雪涛\r\r读 完\r\r\r《我讲个笑话，你可别哭啊》\r作者：囧叔\r\r读 完\r\r\r《以幽默的方式过一生》\r作者：琢磨先生\r\r\r《一颗苹果宣布成为星球》\r作者：韩今谅\r\r读 完\r\r\r《我承认我不曾历经沧桑》\r作者：蒋方舟\r\r读 完\r\r\r《20几岁，你为什么害怕来不及》\r作者：林夏萨摩\r\r读 完\r\r\r《东京一年》\r作者：蒋方舟\r\r读 完\r\r\r《冷场》\r作者：李诞\r\r\r","date":"0001-01-01","objectID":"/book/:2:0","tags":null,"title":"我的书单","uri":"/book/"},{"categories":null,"content":"外文 读 完\r\r\r《百年孤独》\r作者：加西亚·马尔克斯[哥伦]\r\r读 完\r\r\r《霍乱时期的爱情》\r作者：加西亚·马尔克斯[哥伦]\r\r读 完\r\r\r《月亮与六便士》\r作者：威廉·萨默塞特·毛姆[英]\r\r\r《乌合之众》\r作者：古斯塔夫·勒庞[法]\r\r\r《沟通圣经：听说读写全方位沟通技巧》\r作者：尼基·斯坦顿[英]\r\r\r《关键对话：如何高效能沟通》\r作者：科里·帕特森[美]\r\r\r《即兴演讲：掌控人生关键时刻》\r作者：朱迪思·汉弗莱[加]\r\r\r《反脆弱》\r作者：纳西姆·尼古拉斯·塔勒布[美]\r\r\r《富爸爸穷爸爸》\r作者：富爸爸穷爸爸[美]\r\r\r《了不起的盖茨比》\r作者：菲茨杰拉德[美]\r\r\r《断舍离》\r作者：山下英子[日]\r\r读 完\r\r\r《82年生的金智英》\r作者：赵南柱[韩]\r\r读 完\r\r\r《当我谈跑步时，我谈些什么》\r作者：村上春树[日]\r\r\r《解忧杂货店》\r作者：东野圭吾[日]\r\r\r《一个叫欧维的男人决定去死》\r作者：汉内斯·赫尔姆[瑞典]\r\r\r《我在雨中等你》\r作者：西蒙·柯蒂斯[美]\r\r\r《偷影子的人》\r作者：马克·李维[法]\r\r\r《这书能让你戒烟》\r作者：亚纶·卡尔[英]\r\r\r 📗 自从工作过后，就很少看书了，遂卖掉了 Kindle ，短视频风靡，不知不觉已经沉迷于短视频无法自拔，时隔两年，幡然醒悟，决定摆脱短视频，重新开始阅读； 📒 发现微信读书还比较方便，阅读时间可以兑换无限卡，参加答题之类的活动，坚持阅读，基本都可以免费看。还能划线标记，整理笔记，分享书签等； 📙 同时也支持多设备同步，在路上用手机看，回家用 iPad 还能接着看； 欢迎在评论区推荐书单。 ","date":"0001-01-01","objectID":"/book/:3:0","tags":null,"title":"我的书单","uri":"/book/"},{"categories":null,"content":"\r","date":"0001-01-01","objectID":"/journal/:0:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-07　20:50 学会享受，等待延迟回报。\r\r ","date":"0001-01-01","objectID":"/journal/:1:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-06　15:21 不要轻易否定和放弃当下的生活，应当先找到当下生活的意义，再去拓展边界，突破自己的局限性，才能选择另外一种活法。\r\r ","date":"0001-01-01","objectID":"/journal/:2:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-05　19:17 放弃：是你已经拥有了它，选择不要它了； 逃避：是你不要解决这个问题，逃过它了。 \r\r ","date":"0001-01-01","objectID":"/journal/:3:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-04　22:01 害怕做计划、做方案，其实并不是因为它本身有多难。而是，我们的家庭教育、以及应试教育帮我们决定了，从小应该学什么、做什么。大多情况下，路径是被规划好的。我们很少去思考、去学习一些最基础、最本真的东西。比如，这个世界是如何运转的？我们自己是如何与这个世界相处的。\r\r当 10 岁的你想要一件自己的玩具，没人和你讨论你是否真的需要它，为什么需要它，是虚荣，还是真的爱；他们有可能会买，可能不会买，但他们总是说，“小孩子懂什么？”；更不会有人和你讨论——玩具背后都有哪些故事？你可以通过哪些方式去得到自己的玩具？假如有一天你不得不失去它，你又该如何去面对？\r\r后来的每一次选择，你都不太去管这背后的意义，对规律、对原理、对 “为什么” 、“怎么来的” 这样的问题毫无耐心，你只想说—— “好了好了，别废话了，告诉我怎么做就行了吧！” “瞎扯那么多干什么，这些我早就知道了，说点儿我不知道的啊！” \r\r直到有一天，你开始面对一些现实问题，你问自己、问别人—— “怎么办？” “怎么做人生规划啊？” “怎么找到人生目标啊？” \r\r你回答不上来，因为你曾经跳过了无数个 “为什么”、“怎么来的”。你看似从不同的地方学到了不同的知识，但却丢掉了更宝贵的东西——智慧。\r\r当然，这不是一堂教你如何树立人生目标、教你如何更智慧的课。我只想说明，做计划、做方案是每个人的必修课。如果你意识到这一点，即便从前没有任何经验，现在开始也不晚。它不是说，你一开始就得做出多么好的方案，而是你在有这种意识的情况下，愿意去做，并且一次比一次有哪怕一点小小的进步。\r\r ","date":"0001-01-01","objectID":"/journal/:4:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-03　13:17 我的博客今天满100天啦……🎉🎉🎉\r\r ","date":"0001-01-01","objectID":"/journal/:5:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-02　17:42 元旦假期第二天，哪里也没去，在家折腾博客，添加了镜像站点，新增了本页面（日志）。\r\r ","date":"0001-01-01","objectID":"/journal/:6:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"2022-01-01　00:00 凡事过往，皆为序章；2022，请多指教。\r\r","date":"0001-01-01","objectID":"/journal/:7:0","tags":null,"title":"日志","uri":"/journal/"},{"categories":null,"content":"\rh2 {\rtext-align: center !important;\rmargin-top: 2rem !important;\r}\rh2.header-mark::before {\rcontent: none !important;\r}\r\r","date":"0001-01-01","objectID":"/board/:0:0","tags":null,"title":"留言板","uri":"/board/"},{"categories":null,"content":"来都来了说点什么吧~~ ","date":"0001-01-01","objectID":"/board/:1:0","tags":null,"title":"留言板","uri":"/board/"}]